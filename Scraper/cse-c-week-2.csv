studentId,studentUserName,challenge,score,code
19714324,srujan150604,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}
"
19714324,srujan150604,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Node {
    int data;
    struct Node* next;
};

// Function to insert a node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to find the midpoint of the linked list and split it
struct Node* splitMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return NULL;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    // Move fast by 2 steps and slow by 1 step, until fast reaches the end
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    struct Node* secondHalf = slow->next;
    slow->next = NULL;

    return secondHalf;
}

// Function to print the linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    struct Node* head = NULL;
    int n;
    
    scanf(""%d"", &n);

    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    
    

    struct Node* secondHalf = splitMidpoint(head);

    
    printList(head);

    
    printList(secondHalf);

    return 0;
}
"
21232849,pascalpan123,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};

typedef struct Node Node;

Node* createNode(int coefficient, int exponent) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->coefficient = coefficient;
    newNode->exponent = exponent;
    newNode->next = NULL;
    return newNode;
}

Node* insert(Node* head, int coefficient, int exponent) {
    Node* newNode = createNode(coefficient, exponent);
    if (head == NULL) {
        return newNode;
    }
    
    Node* current = head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
    return head;
}

Node* addPolynomials(Node* poly1, Node* poly2) {
    Node* result = NULL;
    Node* current1 = poly1;
    Node* current2 = poly2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exponent > current2->exponent) {
            result = insert(result, current1->coefficient, current1->exponent);
            current1 = current1->next;
        } else if (current1->exponent < current2->exponent) {
            result = insert(result, current2->coefficient, current2->exponent);
            current2 = current2->next;
        } else {
            int newCoefficient = current1->coefficient + current2->coefficient;
            result = insert(result, newCoefficient, current1->exponent);
            current1 = current1->next;
            current2 = current2->next;
        }
    }
    
    while (current1 != NULL) {
        result = insert(result, current1->coefficient, current1->exponent);
        current1 = current1->next;
    }
    
    while (current2 != NULL) {
        result = insert(result, current2->coefficient, current2->exponent);
        current2 = current2->next;
    }
    
    return result;
}

void display(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->coefficient);
        current = current->next;
        if (current != NULL) {
            printf("" "");
        }
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node* poly1 = NULL;
    for (int i = 0; i < n; i++) {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);
        poly1 = insert(poly1, coefficient, exponent);
    }
    
    Node* poly2 = NULL;
    for (int i = 0; i < m; i++) {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);
        poly2 = insert(poly2, coefficient, exponent);
    }
    
    Node* result = addPolynomials(poly1, poly2);
    display(result);
    
    return 0;
}
"
21232849,pascalpan123,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode *findMidpoint(struct ListNode *head) {
    if(head->next == NULL)
        return head;
    struct ListNode *slow = head;
    struct ListNode *fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

void splitLinkedList(struct ListNode *head, struct ListNode *mid, struct ListNode **firstHalf, struct ListNode **secondHalf) {
    *firstHalf = head;
    *secondHalf = mid->next;
    mid->next = NULL;
}

void printLinkedList(struct ListNode *head) {
    struct ListNode *current = head;
    while (current != NULL) {
        printf(""%d "", current->val);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct ListNode *head = NULL;
    struct ListNode *current = NULL;

    // Input linked list nodes
    for (int i = 0; i < n; i++) {
        int val;
        scanf(""%d"", &val);

        struct ListNode *newNode = (struct ListNode *)malloc(sizeof(struct ListNode));
        newNode->val = val;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = head;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }

    struct ListNode *mid = findMidpoint(head);
    struct ListNode *firstHalf, *secondHalf;
    splitLinkedList(head, mid, &firstHalf, &secondHalf);
    //printf(""%d"",mid->val);
    printLinkedList(firstHalf);
    printLinkedList(secondHalf);

    return 0;
}
"
21604725,PES1UG22CS178,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to insert a new term at the end of a linked list
void insertTerm(struct Term** head, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*head == NULL) {
        *head = newTerm;
        return;
    }

    struct Term* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;
}

// Function to add two polynomials represented as linked lists
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print a polynomial represented as a linked list
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
21604725,PES1UG22CS178,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

// Define the structure of a linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

// Function to find the midpoint of the linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

// Function to split the linked list into two parts at the given node
void splitList(struct Node* head, struct Node** firstHalf, struct Node** secondHalf, struct Node* midpoint) {
    if (midpoint == NULL) {
        return;
    }

    *firstHalf = head;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}

// Function to print the elements of a linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    struct Node* midpoint = findMidpoint(head);
    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;
    splitList(head, &firstHalf, &secondHalf, midpoint);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
21663557,PES1UG22CS168,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>


struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** head, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*head == NULL) {
        *head = newTerm;
        return;
    }

    struct Term* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
21663557,PES1UG22CS168,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}


void splitList(struct Node* head, struct Node** firstHalf, struct Node** secondHalf, struct Node* midpoint) {
    if (midpoint == NULL) {
        return;
    }

    *firstHalf = head;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}


void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    struct Node* midpoint = findMidpoint(head);
    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;
    splitList(head, &firstHalf, &secondHalf, midpoint);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}
"
22739655,PES1UG22CS172,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

// Function to insert a term into the linked list
Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

// Function to add two polynomials represented as linked lists
Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    // Free memory
    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}
"
22739655,PES1UG22CS172,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node *next;
}NODE;

NODE* init();
NODE* insert_at_end(NODE* head);
NODE *findMidpoint( NODE *head);
void display(NODE  *head);

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
  
    int n;
    scanf(""%d"",&n);
    
    NODE *head;
    head=NULL;
    
    for(int i=0;i<n;i++)
        head=insert_at_end(head);
        
    NODE *slow=findMidpoint(head);

    NODE *p=slow->next;
    slow->next=NULL;
    
     display(head);
     display(p);

    
    return 0;
}



NODE* init()
{
    NODE* temp=malloc(sizeof(NODE));
    return temp;
}




NODE* insert_at_end(NODE* head)
{
    NODE* temp=init();
   // printf(""enter the data\n"");
    scanf(""%d"",&temp->data);
    temp->next=NULL;
    if(head==NULL)       
        head=temp;
    else{
        NODE* p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        
    }
    
    return head;   
}

NODE *findMidpoint(NODE *head)
{
    if(head->next==NULL)
        return head;
     NODE *slow=head;
     NODE *fast=head->next;
    
    while(fast!=NULL && fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow ;
}

void display(NODE* head)
{
    NODE* p=head;
    while(p!=NULL)
    {
        printf(""%d "",p->data);
        p=p->next;
    }
    printf(""\n"");
}



"
22739685,PES1UG22CS144,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coeff;
    int exp;
    struct Term* next;
};

void display(struct Term* p1) 
{
    while (p1 != NULL) 
    {
        printf(""%d "", p1->coeff);
        p1 = p1->next;
    }
    printf(""\n"");
}

struct Term* add(struct Term* p1, struct Term* p2) 
{
    struct Term* res = NULL;
    while (p1 != NULL && p2 != NULL) 
    {
        if (p1->exp > p2->exp) 
        {
            insert_into(&res, p1->coeff, p1->exp);
            p1 = p1->next;
        }
        else if (p1->exp < p2->exp) 
        {
            insert_into(&res, p2->coeff, p2->exp);
            p2 = p2->next;
        } 
        else 
        {
            int sumCoeff = p1->coeff + p2->coeff;
            if (sumCoeff != 0) 
            {
                insert_into(&res, sumCoeff, p1->exp);
            }
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    
    while (p1 != NULL) 
    {
        insert_into(&res, p1->coeff, p1->exp);
        p1 = p1->next;
    }
    
    while (p2 != NULL) 
    {
        insert_into(&res, p2->coeff, p2->exp);
        p2 = p2->next;
    }
    return res;
}

void insert_into(struct Term** p, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coeff = coeff;
    newTerm->exp = exp;
    newTerm->next = NULL;
    
    if (*p == NULL)
    {
        *p = newTerm;
    } else 
    {
        struct Term* curr = *p;
        while (curr->next != NULL)
        {
            curr = curr->next;
        }
        curr->next = newTerm;
    }
}

int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* p1 = NULL;
    struct Term* p2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insert_into(&p1, coeff, exp);
        } else 
        {
            insert_into(&p2, coeff, exp);
        }
    }
    struct Term* res = add(p1, p2);
    display(res);
    return 0;
}
"
22739685,PES1UG22CS144,Divide Linked List 2,11.25,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct NODE {
    int data;
    struct NODE* next;
}Node;


Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf(""Memory allocation failed.\n"");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

Node* createLinkedList(int n) {
    Node* head = NULL;
    Node* current = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        Node* newNode = createNode(value);

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return head;
}

void splitLinkedList(Node* head,Node* splitPoint) {
    if (splitPoint == NULL || splitPoint->next == NULL) {
        printf(""Invalid split point.\n"");
        return;
    }

    Node* secondHead = splitPoint->next;
    splitPoint->next = NULL; 

    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");

    current = secondHead;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

Node* findmidpoint(Node* head){
    if(head->next==NULL) return head;
    Node* slow=head;
    Node* fast=head->next;
    while(fast!=NULL && fast->next!=NULL )
    {
        slow=slow->next;
        fast=fast->next->next;
        }
    return slow;
}

int main() {
    int n;
    scanf(""%d"", &n);

    Node* head = createLinkedList(n);
    Node* mp=findmidpoint(head);
    splitLinkedList(head,mp);
}


"
22739844,PES1UG22CS171,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int coeff;
    int deg;
    struct node* next;
}NODE;

NODE* init();
NODE* insert_at_end(NODE* head);
void findsum(NODE* h1,NODE* h2);
//void display(NODE* head);

int main() 
{
    NODE* h1=NULL;
    NODE* h2=NULL;
    int n,m;
    scanf(""%d %d"",&n,&m);
    //printf(""%d %d\n"",n,m);
    for(int i=0;i<n;i++)
    {
        h1=insert_at_end(h1);
    }
    for(int i=0;i<m;i++)
    {
        h2=insert_at_end(h2);
    }
    //display(h1);
    //display(h2);
    findsum(h1,h2);
    return 0;
}

NODE* init()
{
    NODE* temp=malloc(sizeof(NODE));
    return temp;
}

NODE* insert_at_end(NODE* head)
{
    NODE* temp=init();
    scanf(""%d %d"",&temp->coeff,&temp->deg);
    temp->next=NULL;
    if(head==NULL)       
        head=temp;
    else
    {
        NODE* p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
    }
    return head;    
}

void findsum(NODE* h1,NODE* h2)
{
    while(h1!=NULL && h2!=NULL)
    {
    if(h1!=NULL && h2!=NULL && h1->deg==h2->deg)
    {
        printf(""%d "",h1->coeff+h2->coeff);
        h1=h1->next;
        h2=h2->next;
    }
    
    else if(h1!=NULL && h2!=NULL && h1->deg>h2->deg)
    {
        printf(""%d "",h1->coeff);
        h1=h1->next;
    }
    
    else if(h1!=NULL && h2!=NULL && h1->deg<h2->deg)
    {
        printf(""%d "",h2->coeff);
        h2=h2->next;
    }
    }
    while(h1!=NULL)
    {
        printf(""%d "",h1->coeff);
        h1=h1->next;
    }
    while(h2!=NULL)
    {
        printf(""%d "",h2->coeff);
        h2=h2->next;
    }
}
/*
void display(NODE* head)
{
    NODE* p=head;
    while(p!=NULL)
    {
        printf(""%d %d\n"",p->coeff,p->deg);
        p=p->next;
    }
}
*/"
22739844,PES1UG22CS171,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int data;
    struct node* next;
}NODE;



NODE* init();
NODE* insert_at_end(NODE* head);
NODE* findMidpoint(NODE* head);
void display(NODE* head);

int main() 
{
    int n;
    scanf(""%d"",&n);
    NODE* head=NULL;
    for(int i=0;i<n;i++)
    {
    head=insert_at_end(head);
    }
    NODE* mid=findMidpoint(head);
    NODE* h2=mid->next;
    mid->next=NULL;
    display(head);
    printf(""\n"");
    display(h2);
    return 0;
}

NODE* init()
{
    NODE* temp=malloc(sizeof(NODE));
    return temp;
}

NODE* insert_at_end(NODE* head)
{
    NODE* temp=init();
    scanf(""%d"",&temp->data);
    temp->next=NULL;
    if(head==NULL)       
        head=temp;
    else
    {
        NODE* p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
    }
    return head;    
}

NODE* findMidpoint(NODE* head)
{
    if(head->next==NULL)
        return head;
    NODE* slow=head;
    NODE* fast=head->next;
    while(fast!=NULL && fast->next!=NULL)
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
}

void display(NODE* head)
{
    NODE* p=head;
    while(p!=NULL)
    {
        printf(""%d "",p->data);
        p=p->next;
    }
}"
22739878,PES1UG22CS136,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int coeff;
    int power;
    struct node* next;
}NODE;

NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int coeff;
    int power;
    scanf(""%d %d"", &coeff,&power);

    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;

    return temp;
}

NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}

void display(NODE* head){
    if(head==NULL){
        
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->coeff);
            head = head->next;
        }
    }
}

NODE* insertFinal(NODE* final, int coeff, int power){
    NODE* temp = malloc(sizeof(NODE));
    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;
    
    if(final==NULL){
        final = temp;
    }
    else{
        NODE* p = final;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return final;
}

NODE* calcPolynomial(NODE*final, NODE* head1, NODE* head2){
    while(head1!=NULL && head2!=NULL){
        if(head1->power>head2->power){
            final = insertFinal(final, head1->coeff, head1->power);
            head1 = head1->next;
        }
        else if(head1->power< head2->power){
            final = insertFinal(final,head2->coeff, head2->power);
            head2 = head2->next;
        }
        else if(head1->power == head2->power){
            head1->coeff = head1->coeff + head2->coeff;
            final = insertFinal(final,head1->coeff, head1->power);
            head1 = head1->next;
            head2 = head2->next;
        }
    }
    while(head1!=NULL){
        final = insertFinal(final, head1->coeff,head1->power);
        head1 = head1->next;
    }
    while(head2!=NULL){
        final = insertFinal(final, head2->coeff,head2->power);
        head2 = head2->next;
    }
    return final;
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n,m;
    scanf(""%d %d"",&n,&m);
    NODE* head1 = NULL;
    NODE* head2 = NULL;
    while(n--){
        head1 = insertEnd(head1);
    }
    while(m--){
        head2 = insertEnd(head2);
    }
    NODE* final = NULL;
    final = calcPolynomial(final, head1, head2);
    display(final);
    return 0;
}"
22739878,PES1UG22CS136,Divide Linked List 2,15,"#include<stdio.h>
#include<stdlib.h>
typedef struct node{
    int data;
    struct node* next;
}NODE;
NODE* init(){
    NODE* temp=(NODE*)malloc(sizeof(NODE*));
    return temp;
}
NODE* linked_list_input(NODE* head){
   NODE* temp=init();
   NODE* p=head;
   scanf(""%d"",&temp->data);
   while(p->next!=NULL){
    p=p->next;
   }
   p->next=temp;
   temp->next=NULL;
   return head;
}
void display(NODE* head){
    NODE* p=head;
    while(p!=NULL){
        printf(""%d\t"",p->data);
        p=p->next;
    }
    printf(""\n"");
}
void divide_linked_list(NODE* head,int n){
    int m;
    NODE* p=head;
    NODE* beforep=NULL;
    if(n%2==0){
        m=n/2;
    }
    else{
        m=(n/2)+1;
    }
    int count=m;
    while(count!=0){
        beforep=p;
        p=p->next;
        count-=1;
    }
    beforep->next=NULL;
    display(head);
    display(p);
}
int main(){
    int n;
    NODE* head=init();
    scanf(""%d"",&n);
    int m=n-1;
    scanf(""%d"",&head->data);
    head->next=NULL;
    while(m--){
        head=linked_list_input(head);
    }
    divide_linked_list(head,n);
}"
22741864,PES1UG22CS718,Polynomial Addition,15,"#include <stdio.h>
#include<string.h>
#include<math.h>
#include <stdlib.h>

typedef struct polyTerm 
{
    int coefficient;
    int exponent;
    struct Term *next;
}Term;

Term* insert(Term *head, int coeff, int expo);
Term *addPoly(Term *poly1, Term *poly2);
void print(Term *head);

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insert(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insert(poly2, coeff, expo);
    }

    Term* result = addPoly(poly1, poly2);

    print(result);

    
    while (poly1 != NULL) 
    {
        Term* temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) 
    {
        Term* temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) 
    {
        Term* temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}

Term* insert(Term *head, int coeff, int expo) 
{
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) 
    {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) 
    {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}


Term *addPoly(Term *poly1, Term *poly2) 
{
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            result = insert(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) 
        {
            result = insert(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else 
        {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) 
            {
                result = insert(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) 
    {
        result = insert(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) 
    {
        result = insert(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void print(Term *head) 
{
    Term *temp = head;
    while (temp != NULL) 
    {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

"
22741864,PES1UG22CS718,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node* next;
}NODE;
NODE* init();
NODE* Midpoint(NODE* head);
void display(NODE* head);

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    NODE* head= NULL;
    int n;
    scanf(""%d"",&n);
    int i=0;
    while(i<n)
    {
        NODE* temp=init();
        scanf(""%d"",&temp->data);
        temp->next=NULL;
        if(head==NULL)
        {
            head=temp;
        }
        else
        {
            NODE* p=head;
            while(p->next!=NULL)
            {
                p=p->next;
            }
            p->next=temp;
        }
    i++;
       
    }
    NODE* mid=Midpoint(head);
    NODE* head2=mid->next;
    mid->next=NULL;
    display(head);
    display(head2);
    
    return 0;
}

NODE* init()
{
    NODE* temp=malloc(sizeof(NODE));
    return temp;
}
void display(NODE* head)
{
    NODE* p=head;
    while(p!=NULL)
    {
        printf(""%d "",p->data);
        p=p->next;
        
    }
    printf(""\n"");
}
NODE* Midpoint(NODE* head)
{
    if(head->next==NULL)
    {
        return head;
    }
    NODE* slow=head;
    NODE* fast= head->next;
    
    while(fast!=NULL && fast->next!=NULL)
    {
        slow=slow->next;
        fast= fast->next->next;
    }
    return slow;
}
"
22741992,PES1UG22CS183,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }
}"
22741992,PES1UG22CS183,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int data;
    struct node* next;
}NODE;


NODE* createnode();
NODE* Midpoint(NODE* head);
void display(NODE* head);

int main() {
   
    NODE* head= NULL;
    int num;
    scanf(""%d"",&num);
    int i=0;
    while(i<num)
    {
        NODE* temp=createnode();
        scanf(""%d"",&temp->data);
        temp->next=NULL;
        if(head==NULL)
        {
            head=temp;
        }
        else
        {
            NODE* p=head;
            while(p->next!=NULL)
            {
                p=p->next;
            }
            p->next=temp;
        }
    i++;
       
    }
    NODE* mid=Midpoint(head);
    NODE* head2=mid->next;
    mid->next=NULL;
    display(head);
    display(head2);
    
    return 0;
}

NODE* createnode()
{
    NODE* temp=malloc(sizeof(NODE));
    return temp;
}
void display(NODE* head)
{
    NODE* p=head;
    while(p!=NULL)
    {
        printf(""%d "",p->data);
        p=p->next;
        
    }
    printf(""\n"");
}

NODE* Midpoint(NODE* head)
{
    if(head->next==NULL)
    {
        return head;
    }
    NODE* slow=head;
    NODE* fast= head->next;
    
    while(fast!=NULL && fast->next!=NULL)
    {
        slow=slow->next;
        fast= fast->next->next;
    }
    return slow;
}"
22743030,PES1UG22CS150,Polynomial Addition,15," 
#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}"
22743030,PES1UG22CS150,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* splitMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return NULL;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    struct Node* secondHalf = slow->next;
    slow->next = NULL;

    return secondHalf;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    struct Node* head = NULL;
    int n;
    
    scanf(""%d"", &n);

    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    
    

    struct Node* secondHalf = splitMidpoint(head);

    
    printList(head);

    
    printList(secondHalf);

    return 0;
}"
22743127,PES1UG22CS134,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}"
22743127,PES1UG22CS134,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* splitMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return NULL;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    struct Node* secondHalf = slow->next;
    slow->next = NULL;

    return secondHalf;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    struct Node* head = NULL;
    int n;
    
    scanf(""%d"", &n);

    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    
    

    struct Node* secondHalf = splitMidpoint(head);

    
    printList(head);

    
    printList(secondHalf);

    return 0;
}"
22743141,PES1UG22CS163,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int coeff;
    int power;
    struct node* next;
}NODE;

NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int coeff;
    int power;
    scanf(""%d %d"", &coeff,&power);

    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;

    return temp;
}

NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}

void display(NODE* head){
    if(head==NULL){
        
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->coeff);
            head = head->next;
        }
    }
}

NODE* insertFinal(NODE* final, int coeff, int power){
    NODE* temp = malloc(sizeof(NODE));
    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;
    
    if(final==NULL){
        final = temp;
    }
    else{
        NODE* p = final;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return final;
}

NODE* calcPolynomial(NODE*final, NODE* head1, NODE* head2){
    while(head1!=NULL && head2!=NULL){
        if(head1->power>head2->power){
            final = insertFinal(final, head1->coeff, head1->power);
            head1 = head1->next;
        }
        else if(head1->power< head2->power){
            final = insertFinal(final,head2->coeff, head2->power);
            head2 = head2->next;
        }
        else if(head1->power == head2->power){
            head1->coeff = head1->coeff + head2->coeff;
            final = insertFinal(final,head1->coeff, head1->power);
            head1 = head1->next;
            head2 = head2->next;
        }
    }
    while(head1!=NULL){
        final = insertFinal(final, head1->coeff,head1->power);
        head1 = head1->next;
    }
    while(head2!=NULL){
        final = insertFinal(final, head2->coeff,head2->power);
        head2 = head2->next;
    }
    return final;
}

int main() {

     
    int n,m;
    scanf(""%d %d"",&n,&m);
    NODE* head1 = NULL;
    NODE* head2 = NULL;
    while(n--){
        head1 = insertEnd(head1);
    }
    while(m--){
        head2 = insertEnd(head2);
    }
    NODE* final = NULL;
    final = calcPolynomial(final, head1, head2);
    display(final);
    return 0;
}"
22743141,PES1UG22CS163,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


typedef struct node{
    int data;
    struct node *next;
}NODE;

NODE *findMidpoint(NODE *head)
{
    if (head->next == NULL){
        return head;
    }
    NODE* slow = head;
    NODE* fast = head->next;
    while (fast != NULL && fast->next != NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}

NODE *secondHead(NODE *head){
    NODE* mid = findMidpoint(head);
    NODE *head2 = mid->next;
    mid->next = NULL;
    return head2;
}

NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int x;
    scanf(""%d"", &x);

    temp->data = x;
    temp->next = NULL;

    return temp;
}


NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}

void display(NODE* head){
    if(head==NULL){
        
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->data);
            head = head->next;
        }
        printf(""\n"");
    }
}

int main() {

    int n;
    scanf(""%d"",&n);
    NODE* head = NULL;
    while(n--){
        head = insertEnd(head);
    }
    NODE* head2 = secondHead(head);
    
    display(head);
    display(head2);
    return 0;
}"
22743144,PES1UG22CS142,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

typedef struct Term Term;
Term* createTerm(int coef, int exp) {
    Term* term = (Term*)malloc(sizeof(Term));
    term->coefficient = coef;
    term->exponent = exp;
    term->next = NULL;
    return term;
}
void insertTerm(Term** poly, int coef, int exp) {
    Term* term = createTerm(coef, exp);

    if (*poly == NULL) {
        *poly = term;
    } else {
        Term* curr = *poly;
        while (curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = term;
    }
}
Term* addPolynomials(Term* poly1, Term* poly2) {
    Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sumCoef = poly1->coefficient + poly2->coefficient;
            if (sumCoef != 0) {
                insertTerm(&result, sumCoef, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}
void printPolynomial(Term* poly) {
    if (poly == NULL) {
        printf(""0"");
        return;
    }

    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        if (poly->next != NULL) {
        }
        poly = poly->next;
    }
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term* poly1 = NULL;
    Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }

    Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    return 0;
}
"
22743144,PES1UG22CS142,Divide Linked List 2,15,"#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
    int data;
    struct node* next;
}NODE;

NODE* init()
{
    NODE* temp=malloc(sizeof(NODE));
    return temp;
}
NODE* insert_at_end(NODE* head)
{
        
         NODE* temp=init();
        scanf(""%d"",&temp->data);
        temp->next=NULL;
        
        if(head==NULL)
            head=temp;
        else
        {
            NODE* p=head;
            while(p->next!=NULL)
                p=p->next;
            p->next=temp;
        }
    return head;
}

void display(NODE* head)
{
    NODE* p=head;
    while(p!=NULL)
    {
        printf(""%d "",p->data);
        p=p->next;
    }
}

NODE* findmidpoint(NODE* head)
{
    if (head==NULL)
        return head;
NODE* slow=head;
NODE* fast=head->next;

while(fast!=NULL&&fast->next!=NULL)
{
slow=slow->next;
fast=fast->next->next;
}
return slow;
}

int main()
{
    NODE* head=NULL;
    NODE* head2=NULL;
    NODE* findmidpoint(NODE* head);
    void display(NODE* head);
    NODE* p;
    int n;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++)
        head=insert_at_end(head);
    p=findmidpoint(head);
    head2=p->next;
    p->next=NULL;
    display(head);
    printf(""\n"");
    display(head2);
    return 0;
}"
22743335,PES1UG22CS140,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
    typedef struct node{
        int coe;
        int pow;
        struct node* next;
    }NODE;
    NODE* create(int c,int p){
        NODE* po=malloc(sizeof(NODE));
        po->coe=c;
        po->pow=p;
        po->next=NULL;
        return po;
    }
    NODE* createlist(NODE* head,int c,int p){
        if(head==NULL){
            NODE* a1;
            a1=create(c,p);
            return a1;
        }
        else{
            NODE* temp;
            NODE* a1;
            temp=head;
            while(temp->next!=NULL){
                temp=temp->next;
            }
            a1=create(c,p);
            temp->next=a1;
            return head;
        }
    }
    void find(NODE* head){
        int a[50]={0};
        NODE* temp;
        temp=head;
        while(temp!=NULL){
            a[temp->pow]+=temp->coe;
            temp=temp->next;
        }
        temp=head;
        for(int i=49;i>=0;i--){
            if(a[i]!=0){
                printf(""%d "",a[i]);
            }
        }
    }
    int main(){
        int n,m,a,b;
        NODE* head=NULL;
        scanf(""%d%d"",&n,&m);
        for(int i=0;i<n+m;i++){
            scanf(""%d%d"",&a,&b);
            head=createlist(head,a,b);
        }
        find(head);
       return 0;
    }"
22743335,PES1UG22CS140,Divide Linked List 2,7.5,"
#include <stdio.h>
#include <stdlib.h>

// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to find the midpoint of the linked list
struct Node* findMidpoint(struct Node* head) {
    struct Node* slow = head;
    struct Node* fast = head;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

// Function to print the elements of a linked list
void printLinkedList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* midpoint = findMidpoint(head);
    struct Node* head2 = midpoint->next;
    midpoint->next = NULL;

    printLinkedList(head);
    printLinkedList(head2);

return 0;
}"
22743337,PES1UG22CS160,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node {
    int coeff;
    int exp;
    struct node *next;
}NODE;
NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int coeff,exp;
    scanf(""%d %d"", &coeff,&exp);

    temp->coeff = coeff;
    temp->exp = exp;
    temp->next = NULL;

    return temp;
}


NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}

void display(NODE* head){
    if(head==NULL){
        
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->coeff);
            head = head->next;
        }
        printf(""\n"");
    }
}
NODE* insertLast(NODE* head3, int coeff, int exp){
    NODE* temp = malloc(sizeof(NODE));
    temp->coeff = coeff;
    temp->exp = exp;
    temp->next = NULL;
    
    if(head3==NULL){
        head3 = temp;
    }
    else{
        NODE* p = head3;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head3;
}
NODE* ordered_poly(NODE* head3, NODE* head1, NODE* head2){
    while(head1!=NULL && head2!=NULL){
        if(head1->exp>head2->exp){
            head3 = insertLast(head3, head1->coeff, head1->exp);
            head1 = head1->next;
        }
        else if(head1->exp< head2->exp){
            head3 = insertLast(head3,head2->coeff, head2->exp);
            head2 = head2->next;
        }
        else if(head1->exp == head2->exp){
            head1->coeff = head1->coeff + head2->coeff;
            head3 = insertLast(head3,head1->coeff, head1->exp);
            head1 = head1->next;
            head2 = head2->next;
        }
    }
    while(head1!=NULL){
        head3 = insertLast(head3, head1->coeff,head1->exp);
        head1 = head1->next;
    }
    while(head2!=NULL){
        head3 = insertLast(head3, head2->coeff,head2->exp);
        head2 = head2->next;
    }
    return head3;
} 


int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    int n,m;
    scanf(""%d %d"",&n,&m);
    NODE* head1 = NULL;
    NODE* head2 = NULL;
    while(n--){
        head1 = insertEnd(head1);
    }
    while(m--){
        head2 = insertEnd(head2);
    }
    NODE* head3 = NULL;
    head3 = ordered_poly(head3, head1, head2);
    display(head3);
    
    return 0;
}
"
22743337,PES1UG22CS160,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node *next;
    
}NODE;

NODE *findMidpoint(NODE *head)
{
    if (head->next == NULL)
        return head;
    NODE *fast = head->next;
    NODE *slow = head;
    
    while(fast != NULL && fast->next != NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int val;
    scanf(""%d"", &val);

    temp->data = val;
    temp->next = NULL;

    return temp;
}

void display(NODE* head){
    if(head==NULL){
        
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->data);
            head = head->next;
        }
        printf(""\n"");
    }
}
NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}
NODE *secondlist(NODE *head){
    NODE* middle = findMidpoint(head);
    NODE *head2 = middle->next;
    middle->next = NULL;
    return head2;
}
int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
    int n;
    scanf(""%d"",&n);
    NODE* head = NULL;
    while(n--){
        head = insertEnd(head);
    }
    NODE* head2 = secondlist(head);
    
    display(head);
    display(head2);
    return 0;
}
"
22743394,PES1UG22CS133,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}"
22743394,PES1UG22CS133,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* splitMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return NULL;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    struct Node* secondHalf = slow->next;
    slow->next = NULL;

    return secondHalf;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    struct Node* head = NULL;
    int n;
    
    scanf(""%d"", &n);

    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    
    

    struct Node* secondHalf = splitMidpoint(head);

    
    printList(head);

    
    printList(secondHalf);

    return 0;
}"
22743456,PES1ug22CS177,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


typedef struct node{
    int c;
    int exp;
    struct node *next;
}NODE;

NODE* init(){
    NODE *temp=malloc(sizeof(NODE));
    return temp;

}

NODE * compare(NODE* head1, NODE*head2){
    NODE*p1=head1;
    NODE*p2=head2;
    while(p1!=NULL&&p2!=NULL){
    if (p1->exp>p2->exp){
        printf(""%d "",p1->c);
        p1=p1->next;
    }
    else if(p1->exp==p2->exp){
        int data;
        data=p1->c+p2->c;
        p1=p1->next;
        p2=p2->next;
        printf(""%d "",data);
       
    }
    else if(p1->exp<p2->exp){
        printf(""%d "",p2->c);
        p2=p2->next;
    }
   
    }
    while(p1==NULL&&p2!=NULL){
        printf(""%d "",p2->c);
        p2=p2->next;
    }
    while(p2==NULL&&p1!=NULL){
        printf(""%d "",p1->c);
        p1=p1->next;
    }
    return head1;
}
NODE* insert(NODE* head){
    NODE *p=head;
    int x,y;
    scanf(""%d%d"",&x,&y);
    NODE *temp=init();
    temp->c=x;
    temp->exp=y;
    temp->next=NULL;
    if(head==NULL){
        head=temp;
    }
    else{
        while(p->next!=NULL){
            p=p->next;
        }
        p->next=temp;
    }
    return head;
}



int main() {
    int n,m;
    NODE*head1=NULL;
    NODE* head2=NULL;
    scanf(""%d"",&n);
    scanf(""%d"",&m);
    for(int i=0; i<n; i++){
        head1=insert(head1);
    }
    for(int i=0; i<m; i++){
        head2=insert(head2);
    }
    compare(head1,head2);
   
    return 0;
}"
22743456,PES1ug22CS177,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node * next;
}NODE;
NODE* init()
{
    NODE *temp;
    temp=malloc(sizeof(NODE));
    return temp;
}
NODE *make_list() {
    NODE* head;
    NODE *p = malloc(sizeof(NODE));
    head = p;
    
    int n;
    scanf(""%d"", &n);
    for (int x = 0; x < n; x++) {
        scanf(""%d"", &(p->data));
        if (x == n - 1) {
            p->next = NULL;
        } else {
            NODE* temp = init();
            p->next = temp;
            p = p->next;
        }
    }
    
    return head; 
}

NODE* *findMidpoint(NODE* head)
{
    if(head->next==NULL)
    {
        return head;
    }
    NODE *fast;
    NODE *slow;
    slow=head;
    fast=head->next;
    while((fast!=NULL) && (fast->next !=NULL) )
    {
        slow=slow->next;
        fast=fast->next->next;
        
    }
    return slow;
}
void Display(NODE* head)
{
    NODE* p;
    p=head;
    while(p!=NULL)
    {
        printf(""%d "",p->data);
        p=p->next;
    }
    printf(""\n"");
}
int main() {
    NODE *head;
    NODE* head2;
    head=make_list();
    NODE *mid;
    mid=findMidpoint(head);
    head2=mid->next;
    mid->next=NULL;
    Display(head);
    Display(head2);
    
    return 0;
    
}"
22743484,PES1UG22CS173,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

// Function to insert a term into the linked list
Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

// Function to add two polynomials represented as linked lists
Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    // Free memory
    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
22743484,PES1UG22CS173,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node* next;
}NODE;
NODE* init();
NODE* Midpoint(NODE* head);
void display(NODE* head);

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    NODE* head= NULL;
    int n;
    scanf(""%d"",&n);
    int i=0;
    while(i<n)
    {
        NODE* temp=init();
        scanf(""%d"",&temp->data);
        temp->next=NULL;
        if(head==NULL)
        {
            head=temp;
        }
        else
        {
            NODE* p=head;
            while(p->next!=NULL)
            {
                p=p->next;
            }
            p->next=temp;
        }
    i++;
       
    }
    NODE* mid=Midpoint(head);
    NODE* head2=mid->next;
    mid->next=NULL;
    display(head);
    display(head2);
    
    return 0;
}

NODE* init()
{
    NODE* temp=malloc(sizeof(NODE));
    return temp;
}
void display(NODE* head)
{
    NODE* p=head;
    while(p!=NULL)
    {
        printf(""%d "",p->data);
        p=p->next;
        
    }
    printf(""\n"");
}
NODE* Midpoint(NODE* head)
{
    if(head->next==NULL)
    {
        return head;
    }
    NODE* slow=head;
    NODE* fast= head->next;
    
    while(fast!=NULL && fast->next!=NULL)
    {
        slow=slow->next;
        fast= fast->next->next;
    }
    return slow;
}"
22743498,PES1UG22CS175,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}"
22743498,PES1UG22CS175,Divide Linked List 2,15,"#include<stdio.h>
#include<stdlib.h>


struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* splitMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return NULL;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    struct Node* secondHalf = slow->next;
    slow->next = NULL;

    return secondHalf;
}


void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    struct Node* head = NULL;
    int n;
    scanf(""%d"", &n);
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }
    struct Node* secondHalf = splitMidpoint(head);
    printList(head); 
    printList(secondHalf);

    return 0;
}"
22743518,PES1UG22CS153,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

// Function to insert a term into the linked list
Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

// Function to add two polynomials represented as linked lists
Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    // Free memory
    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
22743518,PES1UG22CS153,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        return newNode;
    } else {
        struct Node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
        return head;
    }
}

// Function to find the midpoint of the linked list
struct Node* findMidpoint(struct Node* head) {
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}


void printLinkedList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }

    struct Node* midpoint = findMidpoint(head);
    struct Node* head2 = midpoint->next;
    midpoint->next = NULL;

    printLinkedList(head);
    printLinkedList(head2);

    return 0;
}
"
22743522,PES1UG22CS147,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }   
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}
    

"
22743522,PES1UG22CS147,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* splitMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return NULL;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    struct Node* secondHalf = slow->next;
    slow->next = NULL;

    return secondHalf;
}
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    struct Node* head = NULL;
    int n;    
    scanf(""%d"", &n);    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }
    struct Node* secondHalf = splitMidpoint(head);
    printList(head);    
    printList(secondHalf);
    return 0;
}


"
22743536,PES1UG22CS717,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>


typedef struct Term 
{
    int coefficient;
    int exponent;
    struct Term *next;
} Term;
Term *insertTerm(Term *head, int coeff, int expo) 
{
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;
    if (head == NULL) 
    {
        return newTerm;
    }
    Term *temp = head;
    while (temp->next != NULL) 
    {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}
Term *addPolynomials(Term *poly1, Term *poly2) 
{
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) 
        {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else 
        {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) 
            {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    while (poly1 != NULL) 
    {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
   while (poly2 != NULL) 
    {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
   return result;
}
void printPolynomial(Term *head) 
{
    Term *temp = head;
    while (temp != NULL) 
    {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    Term *poly1 = NULL;
    Term *poly2 = NULL;
    for (int i = 0; i < n; i++) 
    {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }
    for (int i = 0; i < m; i++) 
    {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }
    Term *result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    while (poly1 != NULL) 
    {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) 
    {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) 
    {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    
}
"
22743536,PES1UG22CS717,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node* next;
}NODE;
NODE* init();
NODE* Midpoint(NODE* head);
void display(NODE* head);

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    NODE* head= NULL;
    int n;
    scanf(""%d"",&n);
    int i=0;
    while(i<n)
    {
        NODE* temp=init();
        scanf(""%d"",&temp->data);
        temp->next=NULL;
        if(head==NULL)
        {
            head=temp;
        }
        else
        {
            NODE* p=head;
            while(p->next!=NULL)
            {
                p=p->next;
            }
            p->next=temp;
        }
    i++;
       
    }
    NODE* mid=Midpoint(head);
    NODE* head2=mid->next;
    mid->next=NULL;
    display(head);
    display(head2);
    
    return 0;
}

NODE* init()
{
    NODE* temp=malloc(sizeof(NODE));
    return temp;
}
void display(NODE* head)
{
    NODE* p=head;
    while(p!=NULL)
    {
        printf(""%d "",p->data);
        p=p->next;
        
    }
    printf(""\n"");
}
NODE* Midpoint(NODE* head)
{
    if(head->next==NULL)
    {
        return head;
    }
    NODE* slow=head;
    NODE* fast= head->next;
    
    while(fast!=NULL && fast->next!=NULL)
    {
        slow=slow->next;
        fast= fast->next->next;
    }
    return slow;
}"
22743621,PES1UG22CS148,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    
    if (*poly == NULL || exp > (*poly)->exponent) {
        newNode->next = *poly;
        *poly = newNode;
    } else {
        struct Node* current = *poly;
        while (current->next != NULL && current->next->exponent >= exp) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int coeffSum = poly1->coefficient + poly2->coefficient;
            if (coeffSum != 0) {
                insertTerm(&result, coeffSum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    
    return result;
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }
    
    struct Node* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22743621,PES1UG22CS148,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct linkedlist{
    int data;
    struct linkedlist* next;
}NODE;

void display(NODE* head)
{
    NODE*p = head;
    while(p!=NULL)
    {
        printf(""%d "",p->data);
        p=p->next;
    }printf(""\n"");
}

NODE* init()
{
    NODE *temp=malloc(sizeof(NODE));
    return temp;
}

NODE* insert_at_end(NODE* head)
{
    NODE* temp=init();
    scanf(""%d"",&temp->data);
    temp->next=NULL;

    if(head==NULL)
    {
        head=temp;
    }
    else
    {
        NODE* p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next = temp;
    }
    return head;
}

NODE *findMidpoint(NODE *head){
    if(head==NULL)
    {
        return head;
    }
    NODE *slow = head;
    
    NODE *fast = head->next;
    
    while(fast!=NULL && fast->next !=NULL){
        slow = slow->next;
        fast = fast->next->next;
    }
    NODE* temp=slow->next;
    slow->next=NULL;
    return temp;
    
}

int main() {

       int n;
    NODE* head = NULL;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++)
    {
        head=insert_at_end(head);
    }
    NODE* mid=findMidpoint(head);
    display(head);
    display(mid);
    
       
    return 0;
}
"
22743631,PES1UG22CS179,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct NODE
{
    int coeff;
    int power;
    struct NODE * next;
}NODE;

NODE * init(int co,int p)
{
    NODE * temp= (NODE *)malloc(sizeof(NODE));
    temp->coeff=co;
    temp->power=p;
    temp->next=NULL;
    return temp;
}

NODE * insert_At_end(NODE *head, int c, int p)
{
    NODE *temp=init(c,p);
    if(head==NULL)
    {
        head=temp;
    }
    else{
        NODE *temp1=head;
        while(temp1->next!=NULL)
        {
            temp1=temp1->next;
        }
        temp1->next=temp;
    }
    return head;
}
void display(NODE * head)
{
    if(head==NULL)
    return;
    while(head)
    {
        printf(""%d "",head->coeff);
        head=head->next;
    }
    printf(""\n"");
}
void addpo(NODE * head1,NODE * head2,NODE ** head3)
{
    if(head1==NULL && head2!=NULL)
    {display(head2);return;}
    if(head2==NULL && head1!=NULL)
    {display(head1);return;}
    NODE * p1=head1;
    NODE * p2=head2;
    // NODE * p3=head3;
    while(p1!=NULL && p2!=NULL)
    {
        if(p1->power == p2->power)
        {
            *head3=insert_At_end(*head3,(p1->coeff+p2->coeff),p1->power);
            p1=p1->next;
            p2=p2->next;
            continue;
        }
        if(p1->power > p2->power)
        {
            *head3=insert_At_end(*head3,(p1->coeff),p1->power);
            p1=p1->next;
            continue;
        }
        if(p1->power < p2->power)
        {
            *head3=insert_At_end(*head3,(p2->coeff),p2->power);
            p2=p2->next;
            continue;
        }
    }
    if(p1==NULL && p2!=NULL)
    {
        while(p2)
        {
            *head3=insert_At_end(*head3,(p2->coeff),p2->power);
            p2=p2->next;
         }
        display(*head3);
        return;
    }
    else if(p2==NULL && p1!=NULL)
    {
        while(p1)
        {
            *head3=insert_At_end(*head3,(p1->coeff),p1->power);
            p1=p1->next;
         }
        display(*head3);
        return;
    }
    else{
        display(*head3);
        return;
    }
}
int main()
{

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
    NODE * head1=NULL;
    NODE * head2=NULL;
    int n1;
    scanf(""%d"",&n1);
    int n2;
    scanf(""%d"",&n2);
    for(int i=0;i<n1;i++)
    {
        int p,c;
        scanf(""%d %d"",&c,&p);
        head1=insert_At_end(head1,c,p); 
    }
    for(int i=0;i<n2;i++)
    {
        int p,c;
        scanf(""%d %d"",&c,&p);
        head2=insert_At_end(head2,c,p); 
    }
    NODE * head3=NULL;
    addpo(head1,head2,&head3);
    return 0;
}
"
22743631,PES1UG22CS179,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct NODE
{
    int data;
    struct NODE * next;
}NODE;

NODE * init(int p)
{
    NODE * temp= (NODE *)malloc(sizeof(NODE));
    temp->data=p;
    temp->next=NULL;
    return temp;
}

NODE * insert_At_end(NODE *head, int p)
{
    NODE *temp=init(p);
    temp->data=p;
    temp->next=NULL;
    if(head==NULL)
    {
        head=temp;
    }
    else{
        NODE *temp1=head;
        while(temp1->next!=NULL)
        {
            temp1=temp1->next;
        }
        temp1->next=temp;
    }
    return head;
}
void display(NODE * head)
{
    while(head)
    {
        printf(""%d "",head->data);
        head=head->next;
    }
    printf(""\n"");
}

void findmiddle(NODE * head)
{
    if (head == NULL || head->next == NULL)
    {
        display(head);
        return;
    }
    
    NODE *slow = head;
    NODE *fast = head->next;
    
    while (fast != NULL && fast->next != NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    NODE *newhead = slow->next;
    slow->next = NULL;
    
    display(head);
    display(newhead);
}

int main()
{

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
    NODE * head=NULL;
    int n;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++)
    {
        int p;
        scanf(""%d"",&p);
        head=insert_At_end(head,p);
        
    }
    findmiddle(head);
    return 0;
}
"
22743645,PES1UG22CS143,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}


       
    

"
22743645,PES1UG22CS143,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* splitMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return NULL;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    struct Node* secondHalf = slow->next;
    slow->next = NULL;

    return secondHalf;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    struct Node* head = NULL;
    int n;
    scanf(""%d"", &n);
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }
    struct Node* secondHalf = splitMidpoint(head);
    printList(head);
    printList(secondHalf);
    return 0;
}
"
22743679,PES1UG22CS169,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** head, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*head == NULL) {
        *head = newTerm;
        return;
    }

    struct Term* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22743679,PES1UG22CS169,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};


void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}


struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}


void splitList(struct Node* head, struct Node** firstHalf, struct Node** secondHalf, struct Node* midpoint) {
    if (midpoint == NULL) {
        return;
    }

    *firstHalf = head;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    struct Node* midpoint = findMidpoint(head);
    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;
    splitList(head, &firstHalf, &secondHalf, midpoint);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22743715,PES1UG22CS181,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to insert a new term at the end of a linked list
void insertTerm(struct Term** head, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*head == NULL) {
        *head = newTerm;
        return;
    }

    struct Term* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;
}

// Function to add two polynomials represented as linked lists
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print a polynomial represented as a linked list
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22743715,PES1UG22CS181,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

void splitList(struct Node* head, struct Node** firstHalf, struct Node** secondHalf, struct Node* midpoint) {
    if (midpoint == NULL) {
        return;
    }

    *firstHalf = head;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    struct Node* midpoint = findMidpoint(head);
    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;
    splitList(head, &firstHalf, &secondHalf, midpoint);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}
"
22743740,PES1UG22CS158,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** head, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*head == NULL) {
        *head = newTerm;
        return;
    }

    struct Term* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
"
22743740,PES1UG22CS158,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

void splitList(struct Node* head, struct Node** firstHalf, struct Node** secondHalf, struct Node* midpoint) {
    if (midpoint == NULL) {
        return;
    }

    *firstHalf = head;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    struct Node* midpoint = findMidpoint(head);
    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;
    splitList(head, &firstHalf, &secondHalf, midpoint);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22743743,pes1ug22cs132,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

//Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

//Function to insert a new term at the end of a linked list
void insertTerm(struct Term** head, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*head == NULL) {
        *head = newTerm;
        return;
    }

    struct Term* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;
}

// Function to add two polynomials represented as linked lists
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

//Function to print a polynomial represented as a linked list
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22743743,pes1ug22cs132,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

// Define the structure of a linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

// Function to find the midpoint of the linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

// Function to split the linked list into two parts at the given node
void splitList(struct Node* head, struct Node** firstHalf, struct Node** secondHalf, struct Node* midpoint) {
    if (midpoint == NULL) {
        return;
    }

    *firstHalf = head;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}

// Function to print the elements of a linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    struct Node* midpoint = findMidpoint(head);
    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;
    splitList(head, &firstHalf, &secondHalf, midpoint);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22743745,PES1UG22CS129,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    
    if (*poly == NULL || exp > (*poly)->exponent) {
        newNode->next = *poly;
        *poly = newNode;
    } else {
        struct Node* current = *poly;
        while (current->next != NULL && current->next->exponent>= exp) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int coeffSum = poly1->coefficient + poly2->coefficient;
            if (coeffSum != 0) {
                insertTerm(&result, coeffSum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    
    return result;
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }
    
    struct Node* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}
"
22743745,PES1UG22CS129,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct linkedlist{
    int data;
    struct linkedlist* next;
}NODE;

void displaylinkedlist(NODE* head){
    NODE* ptr=head;
    while(ptr!=NULL){
        printf(""%d "",ptr->data);
        ptr=ptr->next;
    }printf(""\n"");
}
NODE *init()
{
    NODE *temp = malloc(sizeof(NODE));
    return temp;
}
NODE *insert_at_end(NODE *head)
{
    
    int x;
    scanf(""%d"", &x);
    NODE *ptr = head;
    NODE *temp = init();
    temp->data = x;
    if (head == NULL)
    {
        head = temp;
    }
    else
    {
        while (ptr->next != NULL)
        {
            ptr = ptr->next;
        }
        ptr->next = temp;
        temp->next = NULL;
    }
    return head;
}

NODE* Findmidpoint(NODE* head){
    if(head==NULL){
        return head;
    }
     NODE* slow=head;
     NODE* fast=head->next;
    while(fast!=NULL && fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
    }
    NODE* temp=slow->next;
    slow->next=NULL;
    
    return temp;
}




int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    NODE* head=NULL;
    int n;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++){
        head=insert_at_end(head);
        
    }
    NODE* mid=Findmidpoint(head);
    displaylinkedlist(head);
    displaylinkedlist(mid);
    
    return 0;
}
"
22743872,PES1UG22CS151,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** head, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*head == NULL) {
        *head = newTerm;
        return;
    }

    struct Term* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22743872,PES1UG22CS151,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}
void splitList(struct Node* head, struct Node** firstHalf, struct Node** secondHalf, struct Node* midpoint) {
    if (midpoint == NULL) {
        return;
    }

    *firstHalf = head;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    struct Node* midpoint = findMidpoint(head);
    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;
    splitList(head, &firstHalf, &secondHalf, midpoint);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22743927,PES1UG22CS176,Polynomial Addition,15,"
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>




struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** head, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*head == NULL) {
        *head = newTerm;
        return;
    }

    struct Term* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
"
22743927,PES1UG22CS176,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

void splitList(struct Node* head, struct Node** firstHalf, struct Node** secondHalf, struct Node* midpoint) {
    if (midpoint == NULL) {
        return;
    }

    *firstHalf = head;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    struct Node* midpoint = findMidpoint(head);
    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;
    splitList(head, &firstHalf, &secondHalf, midpoint);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22743928,PES1UG22CS164,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int coeff;
    int power;
    struct node* next;
}NODE;

NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int coeff;
    int power;
    scanf(""%d %d"", &coeff,&power);

    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;

    return temp;
}

NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}

void display(NODE* head){
    if(head==NULL){
        
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->coeff);
            head = head->next;
        }
    }
}

NODE* insertFinal(NODE* final, int coeff, int power){
    NODE* temp = malloc(sizeof(NODE));
    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;
    
    if(final==NULL){
        final = temp;
    }
    else{
        NODE* p = final;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return final;
}

NODE* calcPolynomial(NODE*final, NODE* head1, NODE* head2){
    while(head1!=NULL && head2!=NULL){
        if(head1->power>head2->power){
            final = insertFinal(final, head1->coeff, head1->power);
            head1 = head1->next;
        }
        else if(head1->power< head2->power){
            final = insertFinal(final,head2->coeff, head2->power);
            head2 = head2->next;
        }
        else if(head1->power == head2->power){
            head1->coeff = head1->coeff + head2->coeff;
            final = insertFinal(final,head1->coeff, head1->power);
            head1 = head1->next;
            head2 = head2->next;
        }
    }
    while(head1!=NULL){
        final = insertFinal(final, head1->coeff,head1->power);
        head1 = head1->next;
    }
    while(head2!=NULL){
        final = insertFinal(final, head2->coeff,head2->power);
        head2 = head2->next;
    }
    return final;
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n,m;
    scanf(""%d %d"",&n,&m);
    NODE* head1 = NULL;
    NODE* head2 = NULL;
    while(n--){
        head1 = insertEnd(head1);
    }
    while(m--){
        head2 = insertEnd(head2);
    }
    NODE* final = NULL;
    final = calcPolynomial(final, head1, head2);
    display(final);
    return 0;
}
"
22743928,PES1UG22CS164,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


typedef struct node{
    int data;
    struct node *next;
}NODE;

NODE *findMidpoint(NODE *head)
{
    if (head->next == NULL){
        return head;
    }
    NODE* slow = head;
    NODE* fast = head->next;
    while (fast != NULL && fast->next != NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}

NODE *secondHead(NODE *head){
    NODE* mid = findMidpoint(head);
    NODE *head2 = mid->next;
    mid->next = NULL;
    return head2;
}

NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int x;
    scanf(""%d"", &x);

    temp->data = x;
    temp->next = NULL;

    return temp;
}


NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}

void display(NODE* head){
    if(head==NULL){
        
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->data);
            head = head->next;
        }
        printf(""\n"");
    }
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    int n;
    scanf(""%d"",&n);
    NODE* head = NULL;
    while(n--){
        head = insertEnd(head);
    }
    NODE* head2 = secondHead(head);
    
    display(head);
    display(head2);
    return 0;
}
"
22743936,PES1UG22CS167,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


typedef struct node{
    int c;
    int exp;
    struct node *next;
}NODE;

NODE* init(){
    NODE *temp=malloc(sizeof(NODE));
    return temp;

}

NODE * compare(NODE* head1, NODE*head2){
    NODE*p1=head1;
    NODE*p2=head2;
    while(p1!=NULL&&p2!=NULL){
    if (p1->exp>p2->exp){
        printf(""%d "",p1->c);
        p1=p1->next;
    }
    else if(p1->exp==p2->exp){
        int data;
        data=p1->c+p2->c;
        p1=p1->next;
        p2=p2->next;
        printf(""%d "",data);
        
    }
    else if(p1->exp<p2->exp){
        printf(""%d "",p2->c);
        p2=p2->next;
    }
    
    }
    while(p1==NULL&&p2!=NULL){
        printf(""%d "",p2->c);
        p2=p2->next;
    }
    while(p2==NULL&&p1!=NULL){
        printf(""%d "",p1->c);
        p1=p1->next;
    }
    return head1;
}
NODE* insert(NODE* head){
    NODE *p=head;
    int x,y;
    scanf(""%d%d"",&x,&y);
    NODE *temp=init();
    temp->c=x;
    temp->exp=y;
    temp->next=NULL;
    if(head==NULL){
        head=temp;
    }
    else{
        while(p->next!=NULL){
            p=p->next;
        }
        p->next=temp;
    }
    return head;
}



int main() {
    int n,m;
    NODE*head1=NULL;
    NODE* head2=NULL;
    scanf(""%d"",&n);
    scanf(""%d"",&m);
    for(int i=0; i<n; i++){
        head1=insert(head1);
    }
    for(int i=0; i<m; i++){
        head2=insert(head2);
    }
    compare(head1,head2);
    
    return 0;
}
"
22743936,PES1UG22CS167,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node* next;
}listNode;

listNode* init(){
    listNode *temp=malloc(sizeof(listNode));
    return temp;

}
listNode* insertback(listNode * head){
    listNode *p=head;
    int x;
    scanf(""%d"",&x);
    listNode *temp=init();
    temp->data=x;
    temp->next=NULL;
    if(head==NULL){
        head=temp;
    }
    else{
        while(p->next!=NULL){
            p=p->next;
        }
        p->next=temp;
    }
    return head;
}
listNode *findMidPoint(listNode *head){
    if (head->next==NULL){
    return head;}
    listNode *slow=head;
    listNode *fast=head->next;
    while(fast!=NULL && fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
    }return slow;

}
listNode* split(listNode* mid,listNode* head){
    listNode*p=head;
    while (mid->data!=p->data){
        printf(""%d "",p->data);
        p=p->next;
    }
    printf(""%d\n"",p->data);
    p=p->next;
    while(p!=NULL){
        printf(""%d "",p->data);
        p=p->next;

    }
    return mid;
}
int main() {
    
    listNode* head=NULL;
    int x;
    scanf(""%d"",&x);
    for (int i=0; i<x; i++){
        head=insertback(head);
    }
    listNode* mid=findMidPoint(head) ;
    split(mid,head);
    return 0;
}
"
22743952,PES1UG22CS127,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



    struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

typedef struct Term Term;
Term* createTerm(int coef, int exp) {
    Term* term = (Term*)malloc(sizeof(Term));
    term->coefficient = coef;
    term->exponent = exp;
    term->next = NULL;
    return term;
}
void insertTerm(Term** poly, int coef, int exp) {
    Term* term = createTerm(coef, exp);

    if (*poly == NULL) {
        *poly = term;
    } else {
        Term* curr = *poly;
        while (curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = term;
    }
}
Term* addPolynomials(Term* poly1, Term* poly2) {
    Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sumCoef = poly1->coefficient + poly2->coefficient;
            if (sumCoef != 0) {
                insertTerm(&result, sumCoef, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}
void printPolynomial(Term* poly) {
    if (poly == NULL) {
        printf(""0"");
        return;
    }

    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        if (poly->next != NULL) {
        }
        poly = poly->next;
    }
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term* poly1 = NULL;
    Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }

    Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    return 0;
}

"
22743952,PES1UG22CS127,Divide Linked List 2,11.25,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


typedef struct node{
    int data;
    struct node*next;
}NODE;

NODE*init()
{
    NODE*temp=malloc(sizeof(NODE));
    temp->next=NULL;
    return temp;
}

void display(NODE*head)
{
    NODE*p=head;
    while(p!=NULL)
    {
        printf(""%d "",p->data);
        p=p->next;
    }
    printf(""\t"");
}

NODE*midpoint(NODE*head)
{
    if(head->next==NULL)
    {
        display(head);
    }
    NODE*slow=head;
    NODE*fast=head->next;
    NODE*head2=NULL;
    
    while(fast!=NULL && fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
    }

    head2=slow->next;
    slow->next=NULL;
    
    display(head);
    printf(""\n"");
    display(head2);

    return head2;
}


NODE* insert_at_end(NODE*head)
{
    NODE*p=head;
    // printf(""Enter the number: "");
    int y;
    scanf(""%d"",&y);
    NODE*temp=init();
    temp->data=y;
    temp->next=NULL;
    if(head==NULL)
    {
        head=temp;
    }
    else
    {
        while(p->next!=NULL)
        {
            p=p->next;
        }
        p->next=temp;
    }
    return head;
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
    NODE* head=NULL;
    int x;
    NODE*p=head;
    //printf(""Enter number of elements to write:"");
    scanf(""%d"",&x);
    for(int i=0;i<x;i++)
    {
        p=insert_at_end(p);
    }
    midpoint(p);
    
    
        
    
    
    return 0;
}
"
22743958,PES1UG22CS180,Polynomial Addition,15,"
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


typedef struct node{
    int c;
    int exp;
    struct node *next;
}NODE;

NODE* init(){
    NODE *temp=malloc(sizeof(NODE));
    return temp;

}

NODE * compare(NODE* head1, NODE*head2){
    NODE*p1=head1;
    NODE*p2=head2;
    while(p1!=NULL&&p2!=NULL){
    if (p1->exp>p2->exp){
        printf(""%d "",p1->c);
        p1=p1->next;
    }
    else if(p1->exp==p2->exp){
        int data;
        data=p1->c+p2->c;
        p1=p1->next;
        p2=p2->next;
        printf(""%d "",data);
       
    }
    else if(p1->exp<p2->exp){
        printf(""%d "",p2->c);
        p2=p2->next;
    }
   
    }
    while(p1==NULL&&p2!=NULL){
        printf(""%d "",p2->c);
        p2=p2->next;
    }
    while(p2==NULL&&p1!=NULL){
        printf(""%d "",p1->c);
        p1=p1->next;
    }
    return head1;
}
NODE* insert(NODE* head){
    NODE *p=head;
    int x,y;
    scanf(""%d%d"",&x,&y);
    NODE *temp=init();
    temp->c=x;
    temp->exp=y;
    temp->next=NULL;
    if(head==NULL){
        head=temp;
    }
    else{
        while(p->next!=NULL){
            p=p->next;
        }
        p->next=temp;
    }
    return head;
}



int main() {
    int n,m;
    NODE*head1=NULL;
    NODE* head2=NULL;
    scanf(""%d"",&n);
    scanf(""%d"",&m);
    for(int i=0; i<n; i++){
        head1=insert(head1);
    }
    for(int i=0; i<m; i++){
        head2=insert(head2);
    }
    compare(head1,head2);
   
    return 0;
}"
22743958,PES1UG22CS180,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node * next;
}NODE;


NODE* init()
{
    NODE *temp;
    temp=malloc(sizeof(NODE));
    return temp;
}


NODE* make_list() {
    NODE* head;
    NODE *p = malloc(sizeof(NODE));
    head = p;
    
    int n;
    scanf(""%d"", &n);
    for (int x = 0; x < n; x++) {
        scanf(""%d"", &(p->data));
        if (x == n - 1) {
            p->next = NULL;
        } else {
            NODE* temp = init();
            p->next = temp;
            p = p->next;
        }
    }
    
    return head; 
}

NODE* findMidpoint(NODE* head)
{
    if(head->next==NULL)
    {
        return head;
    }
    NODE *fast;
    NODE *slow;
    slow=head;
    fast=head->next;
    while((fast!=NULL) && (fast->next !=NULL) )
    {
        slow=slow->next;
        fast=fast->next->next;
        
    }
    return slow;
}
void Display(NODE* head)
{
    NODE* p;
    p=head;
    while(p!=NULL)
    {
        printf(""%d "",p->data);
        p=p->next;
    }
    printf(""\n"");
}
int main() {
    NODE *head;
    NODE* head2;
    head=make_list();
    NODE *mid;
    mid=findMidpoint(head);
    head2=mid->next;
    mid->next=NULL;
    Display(head);
    Display(head2);
    
    return 0;
    
}"
22743979,PES1UG22CS130,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int coeff;
    int exp;
    struct node * next;
}NODE;
NODE* init()
{
    NODE *temp;
    temp=(NODE*)malloc(sizeof(NODE));
    return temp;
}
NODE *make_list(int n) {
    NODE* head;
    NODE *p = (NODE*)malloc(sizeof(NODE));
    head = p;
    for (int x = 0; x < n; x++) {
        scanf(""%d %d"", &(p->coeff),&(p->exp));
        if (x == n - 1) {
            p->next = NULL;
        } else {
            NODE* temp = init();
            p->next = temp;
            p = p->next;
        }
    }
    
    
    return head; 
}
NODE *sum(NODE *head1, NODE *head2) {
    NODE *p = head1;
    NODE *q = head2;
    NODE *head3 = (NODE*)malloc(sizeof(NODE));
    NODE *r = head3;
    
    while (p != NULL && q != NULL) {
        r->next = init();
        r = r->next;
        
        if (p->exp > q->exp) {
            r->exp = p->exp;
            r->coeff = p->coeff;
            p = p->next;
        } else if (p->exp < q->exp) {
            r->exp = q->exp;
            r->coeff = q->coeff;
            q = q->next;
        } else {
            r->exp = p->exp;
            r->coeff = p->coeff + q->coeff;
            p = p->next;
            q = q->next;
        }
    }
    
    while (p != NULL) {
        r->next = init();
        r = r->next;
        r->exp = p->exp;
        r->coeff = p->coeff;
        p = p->next;
    }
    
    while (q != NULL) {
        r->next = init();
        r = r->next;
        r->exp = q->exp;
        r->coeff = q->coeff;
        q = q->next;
    }
    
    r->next = NULL;
    
    return head3->next;
}

void Display(NODE* head)
{
    NODE* p;
    p=head;
    while(p!=NULL)
    {
        printf(""%d "",p->coeff);
        p=p->next;
    }
    printf(""\n"");
}
int main() {
    int n,m;
    scanf(""%d %d"",&n,&m);
    NODE *head1;
    NODE *head2;
    NODE *head3;
    head1=make_list(n);
    head2=make_list(m);
    head3=sum(head1,head2);
    Display(head3);
    
    return 0;
    
}
"
22743979,PES1UG22CS130,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node * next;
}NODE;
NODE* init()
{
    NODE *temp;
    temp=malloc(sizeof(NODE));
    return temp;
}
NODE *make_list() {
    NODE* head;
    NODE *p = malloc(sizeof(NODE));
    head = p;
    
    int n;
    scanf(""%d"", &n);
    for (int x = 0; x < n; x++) {
        scanf(""%d"", &(p->data));
        if (x == n - 1) {
            p->next = NULL;
        } else {
            NODE* temp = init();
            p->next = temp;
            p = p->next;
        }
    }
    
    return head; 
}

NODE *findMidpoint(NODE* head)
{
    if(head->next==NULL)
    {
        return head;
    }
    NODE *fast;
    NODE *slow;
    slow=head;
    fast=head->next;
    while((fast!=NULL) && (fast->next !=NULL) )
    {
        slow=slow->next;
        fast=fast->next->next;
        
    }
    return slow;
}
void Display(NODE* head)
{
    NODE* p;
    p=head;
    while(p!=NULL)
    {
        printf(""%d "",p->data);
        p=p->next;
    }
    printf(""\n"");
}
int main() {
    NODE *head;
    NODE* head2;
    head=make_list();
    NODE *mid;
    mid=findMidpoint(head);
    head2=mid->next;
    mid->next=NULL;
    Display(head);
    Display(head2);
    
    return 0;
    
}
"
22744507,PES1UG22CS145,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


struct Term* createTerm(int coefficient, int exponent) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coefficient;
    newTerm->exponent = exponent;
    newTerm->next = NULL;
    return newTerm;
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    struct Term* current = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            if (result == NULL) {
                result = createTerm(poly1->coefficient, poly1->exponent);
                current = result;
            } else {
                current->next = createTerm(poly1->coefficient, poly1->exponent);
                current = current->next;
            }
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            if (result == NULL) {
                result = createTerm(poly2->coefficient, poly2->exponent);
                current = result;
            } else {
                current->next = createTerm(poly2->coefficient, poly2->exponent);
                current = current->next;
            }
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (result == NULL) {
                result = createTerm(sum, poly1->exponent);
                current = result;
            } else {
                current->next = createTerm(sum, poly1->exponent);
                current = current->next;
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        if (result == NULL) {
            result = createTerm(poly1->coefficient, poly1->exponent);
            current = result;
        } else {
            current->next = createTerm(poly1->coefficient, poly1->exponent);
            current = current->next;
        }
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        if (result == NULL) {
            result = createTerm(poly2->coefficient, poly2->exponent);
            current = result;
        } else {
            current->next = createTerm(poly2->coefficient, poly2->exponent);
            current = current->next;
        }
        poly2 = poly2->next;
    }

    return result;
}


void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);

        if (i < n) {
            if (poly1 == NULL) {
                poly1 = createTerm(coefficient, exponent);
            } else {
                struct Term* current = poly1;
                while (current->next != NULL) {
                    current = current->next;
                }
                current->next = createTerm(coefficient, exponent);
            }
        } else {
            if (poly2 == NULL) {
                poly2 = createTerm(coefficient, exponent);
            } else {
                struct Term* current = poly2;
                while (current->next != NULL) {
                    current = current->next;
                }
                current->next = createTerm(coefficient, exponent);
            }
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}

"
22744507,PES1UG22CS145,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to find the midpoint of the linked list
struct Node* findMidpoint(struct Node* head) {
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

// Function to print the elements of a linked list
void printLinkedList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* midpoint = findMidpoint(head);
    struct Node* head2 = midpoint->next;
    midpoint->next = NULL;

    printLinkedList(head);
    printLinkedList(head2);

  /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
"
22744513,PES1UG22CS154,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int coe;
    int pow;
    struct node* next;
}NODE;
NODE* create(int c,int p){
    NODE* po=malloc(sizeof(NODE));
    po->coe=c;
    po->pow=p;
    po->next=NULL;
    return po;
}
NODE* createlist(NODE* head,int c,int p){
    if(head==NULL){
        NODE* a1;
        a1=create(c,p);
        return a1;
    }
    else{
        NODE* temp;
        NODE* a1;
        temp=head;
        while(temp->next!=NULL){
            temp=temp->next;
        }
        a1=create(c,p);
        temp->next=a1;
        return head;
    }
}
void find(NODE* head){
    int a[50]={0};
    NODE* temp;
    temp=head;
    while(temp!=NULL){
        a[temp->pow]+=temp->coe;
        temp=temp->next;
    }
    temp=head;
    for(int i=49;i>=0;i--){
        if(a[i]!=0){
            printf(""%d "",a[i]);
        }
    }
}
int main(){
    int n,m,a,b;
    NODE* head=NULL;
    scanf(""%d%d"",&n,&m);
    for(int i=0;i<n+m;i++){
        scanf(""%d%d"",&a,&b);
        head=createlist(head,a,b);
    }
    find(head);
    return 0;
}


"
22744513,PES1UG22CS154,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

struct Node *findMidpoint(struct Node *head)
{
    struct Node *slow=head;
    struct Node *fast=head->next;
    while(fast!=NULL && fast->next !=NULL)
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
}

void printLinkedList(struct Node* head){
    struct Node* temp = head;
    while(temp !=NULL){
        printf(""%d "",temp->data);
        temp=temp->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"",&n);
    
    struct Node *head=NULL;
    for (int i=0;i<n;i++){
        int value;
        scanf(""%d"",&value);
        insertEnd(&head,value);
    }
    
    struct Node* midpoint = findMidpoint(head);
    struct Node* head2 = midpoint->next;
    midpoint->next=NULL;
    printLinkedList(head);
    printLinkedList(head2);   
    return 0;
}
"
22744527,PES1UG22CS155,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}"
22744527,PES1UG22CS155,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Node {
    int data;
    struct Node* next;
};

// Function to insert a node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to find the midpoint of the linked list and split it
struct Node* splitMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return NULL;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    // Move fast by 2 steps and slow by 1 step, until fast reaches the end
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    struct Node* secondHalf = slow->next;
    slow->next = NULL;

    return secondHalf;
}

// Function to print the linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    struct Node* head = NULL;
    int n;
    
    scanf(""%d"", &n);

    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    
    

    struct Node* secondHalf = splitMidpoint(head);

    
    printList(head);

    
    printList(secondHalf);

    return 0;
}"
22744543,PES1UG22CS156,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int co;
    int po;
    struct node *next;
}NODE;
NODE* insert_in_eq(NODE* head,int k,int l)
{
    NODE* temp=malloc(sizeof(NODE));
    NODE* p=head;
    temp->co=k;
    temp->po=l;
    temp->next=NULL;
    if(head==NULL)
        head=temp;
    else
    {
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
    }
    return head;
}
NODE* add_equation(NODE* eq1,int n,NODE* eq2,int m,NODE* eq3)
{
    NODE* p1=eq1;
    NODE* p2=eq2;
    for(int i=0;i<n+m;i++)
    {
        if(p1==NULL && p2!=NULL)
        {
            eq3=insert_in_eq(eq3,p2->co,p2->po);
            p2=p2->next;
        }
        else if(p1!=NULL && p2==NULL)
        {
            eq3=insert_in_eq(eq3,p1->co,p1->po);
            p1=p1->next;
        }
        else if(p1->po>p2->po)
        {
            eq3=insert_in_eq(eq3,p1->co,p1->po);
            p1=p1->next;
        }
        else if(p1->po<p2->po)
        {
            eq3=insert_in_eq(eq3,p2->co,p2->po);
            p2=p2->next;
        }
        else
        {
            eq3=insert_in_eq(eq3,p1->co+p2->co,p1->po);
            p1=p1->next;
            p2=p2->next;
            i++;
        }
    }
    return eq3;
}
void display(NODE* head)
{
    NODE *p=head;
    while(p!=NULL)
    {
        printf(""%d "",p->co);
        p=p->next;
    }
}
int main() {
    int n,m,k,l;
    NODE* eq1=NULL;
    NODE* eq2=NULL;
    scanf(""%d %d"",&n,&m);
    for(int i=0;i<n;i++)
    {
        scanf(""%d %d"",&k,&l);
        eq1=insert_in_eq(eq1,k,l);
    }
    for(int i=0;i<m;i++)
    {
        scanf(""%d %d"",&k,&l);
        eq2=insert_in_eq(eq2,k,l);
    }
    NODE* eq3=NULL;
    eq3=add_equation(eq1,n,eq2,m,eq3);
    display(eq3);
    return 0;
}
"
22744543,PES1UG22CS156,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node *next;
}NODE;
NODE* init()
{
    NODE* temp=malloc(sizeof(NODE));
    return temp;
}
NODE* insert_a_node(NODE* head)
{
    NODE* temp=init();
    NODE* p=head;
    scanf(""%d"",&temp->data);
    temp->next=NULL;
    if(head==NULL)
        head=temp;
    else
    {
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
    }
    return head;
}
NODE* findmidpoint(NODE* head)
{
    if(head==NULL)
        return head;
    NODE* slow=head;
    NODE* fast=head->next;
    while(fast!=NULL && fast->next!=NULL)
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    NODE* temp=slow->next;
    slow->next=NULL;
    return temp;
}
void display(NODE* head)
{
    NODE *p=head;
    while(p!=NULL)
    {
        printf(""%d "",p->data);
        p=p->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    NODE* head=NULL;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++)
    {
        head=insert_a_node(head);
    }
    NODE* mid=findmidpoint(head);
    display(head);
    display(mid);
    return 0;
}"
22744593,PES1UG22CS174,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct poly
{
    int coef;
    int exp;
    struct poly *next;
}EACHTERM;

EACHTERM *create(EACHTERM *head, int coef, int exp) 
{
    EACHTERM *new = (EACHTERM *)malloc(sizeof(EACHTERM));
    new->coef = coef;
    new->exp = exp;
    new->next = NULL;

    if (head == NULL) {
        return new;
    }

    EACHTERM *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = new;

    return head;
}

EACHTERM *add(EACHTERM *p1, EACHTERM *p2) 
{
    EACHTERM *res = NULL;

    while (p1 != NULL && p2 != NULL) 
    {
        if (p1->exp > p2->exp) 
        {
            res = create(res, p1->coef, p1->exp);
            p1 = p1->next;
        } 
        else if (p1->exp < p2->exp) 
        {
            res = create(res, p2->coef, p2->exp);
            p2 = p2->next;
        } 
        else 
        {
            int sum = p1->coef + p2->coef;
            if (sum != 0) 
            {
                res = create(res, sum, p1->exp);
            }
            p1 = p1->next;
            p2 = p2->next;
        }
    }

    while (p1 != NULL) 
    {
        res = create(res, p1->coef, p1->exp);
        p1 = p1->next;
    }

    while (p2 != NULL) 
    {
        res = create(res, p2->coef, p2->exp);
        p2 = p2->next;
    }

    return res;
}

void display(EACHTERM *head) 
{
    EACHTERM *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coef);
        temp = temp->next;
    }
    printf(""\n"");
}


int main() 
{

    int n, m;
    scanf(""%d %d"", &n, &m);

    EACHTERM *p1 = NULL;
    EACHTERM *p2 = NULL;

    for (int i = 0; i < n; i++) 
    {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        p1 = create(p1, coef, exp);
    }

    for (int i = 0; i < m; i++) 
    {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        p2 = create(p2, coef, exp);
    }

    EACHTERM *res = add(p1, p2);

    display(res);

    while (p1 != NULL) 
    {
        EACHTERM *temp = p1;
        p1 = p1->next;
        free(temp);
    }
    while (p2 != NULL) 
    {
        EACHTERM *temp = p2;
        p2 = p2->next;
        free(temp);
    }
    while (res != NULL) 
    {
        EACHTERM *temp = res;
        res = res->next;
        free(temp);
    }

    return 0;
}
"
22744593,PES1UG22CS174,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node *next;
}NODE;

NODE* init()
{
    NODE* temp=malloc(sizeof(NODE));
    return temp;
}

NODE* Mid(NODE* head)
{
    if(head->next==NULL)
    {
        return head;
    }
    NODE* slow=head;
    NODE* fast= head->next;
    
    while(fast!=NULL && fast->next!=NULL)
    {
        slow=slow->next;
        fast= fast->next->next;
    }
    return slow;
}

void disp(NODE* head)
{
    NODE* p=head;
    while(p!=NULL)
    {
        printf(""%d "",p->data);
        p=p->next;
        
    }
    printf(""\n"");
}


int main() 
{
    NODE* head= NULL;
    int n;
    scanf(""%d"",&n);
    int i=0;
    while(i<n)
    {
        NODE* temp=init();
        scanf(""%d"",&temp->data);
        temp->next=NULL;
        if(head==NULL)
        {
            head=temp;
        }
        else
        {
            NODE* p=head;
            while(p->next!=NULL)
            {
                p=p->next;
            }
            p->next=temp;
        }
    i++;
       
    }
    NODE* mid=Mid(head);
    NODE* head2=mid->next;
    mid->next=NULL;
    disp(head);
    disp(head2);

    return 0;
}

















"
22744645,PES1UG22CS166,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int coeff;
    int power;
    struct node* next;
}NODE;

NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int coeff;
    int power;
    scanf(""%d %d"", &coeff,&power);

    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;

    return temp;
}

NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}

void display(NODE* head){
    if(head==NULL){
        
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->coeff);
            head = head->next;
        }
    }
}

NODE* insertFinal(NODE* final, int coeff, int power){
    NODE* temp = malloc(sizeof(NODE));
    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;
    
    if(final==NULL){
        final = temp;
    }
    else{
        NODE* p = final;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return final;
}

NODE* calcPolynomial(NODE*final, NODE* head1, NODE* head2){
    while(head1!=NULL && head2!=NULL){
        if(head1->power>head2->power){
            final = insertFinal(final, head1->coeff, head1->power);
            head1 = head1->next;
        }
        else if(head1->power< head2->power){
            final = insertFinal(final,head2->coeff, head2->power);
            head2 = head2->next;
        }
        else if(head1->power == head2->power){
            head1->coeff = head1->coeff + head2->coeff;
            final = insertFinal(final,head1->coeff, head1->power);
            head1 = head1->next;
            head2 = head2->next;
        }
    }
    while(head1!=NULL){
        final = insertFinal(final, head1->coeff,head1->power);
        head1 = head1->next;
    }
    while(head2!=NULL){
        final = insertFinal(final, head2->coeff,head2->power);
        head2 = head2->next;
    }
    return final;
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n,m;
    scanf(""%d %d"",&n,&m);
    NODE* head1 = NULL;
    NODE* head2 = NULL;
    while(n--){
        head1 = insertEnd(head1);
    }
    while(m--){
        head2 = insertEnd(head2);
    }
    NODE* final = NULL;
    final = calcPolynomial(final, head1, head2);
    display(final);
    return 0;
}"
22744645,PES1UG22CS166,Divide Linked List 2,15,"

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node{
    int data;
    struct node* next;
}NODE;

NODE* createNode(int value) {
    NODE* temp = (NODE*)malloc(sizeof(NODE));
    if (temp == NULL) {
        exit(1);
    }
    temp->data = value;
    temp->next = NULL;
    return temp;
}


NODE* insend(NODE* head,int value)
{
    NODE* temp=createNode(value);
    if(head==NULL)
        head=temp;
    else
    {
        NODE* p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
    }
    return head;
}


NODE* findMidpoint(NODE* head)
{

    if (head->next == NULL)
        return head;
    NODE* slow=head;
    NODE* fast = head->next;
    while (fast != NULL && fast->next!=NULL) {
    slow = slow->next;
    fast =fast->next->next;
    }
    return slow;
}

NODE* split(NODE* head)
{
    NODE* mid=findMidpoint(head);
    NODE* p=mid->next;
    mid->next=NULL;
    return p;
}
    
int main() 
{
    NODE* head=NULL;
    int x;
    scanf(""%d"",&x);
    for(int i=0;i<x;i++)
    {
        int da;
        scanf(""%d"",&da);
        head=insend(head,da);
    }
    NODE* startofmid=split(head);
    while(head!=NULL)
    {
        printf(""%d "",head->data);
        head=head->next;
    }
    printf(""\n"");
    while(startofmid!=NULL)
    {
        printf(""%d "",startofmid->data);
        startofmid=startofmid->next;
    }
    
    
    
}
"
22744654,PES1UG22CS170,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int coeff;
    int power;
    struct node* next;
}NODE;

NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int coeff;
    int power;
    scanf(""%d %d"", &coeff,&power);

    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;

    return temp;
}

NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}

void display(NODE* head){
    if(head==NULL){
        
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->coeff);
            head = head->next;
        }
    }
}

NODE* insertFinal(NODE* final, int coeff, int power){
    NODE* temp = malloc(sizeof(NODE));
    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;
    
    if(final==NULL){
        final = temp;
    }
    else{
        NODE* p = final;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return final;
}

NODE* calcPolynomial(NODE*final, NODE* head1, NODE* head2){
    while(head1!=NULL && head2!=NULL){
        if(head1->power>head2->power){
            final = insertFinal(final, head1->coeff, head1->power);
            head1 = head1->next;
        }
        else if(head1->power< head2->power){
            final = insertFinal(final,head2->coeff, head2->power);
            head2 = head2->next;
        }
        else if(head1->power == head2->power){
            head1->coeff = head1->coeff + head2->coeff;
            final = insertFinal(final,head1->coeff, head1->power);
            head1 = head1->next;
            head2 = head2->next;
        }
    }
    while(head1!=NULL){
        final = insertFinal(final, head1->coeff,head1->power);
        head1 = head1->next;
    }
    while(head2!=NULL){
        final = insertFinal(final, head2->coeff,head2->power);
        head2 = head2->next;
    }
    return final;
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n,m;
    scanf(""%d %d"",&n,&m);
    NODE* head1 = NULL;
    NODE* head2 = NULL;
    while(n--){
        head1 = insertEnd(head1);
    }
    while(m--){
        head2 = insertEnd(head2);
    }
    NODE* final = NULL;
    final = calcPolynomial(final, head1, head2);
    display(final);
    return 0;
}
"
22744654,PES1UG22CS170,Divide Linked List 2,15,"#include<stdio.h>
#include<stdlib.h>
typedef struct node{
    int data;
    struct node* next;
}NODE;
NODE* init(){
    NODE* temp=(NODE*)malloc(sizeof(NODE*));
    return temp;
}
NODE* linked_list_input(NODE* head){
   NODE* temp=init();
   NODE* p=head;
   scanf(""%d"",&temp->data);
   while(p->next!=NULL){
    p=p->next;
   }
   p->next=temp;
   temp->next=NULL;
   return head;
}
void display(NODE* head){
    NODE* p=head;
    while(p!=NULL){
        printf(""%d\t"",p->data);
        p=p->next;
    }
    printf(""\n"");
}
void divide_linked_list(NODE* head,int n){
    int m;
    NODE* p=head;
    NODE* beforep=NULL;
    if(n%2==0){
        m=n/2;
    }
    else{
        m=(n/2)+1;
    }
    int count=m;
    while(count!=0){
        beforep=p;
        p=p->next;
        count-=1;
    }
    beforep->next=NULL;
    display(head);
    display(p);
}
int main(){
    int n;
    NODE* head=init();
    scanf(""%d"",&n);
    int m=n-1;
    scanf(""%d"",&head->data);
    head->next=NULL;
    while(m--){
        head=linked_list_input(head);
    }
    divide_linked_list(head,n);
}"
22744672,suhas_chandan_21,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


typedef struct node{
    int c;
    int exp;
    struct node *next;
}NODE;

NODE* init(){
    NODE *temp=malloc(sizeof(NODE));
    return temp;

}

NODE * compare(NODE* head1, NODE*head2){
    NODE*p1=head1;
    NODE*p2=head2;
    while(p1!=NULL&&p2!=NULL){
    if (p1->exp>p2->exp){
        printf(""%d "",p1->c);
        p1=p1->next;
    }
    else if(p1->exp==p2->exp){
        int data;
        data=p1->c+p2->c;
        p1=p1->next;
        p2=p2->next;
        printf(""%d "",data);
       
    }
    else if(p1->exp<p2->exp){
        printf(""%d "",p2->c);
        p2=p2->next;
    }
   
    }
    while(p1==NULL&&p2!=NULL){
        printf(""%d "",p2->c);
        p2=p2->next;
    }
    while(p2==NULL&&p1!=NULL){
        printf(""%d "",p1->c);
        p1=p1->next;
    }
    return head1;
}
NODE* insert(NODE* head){
    NODE *p=head;
    int x,y;
    scanf(""%d%d"",&x,&y);
    NODE *temp=init();
    temp->c=x;
    temp->exp=y;
    temp->next=NULL;
    if(head==NULL){
        head=temp;
    }
    else{
        while(p->next!=NULL){
            p=p->next;
        }
        p->next=temp;
    }
    return head;
}



int main() {
    int n,m;
    NODE*head1=NULL;
    NODE* head2=NULL;
    scanf(""%d"",&n);
    scanf(""%d"",&m);
    for(int i=0; i<n; i++){
        head1=insert(head1);
    }
    for(int i=0; i<m; i++){
        head2=insert(head2);
    }
    compare(head1,head2);
   
    return 0;
}"
22744672,suhas_chandan_21,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct listnode
{
    int data;
    struct listnode* next;
}ListNode;


ListNode *findMidPoint(ListNode* head){
    if(head==NULL||head->next==NULL){
        return head;
    }
    ListNode*slow = head;
    ListNode* fast = head->next;
    while(fast!=NULL&&fast->next!=NULL){
        slow = slow->next;
        fast = fast->next->next;
    }return slow;
}

ListNode* split(ListNode* mid,ListNode* head){
    ListNode*p=head;
    while (mid->data!=p->data){
        printf(""%d "",p->data);
        p=p->next;
    }
    printf(""%d\n"",p->data);
    p=p->next;
    while(p!=NULL){
        printf(""%d "",p->data);
        p=p->next;

    }
    return mid;
}


ListNode* insert_at_end(ListNode* head){
    ListNode*p = head;
    ListNode*temp = malloc(sizeof(ListNode));;
    temp->next = NULL;
    scanf(""%d"",&temp->data);

    if(head==NULL){
        head = temp;
    }else{
        while(p->next!=NULL){
            p = p->next;
        }p->next = temp;
}
return head;
}
int main() {
   
    ListNode* head=NULL;
    int x;
    scanf(""%d"",&x);
    for (int i=0; i<x; i++){
        head=insert_at_end(head);
    }
    ListNode* mid=findMidPoint(head) ;
    split(mid,head);
    return 0;
}


"
22744696,PES1UG22CS141,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* current = *poly;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newTerm;
    }
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    struct Term* current1 = poly1;
    struct Term* current2 = poly2;

    while (current1 != NULL && current2 != NULL) {
        if (current1->exponent > current2->exponent) {
            insertTerm(&result, current1->coefficient, current1->exponent);
            current1 = current1->next;
        } else if (current1->exponent < current2->exponent) {
            insertTerm(&result, current2->coefficient, current2->exponent);
            current2 = current2->next;
        } else {
            int sumCoeff = current1->coefficient + current2->coefficient;
            insertTerm(&result, sumCoeff, current1->exponent);
            current1 = current1->next;
            current2 = current2->next;
        }
    }

    while (current1 != NULL) {
        insertTerm(&result, current1->coefficient, current1->exponent);
        current1 = current1->next;
    }

    while (current2 != NULL) {
        insertTerm(&result, current2->coefficient, current2->exponent);
        current2 = current2->next;
    }

    return result;
}

void display(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->coefficient);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    int coeff, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    display(result);

    return 0;
}"
22744696,PES1UG22CS141,Divide Linked List 2,15,"# include <stdio.h>
# include <stdlib.h>

typedef struct node
{
    int info;
    struct node* next;
}NODE;


NODE* createNode(int ele);
NODE* insertLast(NODE*head,int ele);
NODE* findMid(NODE* head);
void display(NODE* head, NODE* mid);


int main()
{
    NODE* head=NULL;
    int length;
    int ele;
    NODE* mid =NULL;
    scanf(""%d"",&length);

    for(int i=0; i<length; i++)
    {
        scanf(""%d"",&ele);
        head=insertLast(head,ele);
    }

    mid = findMid(head);
    display(head,mid);



}


void display(NODE* head, NODE* mid)
{
    if (head==NULL)
    {
        printf(""Empty list\n"");
    }
    else
    {
        NODE*p=head;
        while (p!=NULL && p!=mid->next)
        {
            printf(""%d "",p->info);
            p=p->next;
        }
        printf(""\n"");
        while(p!=NULL)
        {
            printf(""%d "",p->info);
            p=p->next;
        }
    }
    printf(""\n\n"");
}



NODE* createNode(int ele)
{
    NODE* newNode=malloc(sizeof(struct node));
    newNode->info=ele;
    newNode->next=NULL;
    return newNode;
}

NODE* insertLast(NODE*head,int ele)
{
    NODE* newNode=createNode(ele);
    if (head==NULL)
    {
        head=newNode;
    }
    else
    {
        NODE*p=head;
        while(p->next!=NULL)
        {
            p=p->next;
        }
        p->next=newNode;
    }
    return head;
}




NODE* findMid(NODE* head)
{
    if(head->next==NULL)
    {
        return head;
    }

    NODE* fast = head->next;
    NODE* slow = head;

    while(fast !=NULL && fast->next != NULL)
    {
        slow = slow-> next;
        fast = fast -> next -> next;
    }
    return slow;

}"
22744700,PES1UG22CS138,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int coeff;
    int power;
    struct node* next;
}NODE;

NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int coeff;
    int power;
    scanf(""%d %d"", &coeff,&power);

    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;

    return temp;
}

NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}

void display(NODE* head){
    if(head==NULL){
        
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->coeff);
            head = head->next;
        }
    }
}

NODE* insertFinal(NODE* final, int coeff, int power){
    NODE* temp = malloc(sizeof(NODE));
    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;
    
    if(final==NULL){
        final = temp;
    }
    else{
        NODE* p = final;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return final;
}

NODE* calcPolynomial(NODE*final, NODE* head1, NODE* head2){
    while(head1!=NULL && head2!=NULL){
        if(head1->power>head2->power){
            final = insertFinal(final, head1->coeff, head1->power);
            head1 = head1->next;
        }
        else if(head1->power< head2->power){
            final = insertFinal(final,head2->coeff, head2->power);
            head2 = head2->next;
        }
        else if(head1->power == head2->power){
            head1->coeff = head1->coeff + head2->coeff;
            final = insertFinal(final,head1->coeff, head1->power);
            head1 = head1->next;
            head2 = head2->next;
        }
    }
    while(head1!=NULL){
        final = insertFinal(final, head1->coeff,head1->power);
        head1 = head1->next;
    }
    while(head2!=NULL){
        final = insertFinal(final, head2->coeff,head2->power);
        head2 = head2->next;
    }
    return final;
}

int main() {

    int n,m;
    scanf(""%d %d"",&n,&m);
    NODE* head1 = NULL;
    NODE* head2 = NULL;
    while(n--){
        head1 = insertEnd(head1);
    }
    while(m--){
        head2 = insertEnd(head2);
    }
    NODE* final = NULL;
    final = calcPolynomial(final, head1, head2);
    display(final);
    return 0;
}"
22744700,PES1UG22CS138,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


typedef struct node{
    int data;
    struct node *next;
}NODE;

NODE *findMidpoint(NODE *head)
{
    if (head->next == NULL){
        return head;
    }
    NODE* slow = head;
    NODE* fast = head->next;
    while (fast != NULL && fast->next != NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}

NODE *secondHead(NODE *head){
    NODE* mid = findMidpoint(head);
    NODE *head2 = mid->next;
    mid->next = NULL;
    return head2;
}

NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int x;
    scanf(""%d"", &x);

    temp->data = x;
    temp->next = NULL;

    return temp;
}


NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}

void display(NODE* head){
    if(head==NULL){
        
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->data);
            head = head->next;
        }
        printf(""\n"");
    }
}

int main() 
{
    int n;
    scanf(""%d"",&n);
    NODE* head = NULL;
    for (int i = 0; i < n; i++){
        head = insertEnd(head);
    }
    NODE* head2 = secondHead(head);
    
    display(head);
    display(head2);
    return 0;
}"
22744704,vinithabuchakka1,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>


typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;


Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);


    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}
"
22744704,vinithabuchakka1,Divide Linked List 2,7.5,"
#include <stdio.h>
#include <stdlib.h>

// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to find the midpoint of the linked list
struct Node* findMidpoint(struct Node* head) {
    struct Node* slow = head;
    struct Node* fast = head;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

// Function to print the elements of a linked list
void printLinkedList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* midpoint = findMidpoint(head);
    struct Node* head2 = midpoint->next;
    midpoint->next = NULL;

    printLinkedList(head);
    printLinkedList(head2);

    return 0;
}"
22744714,PES1UG22CS182,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to insert a new term at the end of a linked list
void insertTerm(struct Term** head, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*head == NULL) {
        *head = newTerm;
        return;
    }

    struct Term* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;
}

// Function to add two polynomials represented as linked lists
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print a polynomial represented as a linked list
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
"
22744714,PES1UG22CS182,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

// Define the structure of a linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

// Function to find the midpoint of the linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

// Function to split the linked list into two parts at the given node
void splitList(struct Node* head, struct Node** firstHalf, struct Node** secondHalf, struct Node* midpoint) {
    if (midpoint == NULL) {
        return;
    }

    *firstHalf = head;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}

// Function to print the elements of a linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    struct Node* midpoint = findMidpoint(head);
    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;
    splitList(head, &firstHalf, &secondHalf, midpoint);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}
"
22744739,aravindayush415,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int coeff;
    int power;
    struct node* next;
}NODE;

NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int coeff;
    int power;
    scanf(""%d %d"", &coeff,&power);

    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;

    return temp;
}

NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}

void display(NODE* head){
    if(head==NULL){
       
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->coeff);
            head = head->next;
        }
    }
}

NODE* insertFinal(NODE* final, int coeff, int power){
    NODE* temp = malloc(sizeof(NODE));
    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;
   
    if(final==NULL){
        final = temp;
    }
    else{
        NODE* p = final;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return final;
}

NODE* calcPolynomial(NODE*final, NODE* head1, NODE* head2){
    while(head1!=NULL && head2!=NULL){
        if(head1->power>head2->power){
            final = insertFinal(final, head1->coeff, head1->power);
            head1 = head1->next;
        }
        else if(head1->power< head2->power){
            final = insertFinal(final,head2->coeff, head2->power);
            head2 = head2->next;
        }
        else if(head1->power == head2->power){
            head1->coeff = head1->coeff + head2->coeff;
            final = insertFinal(final,head1->coeff, head1->power);
            head1 = head1->next;
            head2 = head2->next;
        }
    }
    while(head1!=NULL){
        final = insertFinal(final, head1->coeff,head1->power);
        head1 = head1->next;
    }
    while(head2!=NULL){
        final = insertFinal(final, head2->coeff,head2->power);
        head2 = head2->next;
    }
    return final;
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
    int n,m;
    scanf(""%d %d"",&n,&m);
    NODE* head1 = NULL;
    NODE* head2 = NULL;
    while(n--){
        head1 = insertEnd(head1);
    }
    while(m--){
        head2 = insertEnd(head2);
    }
    NODE* final = NULL;
    final = calcPolynomial(final, head1, head2);
    display(final);
    return 0;
}

"
22744739,aravindayush415,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


typedef struct node{
    int data;
    struct node *next;
}NODE;

NODE *findMidpoint(NODE *head)
{
    if (head->next == NULL){
        return head;
    }
    NODE* slow = head;
    NODE* fast = head->next;
    while (fast != NULL && fast->next != NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}

NODE *secondHead(NODE *head){
    NODE* mid = findMidpoint(head);
    NODE *head2 = mid->next;
    mid->next = NULL;
    return head2;
}

NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int x;
    scanf(""%d"", &x);

    temp->data = x;
    temp->next = NULL;

    return temp;
}


NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}

void display(NODE* head){
    if(head==NULL){
       
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->data);
            head = head->next;
        }
        printf(""\n"");
    }
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    int n;
    scanf(""%d"",&n);
    NODE* head = NULL;
    while(n--){
        head = insertEnd(head);
    }
    NODE* head2 = secondHead(head);
   
    display(head);
    display(head2);
    return 0;
}

"
22744740,PES1UG22CS135,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int coeff;
    int power;
    struct node* next;
}NODE;

NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int coeff;
    int power;
    scanf(""%d %d"", &coeff,&power);

    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;

    return temp;
}

NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}

void display(NODE* head){
    if(head==NULL){
        
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->coeff);
            head = head->next;
        }
    }
}

NODE* insertFinal(NODE* final, int coeff, int power){
    NODE* temp = malloc(sizeof(NODE));
    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;
    
    if(final==NULL){
        final = temp;
    }
    else{
        NODE* p = final;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return final;
}

NODE* calcPolynomial(NODE*final, NODE* head1, NODE* head2){
    while(head1!=NULL && head2!=NULL){
        if(head1->power>head2->power){
            final = insertFinal(final, head1->coeff, head1->power);
            head1 = head1->next;
        }
        else if(head1->power< head2->power){
            final = insertFinal(final,head2->coeff, head2->power);
            head2 = head2->next;
        }
        else if(head1->power == head2->power){
            head1->coeff = head1->coeff + head2->coeff;
            final = insertFinal(final,head1->coeff, head1->power);
            head1 = head1->next;
            head2 = head2->next;
        }
    }
    while(head1!=NULL){
        final = insertFinal(final, head1->coeff,head1->power);
        head1 = head1->next;
    }
    while(head2!=NULL){
        final = insertFinal(final, head2->coeff,head2->power);
        head2 = head2->next;
    }
    return final;
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n,m;
    scanf(""%d %d"",&n,&m);
    NODE* head1 = NULL;
    NODE* head2 = NULL;
    while(n--){
        head1 = insertEnd(head1);
    }
    while(m--){
        head2 = insertEnd(head2);
    }
    NODE* final = NULL;
    final = calcPolynomial(final, head1, head2);
    display(final);
    return 0;
}"
22744740,PES1UG22CS135,Divide Linked List 2,15,"#include<stdio.h>
#include<stdlib.h>
typedef struct node{
    int data;
    struct node* next;
}NODE;
NODE* init(){
    NODE* temp=(NODE*)malloc(sizeof(NODE*));
    return temp;
}
NODE* linked_list_input(NODE* head){
   NODE* temp=init();
   NODE* p=head;
   scanf(""%d"",&temp->data);
   while(p->next!=NULL){
    p=p->next;
   }
   p->next=temp;
   temp->next=NULL;
   return head;
}
void display(NODE* head){
    NODE* p=head;
    while(p!=NULL){
        printf(""%d\t"",p->data);
        p=p->next;
    }
    printf(""\n"");
}
void divide_linked_list(NODE* head,int n){
    int m;
    NODE* p=head;
    NODE* beforep=NULL;
    if(n%2==0){
        m=n/2;
    }
    else{
        m=(n/2)+1;
    }
    int count=m;
    while(count!=0){
        beforep=p;
        p=p->next;
        count-=1;
    }
    beforep->next=NULL;
    display(head);
    display(p);
}
int main(){
    int n;
    NODE* head=init();
    scanf(""%d"",&n);
    int m=n-1;
    scanf(""%d"",&head->data);
    head->next=NULL;
    while(m--){
        head=linked_list_input(head);
    }
    divide_linked_list(head,n);
}"
22744751,pes1202202295,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Define a structure for a term in a polynomial
typedef struct Term {
    int coefficient;
    int power;
    struct Term* next;
} Term;

// Function to insert a term at the end of a polynomial
void insertTerm(Term** poly, int coeff, int pow) {
    Term* newTerm = (Term*)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->power = pow;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        Term* current = *poly;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newTerm;
    }
}

// Function to add two polynomials and return the result
Term* addPolynomials(Term* poly1, Term* poly2) {
    Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->power > poly2->power) {
            insertTerm(&result, poly1->coefficient, poly1->power);
            poly1 = poly1->next;
        } else if (poly1->power < poly2->power) {
            insertTerm(&result, poly2->coefficient, poly2->power);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->power);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Add remaining terms from poly1, if any
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->power);
        poly1 = poly1->next;
    }

    // Add remaining terms from poly2, if any
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->power);
        poly2 = poly2->next;
    }

    return result;
}

// Function to display a polynomial
void displayPolynomial(Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term* poly1 = NULL;
    Term* poly2 = NULL;

    int coeff, pow;

    // Read coefficients and powers for the first polynomial
    for (int i = 0; i < n; i++) {
        scanf(""%d %d"", &coeff, &pow);
        insertTerm(&poly1, coeff, pow);
    }

    // Read coefficients and powers for the second polynomial
    for (int i = 0; i < m; i++) {
        scanf(""%d %d"", &coeff, &pow);
        insertTerm(&poly2, coeff, pow);
    }

    // Add the two polynomials
    Term* result = addPolynomials(poly1, poly2);

    // Display the result
    displayPolynomial(result);

    return 0;
}"
22744751,pes1202202295,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node *next;
}NODE;

NODE *findMidpoint(NODE *head)
{
    if(head->next == NULL){
        return head;
    }
    NODE* slow = head;
    NODE* fast = head->next;
    while (fast != NULL && fast->next != NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}

NODE *secondHead(NODE *head){
    NODE* mid = findMidpoint(head);
    NODE *head2 = mid->next;
    mid->next = NULL;
    return head2;
}
NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int x;
    scanf(""%d"", &x);

    temp->data = x;
    temp->next = NULL;

    return temp;
}
NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}
void display(NODE* head){
    if(head==NULL){
        
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->data);
            head = head->next;
        }
        printf(""\n"");
    }
}
int main(){
/* Enter your code here. Read input from STDIN. Print output to STDOUT */
    int n;
    scanf(""%d"",&n);
    NODE* head = NULL;
    while(n--){
        head = insertEnd(head);
    }
    NODE* head2 = secondHead(head);
    
    display(head);
    display(head2);
}
"
22744808,PES1202202196,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
    typedef struct node
    {
        int coe;
        int pow;
        struct node* next;
    }NODE;
    NODE* create(int c,int p)
    {
        NODE* po=malloc(sizeof(NODE));
        po->coe=c;
        po->pow=p;
        po->next=NULL;
        return po;
    }
    NODE* createlist(NODE* head,int c,int p)
    {
        if(head==NULL)
        {
            NODE* a1;
            a1=create(c,p);
            return a1;
        }
        else
        {
            NODE* temp;
            NODE* a1;
            temp=head;
            while(temp->next!=NULL)
            {
                temp=temp->next;
            }
            a1=create(c,p);
            temp->next=a1;
            return head;
        }
    }
    void find(NODE* head)
    {
        int a[50]={0};
        NODE* temp;
        temp=head;
        while(temp!=NULL)
        {
            a[temp->pow]+=temp->coe;
            temp=temp->next;
        }
        temp=head;
        for(int i=49;i>=0;i--)
        {
            if(a[i]!=0)
            {
                printf(""%d "",a[i]);
            }
        }
    }
    int main()
    {
        int n,m,a,b;
        NODE* head=NULL;
        scanf(""%d%d"",&n,&m);
        for(int i=0;i<n+m;i++)
        {
            scanf(""%d%d"",&a,&b);
            head=createlist(head,a,b);
        }
        find(head);
      return 0;
    }"
22744808,PES1202202196,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
#include<math.h>
#include<string.h>
struct Node
{
    int data;
    struct Node* next;
};
void insertEnd(struct Node** head, int data) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    if (*head == NULL) 
    {
        *head = newNode;
    }
    else 
    {
        struct Node* temp = *head;
        while (temp->next != NULL) 
        {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}
struct Node* findMidpoint(struct Node* head) 
{
    struct Node* slow = head;
    struct Node* fast = head->next;
    while (fast != NULL && fast->next != NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
void printLinkedList(struct Node* head)
{
    struct Node* temp = head;
    while (temp != NULL)
    {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}
int main() 
{
    int n;
    scanf(""%d"", &n);
    struct Node* head = NULL;
    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }
    struct Node* midpoint = findMidpoint(head);
    struct Node* head2 = midpoint->next;
    midpoint->next = NULL;
    printLinkedList(head);
    printLinkedList(head2);
return 0;
}"
22744824,PES1202203533,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node {
    int cof;
    int expo;
    struct node* next;
};

void insertTerm(struct node** poly, int coeff, int exp) {
    struct node* newTerm = (struct node*)malloc(sizeof(struct node));
    newTerm->cof = coeff;
    newTerm->expo = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct node* current = *poly;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newTerm;
    }
}


struct node* add(struct node* poly1, struct node* poly2) {
    struct node* result = NULL;
    struct node* current1 = poly1;
    struct node* current2 = poly2;

    while (current1 != NULL && current2 != NULL) {
        if (current1->expo > current2->expo) {
            insertTerm(&result, current1->cof, current1->expo);
            current1 = current1->next;
        } else if (current1->expo < current2->expo) {
            insertTerm(&result, current2->cof, current2->expo);
            current2 = current2->next;
        } else {
            int sumCoeff = current1->cof + current2->cof;
            insertTerm(&result, sumCoeff, current1->expo);
            current1 = current1->next;
            current2 = current2->next;
        }
    }

    while (current1 != NULL) {
        insertTerm(&result, current1->cof, current1->expo);
        current1 = current1->next;
    }

    while (current2 != NULL) {
        insertTerm(&result, current2->cof, current2->expo);
        current2 = current2->next;
    }

    return result;
}


void display(struct node* poly) {
    struct node* current = poly;
    while (current != NULL) {
        printf(""%d "", current->cof);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct node* poly1 = NULL;
    struct node* poly2 = NULL;

    int coeff, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct node* result = add(poly1, poly2);
    display(result);

    return 0;
}

"
22744824,PES1202203533,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};


void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}


struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}


void splitList(struct Node* midpoint, struct Node** secondHalf) {
    if (midpoint == NULL) {
        *secondHalf = NULL;
        return;
    }

    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}


void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n, value;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* midpoint = findMidpoint(head);
    struct Node* secondHalf = NULL;
    splitList(midpoint, &secondHalf);

    printList(head);
    printList(secondHalf);

    return 0;
}
"
22744860,PES1UG22CS161,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int coeff;
    int power;
    struct node* next;
}NODE;

NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int coeff;
    int power;
    scanf(""%d %d"", &coeff,&power);

    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;

    return temp;
}

NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}

void display(NODE* head){
    if(head==NULL){
        
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->coeff);
            head = head->next;
        }
    }
}

NODE* insertFinal(NODE* final, int coeff, int power){
    NODE* temp = malloc(sizeof(NODE));
    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;
    
    if(final==NULL){
        final = temp;
    }
    else{
        NODE* p = final;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return final;
}

NODE* calcPolynomial(NODE*final, NODE* head1, NODE* head2){
    while(head1!=NULL && head2!=NULL){
        if(head1->power>head2->power){
            final = insertFinal(final, head1->coeff, head1->power);
            head1 = head1->next;
        }
        else if(head1->power< head2->power){
            final = insertFinal(final,head2->coeff, head2->power);
            head2 = head2->next;
        }
        else if(head1->power == head2->power){
            head1->coeff = head1->coeff + head2->coeff;
            final = insertFinal(final,head1->coeff, head1->power);
            head1 = head1->next;
            head2 = head2->next;
        }
    }
    while(head1!=NULL){
        final = insertFinal(final, head1->coeff,head1->power);
        head1 = head1->next;
    }
    while(head2!=NULL){
        final = insertFinal(final, head2->coeff,head2->power);
        head2 = head2->next;
    }
    return final;
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n,m;
    scanf(""%d %d"",&n,&m);
    NODE* head1 = NULL;
    NODE* head2 = NULL;
    while(n--){
        head1 = insertEnd(head1);
    }
    while(m--){
        head2 = insertEnd(head2);
    }
    NODE* final = NULL;
    final = calcPolynomial(final, head1, head2);
    display(final);
    return 0;
}
"
22744860,PES1UG22CS161,Divide Linked List 2,15,"# include <stdio.h>
# include <stdlib.h>

typedef struct node
{
    int info;
    struct node* next;
}NODE;


NODE* createNode(int ele);
NODE* insertLast(NODE*head,int ele);
NODE* findMid(NODE* head);
void display(NODE* head, NODE* mid);


int main()
{
    NODE* head=NULL;
    int length;
    int ele;
    NODE* mid =NULL;
    scanf(""%d"",&length);

    for(int i=0; i<length; i++)
    {
        scanf(""%d"",&ele);
        head=insertLast(head,ele);
    }

    mid = findMid(head);
    display(head,mid);



}


void display(NODE* head, NODE* mid)
{
    if (head==NULL)
    {
        printf(""Empty list\n"");
    }
    else
    {
        NODE*p=head;
        while (p!=NULL && p!=mid->next)
        {
            printf(""%d "",p->info);
            p=p->next;
        }
        printf(""\n"");
        while(p!=NULL)
        {
            printf(""%d "",p->info);
            p=p->next;
        }
    }
    printf(""\n\n"");
}



NODE* createNode(int ele)
{
    NODE* newNode=malloc(sizeof(struct node));
    newNode->info=ele;
    newNode->next=NULL;
    return newNode;
}

NODE* insertLast(NODE*head,int ele)
{
    NODE* newNode=createNode(ele);
    if (head==NULL)
    {
        head=newNode;
    }
    else
    {
        NODE*p=head;
        while(p->next!=NULL)
        {
            p=p->next;
        }
        p->next=newNode;
    }
    return head;
}




NODE* findMid(NODE* head)
{
    if(head->next==NULL)
    {
        return head;
    }

    NODE* fast = head->next;
    NODE* slow = head;

    while(fast !=NULL && fast->next != NULL)
    {
        slow = slow-> next;
        fast = fast -> next -> next;
    }
    return slow;

}



"
22745104,pes1202203684,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>


struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** head, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*head == NULL) {
        *head = newTerm;
        return;
    }

    struct Term* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
"
22745104,pes1202203684,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};


void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}


struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

void splitList(struct Node* head, struct Node** firstHalf, struct Node** secondHalf, struct Node* midpoint) {
    if (midpoint == NULL) {
        return;
    }

    *firstHalf = head;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    struct Node* midpoint = findMidpoint(head);
    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;
    splitList(head, &firstHalf, &secondHalf, midpoint);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}
"
22745449,PES1UG22CS162,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}"
22745449,PES1UG22CS162,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* splitMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return NULL;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    struct Node* secondHalf = slow->next;
    slow->next = NULL;

    return secondHalf;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    struct Node* head = NULL;
    int n;
    
    scanf(""%d"", &n);

    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    
    

    struct Node* secondHalf = splitMidpoint(head);

    
    printList(head);

    
    printList(secondHalf);

    return 0;
}"
22745500,PES1202203240,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
    typedef struct node
    {
        int coef;
        int pow;
        struct node* next;
    }NODE;

    NODE* create(int c,int p)
    {
        NODE* po=malloc(sizeof(NODE));
        po->coef=c;
        po->pow=p;
        po->next=NULL;
        return po;
    }

    NODE* createl(NODE* head,int c,int p)
    {
        if(head==NULL)
        {
            NODE* a1;
            a1=create(c,p);
            return a1;
        }
        else
        {
            NODE* temp;
            NODE* a1;
            temp=head;
            while(temp->next!=NULL)
            {
                temp=temp->next;
            }
            a1=create(c,p);
            temp->next=a1;
            return head;
        }
    }
    void find(NODE* head)
    {
        int a[50]={0};
        NODE* temp;
        temp=head;
        while(temp!=NULL)
        {
            a[temp->pow]+=temp->coef;
            temp=temp->next;
        }
        temp=head;
        for(int i=49;i>=0;i--)
        {
            if(a[i]!=0)
            {
                printf(""%d "",a[i]);
            }
        }
    }
    int main()
    {
        int n,m,a,b;
        NODE* head=NULL;
        scanf(""%d%d"",&n,&m);
        for(int i=0;i<n+m;i++)
        {
            scanf(""%d%d"",&a,&b);
            head=createl(head,a,b);
        }
        find(head);
      return 0;
    }"
22745500,PES1202203240,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct node
{
    int data;
    struct node *next;
}NODE;

NODE* init()
{
    NODE* temp = malloc(sizeof(NODE));
    return temp;
}

NODE* insert(NODE* head)
{
    NODE* temp = init();
    scanf(""%d"",&temp->data);
    temp->next=NULL;
    if(head==NULL)
    {
        head=temp;
    }
    else
    {
        NODE* p=head;
        while(p->next!=NULL)
        {
            p= p->next;
        }
        p->next=temp;
    }
    return head;
}

NODE* findMidpoint(NODE* head)
{
if(head->next==NULL)
    return head;
NODE* slow=head;
NODE* fast=head->next;
while(fast!=NULL && fast->next!=NULL)
{
    slow=slow->next;
    fast=fast->next->next;
}
return slow;
}

void display(NODE* head)
{
    NODE* p=head;
    while(p!=NULL)
    {
        printf(""%d "",p->data);
        p = p->next;
    }
}

int main() 
{
    NODE *head1=NULL;
    NODE *head2=NULL;
    NODE *p=NULL;
    int n;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++)
        head1=insert(head1);
    p=findMidpoint(head1);
    head2=p->next;
    p->next=NULL;
    display(head1);
    printf(""\n"");
    display(head2);
    return 0;
}
"
22747605,PES1202202260,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int coeff;
    int power;
    struct node* next;
}NODE;

NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int coeff;
    int power;
    scanf(""%d %d"", &coeff,&power);

    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;

    return temp;
}

NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}

void display(NODE* head){
    if(head==NULL){
        
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->coeff);
            head = head->next;
        }
    }
}

NODE* insertFinal(NODE* final, int coeff, int power){
    NODE* temp = malloc(sizeof(NODE));
    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;
    
    if(final==NULL){
        final = temp;
    }
    else{
        NODE* p = final;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return final;
}

NODE* calcPolynomial(NODE*final, NODE* head1, NODE* head2){
    while(head1!=NULL && head2!=NULL){
        if(head1->power>head2->power){
            final = insertFinal(final, head1->coeff, head1->power);
            head1 = head1->next;
        }
        else if(head1->power< head2->power){
            final = insertFinal(final,head2->coeff, head2->power);
            head2 = head2->next;
        }
        else if(head1->power == head2->power){
            head1->coeff = head1->coeff + head2->coeff;
            final = insertFinal(final,head1->coeff, head1->power);
            head1 = head1->next;
            head2 = head2->next;
        }
    }
    while(head1!=NULL){
        final = insertFinal(final, head1->coeff,head1->power);
        head1 = head1->next;
    }
    while(head2!=NULL){
        final = insertFinal(final, head2->coeff,head2->power);
        head2 = head2->next;
    }
    return final;
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n,m;
    scanf(""%d %d"",&n,&m);
    NODE* head1 = NULL;
    NODE* head2 = NULL;
    while(n--){
        head1 = insertEnd(head1);
    }
    while(m--){
        head2 = insertEnd(head2);
    }
    NODE* final = NULL;
    final = calcPolynomial(final, head1, head2);
    display(final);
    return 0;
}







"
22747605,PES1202202260,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


typedef struct node{
    int data;
    struct node *next;
}NODE;

NODE *findMidpoint(NODE *head)
{
    if (head->next == NULL){
        return head;
    }
    NODE* slow = head;
    NODE* fast = head->next;
    while (fast != NULL && fast->next != NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}

NODE *secondHead(NODE *head){
    NODE* mid = findMidpoint(head);
    NODE *head2 = mid->next;
    mid->next = NULL;
    return head2;
}

NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int x;
    scanf(""%d"", &x);

    temp->data = x;
    temp->next = NULL;

    return temp;
}


NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}

void display(NODE* head){
    if(head==NULL){
        
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->data);
            head = head->next;
        }
        printf(""\n"");
    }
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    int n;
    scanf(""%d"",&n);
    NODE* head = NULL;
    while(n--){
        head = insertEnd(head);
    }
    NODE* head2 = secondHead(head);
    
    display(head);
    display(head2);
    return 0;
}"
22837914,PES1UG22CS149,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}






"
22837914,PES1UG22CS149,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Node {
    int data;
    struct Node* next;
};

// Function to insert a node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to find the midpoint of the linked list and split it
struct Node* splitMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return NULL;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    // Move fast by 2 steps and slow by 1 step, until fast reaches the end
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    struct Node* secondHalf = slow->next;
    slow->next = NULL;

    return secondHalf;
}

// Function to print the linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    struct Node* head = NULL;
    int n;
    
    scanf(""%d"", &n);

    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    
    

    struct Node* secondHalf = splitMidpoint(head);

    
    printList(head);

    
    printList(secondHalf);

    return 0;
}
"
22838170,PESUG22CS137,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int coeff;
    int power;
    struct node* next;
}NODE;

NODE* init(){
    NODE *temp = (NODE *)malloc(sizeof(NODE));

    int coeff;
    int power;
    scanf(""%d %d"", &coeff,&power);

    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;

    return temp;
}

NODE* insertEnd(NODE* head){
    NODE *temp;
    temp = init();

    if(head==NULL){
        head = temp;
    }
    else{
        NODE *p = head;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return head;
}

void display(NODE* head){
    if(head==NULL){
        
    }
    else{
        while(head!=NULL){
            printf(""%d "", head->coeff);
            head = head->next;
        }
    }
}

NODE* insertFinal(NODE* final, int coeff, int power){
    NODE* temp = malloc(sizeof(NODE));
    temp->coeff = coeff;
    temp->power = power;
    temp->next = NULL;
    
    if(final==NULL){
        final = temp;
    }
    else{
        NODE* p = final;
        while(p->next!=NULL){
            p = p->next;
        }
        p->next = temp;
    }
    return final;
}

NODE* calcPolynomial(NODE*final, NODE* head1, NODE* head2){
    while(head1!=NULL && head2!=NULL){
        if(head1->power>head2->power){
            final = insertFinal(final, head1->coeff, head1->power);
            head1 = head1->next;
        }
        else if(head1->power< head2->power){
            final = insertFinal(final,head2->coeff, head2->power);
            head2 = head2->next;
        }
        else if(head1->power == head2->power){
            head1->coeff = head1->coeff + head2->coeff;
            final = insertFinal(final,head1->coeff, head1->power);
            head1 = head1->next;
            head2 = head2->next;
        }
    }
    while(head1!=NULL){
        final = insertFinal(final, head1->coeff,head1->power);
        head1 = head1->next;
    }
    while(head2!=NULL){
        final = insertFinal(final, head2->coeff,head2->power);
        head2 = head2->next;
    }
    return final;
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n,m;
    scanf(""%d %d"",&n,&m);
    NODE* head1 = NULL;
    NODE* head2 = NULL;
    while(n--){
        head1 = insertEnd(head1);
    }
    while(m--){
        head2 = insertEnd(head2);
    }
    NODE* final = NULL;
    final = calcPolynomial(final, head1, head2);
    display(final);
    return 0;
}
"
22838170,PESUG22CS137,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int data;
    struct ListNode* next;
};

struct ListNode* createNode(int value) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

void printList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitAndPrint(struct ListNode* head) {
    if (head == NULL || head->next == NULL) {
        // List has 0 or 1 nodes, so no need to split
        printList(head);
        printf(""\n"");
        return;
    }

    struct ListNode* slow = head;
    struct ListNode* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    // Split the linked list into two parts
    struct ListNode* secondHalf = slow->next;
    slow->next = NULL;

    printList(head);
    printList(secondHalf);
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct ListNode* head = NULL;
    struct ListNode* tail = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct ListNode* newNode = createNode(value);
        
        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    splitAndPrint(head);

    // Free allocated memory
    struct ListNode* current = head;
    while (current != NULL) {
        struct ListNode* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}

"