studentId,studentUserName,challenge,score,code
18459160,PES1UG22CS185,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

       
typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}


Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    
    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}


        

"
18459160,PES1UG22CS185,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next
};
struct Node* reverselist(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}
void printlist(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    head = reverselist(head);
    printlist(head);

    

    return 0;
}

"
20060339,PES1UG22CS231,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>


typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;


Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}


Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
20060339,PES1UG22CS231,Reversing a Linked List,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

typedef struct node{
    int info;
    struct node *next;
}NODE;
NODE *reverselist(NODE *head){
    NODE *prev=NULL;
    NODE *cur=head;
    while(cur!=NULL){
        NODE *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void printlist(NODE *head){
    NODE *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->info);
        cur=cur->next;
    }
}
int main(){
    int noonodes;
    int data;
    scanf(""%d"",&noonodes);
    if (noonodes < 0 || noonodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    NODE *head=NULL;
    NODE *prev=NULL;
    for(int i=0;i<noonodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        NODE *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->info=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    NODE* reversedHead = reverselist(head);
    printlist(reversedHead);
    
    
    return 0;
}"
20561253,[deleted],Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void displayList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        if (head->next) {
            printf("""");
        }
        head = head->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);
        if (!head) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->value = value;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->value = value;
            current->next = NULL;
        }
    }

    struct Node* reversedList = reverseLinkedList(head);
    displayList(reversedList);

    // Free memory
    while (reversedList) {
        struct Node* temp = reversedList;
        reversedList = reversedList->next;
        free(temp);
    }

    return 0;
}
"
20678750,PES1UG22CS236,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void displayList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        if (head->next) {
            printf("""");
        }
        head = head->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);
        if (!head) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->value = value;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->value = value;
            current->next = NULL;
        }
    }

    struct Node* reversedList = reverseLinkedList(head);
    displayList(reversedList);

    // Free memory
    while (reversedList) {
        struct Node* temp = reversedList;
        reversedList = reversedList->next;
        free(temp);
    }

    return 0;
}"
20693893,PES1UG22CS222,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Term 
{
    int coefficient;
    int exponent;
    struct Term *next;
}Term;

Term *insertTerm(Term *head, int coeff, int expo) 
{
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;
    if (head == NULL) 
    {
        return newTerm;
    }
    Term *temp = head;
    while (temp->next != NULL) 
    {
        temp = temp->next;
    }
    temp->next = newTerm;
    return head;
}

Term *addPolynomials(Term *poly1, Term *poly2) 
{
    Term *result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
{
        if (poly1->exponent > poly2->exponent) 
        {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } 
        else if (poly1->exponent < poly2->exponent) 
        {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) 
            {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) 
    {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) 
    {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(Term *head) 
{
    Term *temp = head;
    while (temp != NULL) 
    {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) 
    {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) 
    {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }
    Term *result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    while (poly1 != NULL) 
    {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) 
    {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) 
    {
        Term *temp = result;
        result = result->next;
        free(temp);
    }
}

"
20693893,PES1UG22CS222,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertNode(Node* head, int data) 
{
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    if (head == NULL) 
    {
        return newNode;
    }

    Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;

    return head;
}

Node* reverseLinkedList(Node* head) 
{
    Node* prev = NULL;
    Node* current = head;
    Node* nextNode;
    while (current != NULL) 
    {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    return prev;
}

void printLinkedList(Node* head) 
{
    Node* temp = head;
    while (temp != NULL) {
        printf(""%d"", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() 
{
    int n;
    scanf(""%d"", &n);
    Node* head = NULL;
    for (int i = 0; i < n; i++) 
    {
        int data;
        scanf(""%d"", &data);
        head = insertNode(head, data);
    }
    head = reverseLinkedList(head);
    printLinkedList(head);

    while (head != NULL) 
    {
        Node* temp = head;
        head = head->next;
        free(temp);
    }
}
"
20723375,hemashree21_msh,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int power;
    struct Node* next;
};

struct Node* createNode(int coeff, int power) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->power = power;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node** poly, int coeff, int power) {
    struct Node* newNode = createNode(coeff, power);
    if (*poly == NULL) {
        *poly = newNode;
    } else {
        struct Node* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node** result) {
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->power > poly2->power) {
            insertNode(result, poly1->coeff, poly1->power);
            poly1 = poly1->next;
        } else if (poly1->power < poly2->power) {
            insertNode(result, poly2->coeff, poly2->power);
            poly2 = poly2->next;
        } else {
            insertNode(result, poly1->coeff + poly2->coeff, poly1->power);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertNode(result, poly1->coeff, poly1->power);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertNode(result, poly2->coeff, poly2->power);
        poly2 = poly2->next;
    }
}

void display(struct Node* poly) {
    struct Node* temp = poly;
    while (temp != NULL) {
        printf(""%d "", temp->coeff);
        temp = temp->next;
    }
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    struct Node* result = NULL;

        for (int i = 0; i < n + m; i++) {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        
        if (i < n) {
            insertNode(&poly1, coeff, power);
        } else {
            insertNode(&poly2, coeff, power);
        }
    }

    addPolynomials(poly1, poly2, &result);

    display(result);

    // Free memory
    while (poly1 != NULL) {
        struct Node* temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }

    while (poly2 != NULL) {
        struct Node* temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }

    while (result != NULL) {
        struct Node* temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
20723375,hemashree21_msh,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next_node = NULL;
    
    while (current != NULL) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }
    
    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    struct Node* current = NULL;
    
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct Node* new_node = (struct Node*) malloc(sizeof(struct Node));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head == NULL) {
            head = new_node;
            current = new_node;
        } else {
            current->next = new_node;
            current = new_node;
        }
    }
    
    struct Node* reversed_head = reverseLinkedList(head);
    printLinkedList(reversed_head);
    
    return 0;
}"
21506604,PES1UG22CS203,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);
}"
21506604,PES1UG22CS203,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void displayList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        if (head->next) {
            printf("""");
        }
        head = head->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);
        if (!head) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->value = value;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->value = value;
            current->next = NULL;
        }
    }

    struct Node* reversedList = reverseLinkedList(head);
    displayList(reversedList);

    // Free memory
    while (reversedList) {
        struct Node* temp = reversedList;
        reversedList = reversedList->next;
        free(temp);
    }
}"
22660573,PES1UG22CS189,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

       
typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}


Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    
    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
22660573,PES1UG22CS189,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

// Define the structure for a LinkedList Node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new Node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to reverse the LinkedList by rearranging nodes
struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

// Function to print the LinkedList
void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = createNode(value);

        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    return 0;
}
"
22742259,PES1UG22CS227,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Term 
{
    int coefficient;
    int exponent;
    struct Term *next;
} Term;


Term *insertTerm(Term *head, int coeff, int expo) 
{
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) 
    {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) 
    {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

Term *addPolynomials(Term *poly1, Term *poly2) 
{
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } 
        else if (poly1->exponent < poly2->exponent) 
        {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) 
            {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) 
    {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(Term *head) 
{
    Term *temp = head;
    while (temp != NULL) 
    {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) 
    {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) 
    {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    while (poly1 != NULL) 
    {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) 
    {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) 
    {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
22742259,PES1UG22CS227,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next_node;
    
    while (current != NULL) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }
    
    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int num_nodes;
    scanf(""%d"", &num_nodes);
    
    struct Node* head = NULL;
    struct Node* current = NULL;
    
    for (int i = 0; i < num_nodes; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head == NULL) {
            head = new_node;
            current = new_node;
        } else {
            current->next = new_node;
            current = new_node;
        }
    }
    
    head = reverseLinkedList(head);
    printLinkedList(head);
    
    return 0;
}"
22742261,pes1202203327,Polynomial Addition,15,"
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int power;
    struct Node* next;
};

struct Node* createNode(int coeff, int power) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->power = power;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node** poly, int coeff, int power) {
    struct Node* newNode = createNode(coeff, power);
    if (*poly == NULL) {
        *poly = newNode;
    } else {
        struct Node* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node** result) {
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->power > poly2->power) {
            insertNode(result, poly1->coeff, poly1->power);
            poly1 = poly1->next;
        } else if (poly1->power < poly2->power) {
            insertNode(result, poly2->coeff, poly2->power);
            poly2 = poly2->next;
        } else {
            insertNode(result, poly1->coeff + poly2->coeff, poly1->power);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertNode(result, poly1->coeff, poly1->power);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertNode(result, poly2->coeff, poly2->power);
        poly2 = poly2->next;
    }
}

void display(struct Node* poly) {
    struct Node* temp = poly;
    while (temp != NULL) {
        printf(""%d "", temp->coeff);
        temp = temp->next;
    }
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    struct Node* result = NULL;

        for (int i = 0; i < n + m; i++) {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        
        if (i < n) {
            insertNode(&poly1, coeff, power);
        } else {
            insertNode(&poly2, coeff, power);
        }
    }

    addPolynomials(poly1, poly2, &result);

    display(result);

    while (poly1 != NULL) {
        struct Node* temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }

    while (poly2 != NULL) {
        struct Node* temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }

    while (result != NULL) {
        struct Node* temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}
"
22742261,pes1202203327,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next_node = NULL;
    
    while (current != NULL) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }
    
    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    struct Node* current = NULL;
    
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct Node* new_node = (struct Node*) malloc(sizeof(struct Node));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head == NULL) {
            head = new_node;
            current = new_node;
        } else {
            current->next = new_node;
            current = new_node;
        }
    }
    
    struct Node* reversed_head = reverseLinkedList(head);
    printLinkedList(reversed_head);
    
    return 0;
}"
22742270,PES1UG22CS198,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
    typedef struct node{
        int coe;
        int pow;
        struct node* next;
    }NODE;
    NODE* create(int c,int p){
        NODE* po=malloc(sizeof(NODE));
        po->coe=c;
        po->pow=p;
        po->next=NULL;
        return po;
    }
    NODE* createlist(NODE* head,int c,int p){
        if(head==NULL){
            NODE* a1;
            a1=create(c,p);
            return a1;
        }
        else{
            NODE* temp;
            NODE* a1;
            temp=head;
            while(temp->next!=NULL){
                temp=temp->next;
            }
            a1=create(c,p);
            temp->next=a1;
            return head;
        }
    }
    void find(NODE* head){
        int a[50]={0};
        NODE* temp;
        temp=head;
        while(temp!=NULL){
            a[temp->pow]+=temp->coe;
            temp=temp->next;
        }
        temp=head;
        for(int i=49;i>=0;i--){
            if(a[i]!=0){
                printf(""%d "",a[i]);
            }
        }
    }
    int main(){
        int n,m,a,b;
        NODE* head=NULL;
        scanf(""%d%d"",&n,&m);
        for(int i=0;i<n+m;i++){
            scanf(""%d%d"",&a,&b);
            head=createlist(head,a,b);
        }
        find(head);
        return 0;
    }
"
22742270,PES1UG22CS198,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int info;
    struct node *next;
}NODE;

typedef struct llist{
    NODE *head;
}LLIST;
void initList(LLIST *pl)
{
    pl->head=NULL;
}
NODE* getNode(int ele)
{
    NODE *temp=malloc(sizeof(NODE));
    temp->info=ele;
    temp->next=NULL;
    return temp;
}
void insertFront(LLIST *pl, int n)
{
    int ele;
    scanf(""%d"",&ele);
    NODE *temp=getNode(ele);
    if (pl->head==NULL)
    {
        pl->head=temp;
        return;
    }
    temp->next=pl->head;
    pl->head=temp;
}
void display(LLIST *pl)
{
    NODE *p=pl->head;
    if (pl->head=NULL)
    {
        printf(""0"");
        return ;
    }
    while (p!=NULL)
    {
        printf(""%d"",p->info);
        p=p->next;
    }
}
int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    LLIST lobj;
    int n;
    scanf(""%d"",&n);
    initList(&lobj);
    for (int i=0;i<n;i++)
        insertFront(&lobj,n);
    display(&lobj);
    return 0;
}
"
22742272,PES1UG22CS196,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

    typedef struct node{
        int coe;
        int pow;
        struct node* next;
    }NODE;
    NODE* create(int c,int p){
        NODE* po=malloc(sizeof(NODE));
        po->coe=c;
        po->pow=p;
        po->next=NULL;
        return po;
    }
    NODE* createlist(NODE* head,int c,int p){
        if(head==NULL){
            NODE* a1;
            a1=create(c,p);
            return a1;
        }
        else{
            NODE* temp;
            NODE* a1;
            temp=head;
            while(temp->next!=NULL){
                temp=temp->next;
            }
            a1=create(c,p);
            temp->next=a1;
            return head;
        }
    }
    void find(NODE* head){
        int a[50]={0};
        NODE* temp;
        temp=head;
        while(temp!=NULL){
            a[temp->pow]+=temp->coe;
            temp=temp->next;
        }
        temp=head;
        for(int i=49;i>=0;i--){
            if(a[i]!=0){
                printf(""%d "",a[i]);
            }
        }
    }
    int main(){
        int n,m,a,b;
        NODE* head=NULL;
        scanf(""%d%d"",&n,&m);
        for(int i=0;i<n+m;i++){
            scanf(""%d%d"",&a,&b);
            head=createlist(head,a,b);
        }
        find(head);
        return 0;
    }"
22742272,PES1UG22CS196,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


#include <stdio.h>
#include <stdlib.h>

struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseLL(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* cur = head;
    struct Node* nextnode;
    
    while (cur != NULL) {
        nextnode = cur->next;
        cur->next = prev;
        prev = cur;
        cur = nextnode;
    }
    
    return prev;
}

void printLL(struct Node* head) {
    struct Node* cur = head;
    while (cur != NULL) {
        printf(""%d"", cur->val);
        cur = cur->next;
    }
}

int main() {
    int num;
    scanf(""%d"", &num);
    
    struct Node* head = NULL;
    struct Node* cur = NULL;
    
    for (int i = 0; i < num; i++) {
        int val;
        scanf(""%d"", &val);
        
        struct Node* newnode = (struct Node*)malloc(sizeof(struct Node));
        newnode->val = val;
        newnode->next = NULL;
        
        if (head == NULL) {
            head = newnode;
            cur = newnode;
        } else {
            cur->next = newnode;
            cur = newnode;
        }
    }
    
    head = reverseLL(head);
    printLL(head);
    
    return 0;
}

"
22742277,PES1UG22CS190,Polynomial Addition,15,"#include <stdio.h>
#include<string.h>
#include<math.h>
#include <stdlib.h>

typedef struct node {
    int coeff;
    int exp;
    struct node *next;
} node;

node *insert(node *head, int coeff, int expo) {
    node *new = (node *)malloc(sizeof(node));
    new->coeff = coeff;
    new->exp = expo;
    new->next = NULL;

    if (head == NULL) {
        return new;
    }

    node *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = new;

    return head;
}

node *add(node *l1, node *l2) {
    node *res = NULL;

    while (l1 != NULL && l2 != NULL) {
        if (l1->exp > l2->exp) {
            res = insert(res, l1->coeff, l1->exp);
            l1 = l1->next;
        } else if (l1->exp < l2->exp) {
            res = insert(res, l2->coeff, l2->exp);
            l2 = l2->next;
        } else {
            int sum = l1->coeff + l2->coeff;
            if (sum != 0) {
                res = insert(res, sum, l1->exp);
            }
            l1 = l1->next;
            l2 = l2->next;
        }
    }

    while (l1 != NULL) {
        res = insert(res, l1->coeff, l1->exp);
        l1 = l1->next;
    }

    while (l2 != NULL) {
        res = insert(res, l2->coeff, l2->exp);
        l2 = l2->next;
    }

    return res;
}

void printPolynomial(node *head) {
    node *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coeff);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    node *l1 = NULL;
    node *l2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        l1 = insert(l1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        l2 = insert(l2, coeff, expo);
    }

    node *res = add(l1, l2);

    printPolynomial(res);

    
    while (l1 != NULL) {
        node *temp = l1;
        l1 = l1->next;
        free(temp);
    }
    while (l2 != NULL) {
        node *temp = l2;
        l2 = l2->next;
        free(temp);
    }
    while (res != NULL) {
        node *temp = res;
        res = res->next;
        free(temp);
    }

    return 0;
}"
22742277,PES1UG22CS190,Reversing a Linked List,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

typedef struct node{
    int data;
    struct node *next;
}NODE;

NODE *reverse(NODE *head)
{
    NODE *prev=NULL;
    NODE *temp=head;
    while(temp!=NULL)
    {
        NODE *newnode=temp->next;
        temp->next=prev;
        prev=temp;
        temp=newnode;
    }
    return prev;
}
void list(NODE *head)
{
    NODE *temp=head;
    while(temp!=NULL){
        printf(""%d"",temp->data);
        temp=temp->next;
    }
}
int main(){
    int n;
    int data;
    scanf(""%d"",&n);
    if (n < 0 || n > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    NODE *head=NULL;
    NODE *prev=NULL;
    for(int i=0;i<n;i++){
        
        scanf(""%d"",&data);
        
        NODE *newnode=(NODE *)malloc(sizeof(NODE));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    NODE* reversed = reverse(head);
    list(reversed);
    return 0;
}"
22742286,PES1UG22CS211,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

       
typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}


Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    
    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}
"
22742286,PES1UG22CS211,Reversing a Linked List,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *rlist(struct node *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->next;
    }
}
int main(){
    int noofnodes;
    int data;
    scanf(""%d"",&noofnodes);
    if (noofnodes < 0 || noofnodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<noofnodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    struct node* rHead = rlist(head);
    printlist(rHead);
    
    
    return 0;
}

"
22742293,PES1UG22CS212,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

// Function to insert a term into the linked list
Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL)
    {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL)
    {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

// Function to add two polynomials represented as linked lists
Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL)
    {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) 
    {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL)
    {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) 
    {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++)
    {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    // Free memory
    while (poly1 != NULL) 
    {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL)
    {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}
"
22742293,PES1UG22CS212,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next_node;
    
    while (current != NULL) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }
    
    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int num_nodes;
    scanf(""%d"", &num_nodes);
    
    struct Node* head = NULL;
    struct Node* current = NULL;
    
    for (int i = 0; i < num_nodes; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head == NULL) {
            head = new_node;
            current = new_node;
        } else {
            current->next = new_node;
            current = new_node;
        }
    }
    
    head = reverseLinkedList(head);
    printLinkedList(head);
    
    return 0;
}
"
22742295,PES1UG22CS223,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct poly{
    int coefficient;
    int exponent;
    struct poly*next;
}Term;

Term *insertLast(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

Term *add(Term *poly1, Term *poly2) {
    Term *res = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            res = insertLast(res, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            res = insertLast(res, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                res = insertLast(res, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        res = insertLast(res, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        res = insertLast(res, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return res;
}

void display(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertLast(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertLast(poly2, coeff, expo);
    }

    Term *res = add(poly1, poly2);

    display(res);

    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (res != NULL) {
        Term *temp = res;
        res = res->next;
        free(temp);
    }

    return 0;
}
"
22742295,PES1UG22CS223,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

typedef struct node{
    int info;
    struct node* next;
}NODE;

NODE* reverse(NODE* head) {
    NODE* prev = NULL;
    NODE* current = head;
    NODE* next_node;
    
    while (current != NULL) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }
    
    return prev;
}

void display(NODE* head) {
    NODE* current = head;
    while (current != NULL) {
        printf(""%d"", current->info);
        current = current->next;
    }
}

int main() {
    int num;
    scanf(""%d"", &num);
    
    NODE* head = NULL;
    NODE* current = NULL;
    
    for (int i = 0; i < num; i++) {
        int info;
        scanf(""%d"", &info);
        
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->info = info;
        new_node->next = NULL;
        
        if (head == NULL) {
            head = new_node;
            current = new_node;
        } else {
            current->next = new_node;
            current = new_node;
        }
    }
    
    head = reverse(head);
    display(head);
    
    return 0;
}"
22742297,PES1UG22CS220,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

       
typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}


Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    
    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
22742297,PES1UG22CS220,Reversing a Linked List,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *rlist(struct node *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->next;
    }
}
int main(){
    int noofnodes;
    int data;
    scanf(""%d"",&noofnodes);
    if (noofnodes < 0 || noofnodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<noofnodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    struct node* rHead = rlist(head);
    printlist(rHead);
    
    
    return 0;
}"
22742300,PES1UG22CS219,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

       
typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}


Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    
    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
22742300,PES1UG22CS219,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

// Define the structure for a LinkedList Node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new Node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to reverse the LinkedList by rearranging nodes
struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

// Function to print the LinkedList
void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = createNode(value);

        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    return 0;
}"
22742301,PES1UG22CS244,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

// Function to insert a term into the linked list
Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

// Function to add two polynomials represented as linked lists
Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    // Free memory
    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
22742301,PES1UG22CS244,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int info;
    struct node*next;
}node;

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n=0;
    int ele;
    scanf(""%d"",&n);
    if (n==0){
        return 0;
    }
    node *p=(node *)malloc(sizeof(node));
    node *head=p;
    scanf(""%d"",&ele);
    head->info=ele;
    head->next=NULL;
    n--;
    while(n){
        scanf(""%d"",&ele);
        p=(node *)malloc(sizeof(node));
        p->info=ele;
        p->next=head;
        head=p;
        n--;
    }
    while(head){
        printf(""%d"",head->info);
        head=head->next;
    }
    return 0;
}
"
22742305,PES1UG22CS224,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>


typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;


Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}


Term *add_poly(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void display_poly(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = add_poly(poly1, poly2);

    display_poly(result);

    
    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}


"
22742305,PES1UG22CS224,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next_node;
    
    while (current != NULL) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }
    
    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int num_nodes;
    scanf(""%d"", &num_nodes);
    
    struct Node* head = NULL;
    struct Node* current = NULL;
    
    for (int i = 0; i < num_nodes; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head == NULL) {
            head = new_node;
            current = new_node;
        } else {
            current->next = new_node;
            current = new_node;
        }
    }
    
    head = reverseLinkedList(head);
    printLinkedList(head);
    
    return 0;
}"
22742312,pes1202203720,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int power;
    struct Node* next;
};

struct Node* createNode(int coeff, int power) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->power = power;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node** poly, int coeff, int power) {
    struct Node* newNode = createNode(coeff, power);
    if (*poly == NULL) {
        *poly = newNode;
    } else {
        struct Node* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node** result) {
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->power > poly2->power) {
            insertNode(result, poly1->coeff, poly1->power);
            poly1 = poly1->next;
        } else if (poly1->power < poly2->power) {
            insertNode(result, poly2->coeff, poly2->power);
            poly2 = poly2->next;
        } else {
            insertNode(result, poly1->coeff + poly2->coeff, poly1->power);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertNode(result, poly1->coeff, poly1->power);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertNode(result, poly2->coeff, poly2->power);
        poly2 = poly2->next;
    }
}

void display(struct Node* poly) {
    struct Node* temp = poly;
    while (temp != NULL) {
        printf(""%d "", temp->coeff);
        temp = temp->next;
    }
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    struct Node* result = NULL;

        for (int i = 0; i < n + m; i++) {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        
        if (i < n) {
            insertNode(&poly1, coeff, power);
        } else {
            insertNode(&poly2, coeff, power);
        }
    }

    addPolynomials(poly1, poly2, &result);

    display(result);

    // Free memory
    while (poly1 != NULL) {
        struct Node* temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }

    while (poly2 != NULL) {
        struct Node* temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }

    while (result != NULL) {
        struct Node* temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
22742312,pes1202203720,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next_node = NULL;
    
    while (current != NULL) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }
    
    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    struct Node* current = NULL;
    
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct Node* new_node = (struct Node*) malloc(sizeof(struct Node));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head == NULL) {
            head = new_node;
            current = new_node;
        } else {
            current->next = new_node;
            current = new_node;
        }
    }
    
    struct Node* reversed_head = reverseLinkedList(head);
    printLinkedList(reversed_head);
    
    return 0;
}"
22742316,PES1UG22CS194,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node {
    int c;
    int p;
    struct node *next;
} NODE;

typedef struct llist {
    NODE *head;
} LLIST;

void initList(LLIST *pl);
void OrderedList(LLIST *pl, int ele1, int ele2);
void display(LLIST *pl);
LLIST *AddList(LLIST *pl1, LLIST *pl2);

int main() {
    int n, m, ele1, ele2;
    LLIST obj1, obj2;
    scanf(""%d %d"", &n, &m);

    initList(&obj1);
    initList(&obj2);

    for (int i = 0; i < n; i++) {
        scanf(""%d %d"", &ele1, &ele2);
        OrderedList(&obj1, ele1, ele2);
    }

    for (int i = 0; i < m; i++) {
        scanf(""%d %d"", &ele1, &ele2);
        OrderedList(&obj2, ele1, ele2);
    }

    LLIST *obj3 = AddList(&obj1, &obj2);
    display(obj3);

    return 0;
}

void initList(LLIST *pl) {
    pl->head = NULL;
}

NODE *getnode(int ele1, int ele2) {
    NODE *temp = malloc(sizeof(NODE));
    temp->c = ele1;
    temp->p = ele2;
    temp->next = NULL;
    return temp;
}

void OrderedList(LLIST *pl, int ele1, int ele2) {
    NODE *temp = getnode(ele1, ele2);
    NODE *p1 = pl->head;
    NODE *q = NULL;

    if (p1 == NULL) {
        pl->head = temp;
        return;
    }

    while (p1!=NULL && temp->p < p1->p) {
        q = p1;
        p1 = p1->next;
    }

    if (p1 == pl->head) {
        temp->next = p1;
        pl->head = temp;
        return;
    }
    q->next = temp;
    temp->next = p1;
}

LLIST *AddList(LLIST *pl1, LLIST *pl2) {
    LLIST *pl3 = malloc(sizeof(LLIST));
    initList(pl3);

    NODE *e = pl1->head;
    NODE *f = pl2->head;

    while (e != NULL && f != NULL) {
        if (e->p > f->p) {
            OrderedList(pl3, e->c, e->p);
            e = e->next;
        } else if (e->p < f->p) {
            OrderedList(pl3, f->c, f->p);
            f = f->next;
        } else if(e->p==f->p) {
            OrderedList(pl3, e->c + f->c, e->p);
            e = e->next;
            f = f->next;
        }
    }

    while (e != NULL) {
        OrderedList(pl3, e->c, e->p);
        e = e->next;
    }

    while (f != NULL) {
        OrderedList(pl3, f->c, f->p);
        f = f->next;
    }

    return pl3;
}

void display(LLIST *pl) {
    NODE *p1 = pl->head;
    if (p1 == NULL) {
        printf(""Empty list\n"");
        return;
    }

    while (p1 != NULL) {
        if (p1 != pl->head) {
            printf("" "");
        }
        printf(""%d"", p1->c);

        p1 = p1->next;
    }
    printf(""\n"");
}
"
22742316,PES1UG22CS194,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next_node;
    
    while (current != NULL) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }
    
    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int num_nodes;
    scanf(""%d"", &num_nodes);
    
    struct Node* head = NULL;
    struct Node* current = NULL;
    
    for (int i = 0; i < num_nodes; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head == NULL) {
            head = new_node;
            current = new_node;
        } else {
            current->next = new_node;
            current = new_node;
        }
    }
    
    head = reverseLinkedList(head);
    printLinkedList(head);
    
    return 0;
}"
22742323,PES1UG22CS193,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
typedef struct Term {
    int coeff;
    int exp;
    struct Term *next;
} Term;

// Function to insert a term into the linked list
Term *insertTerm(Term *head, int coeff, int exp) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coeff = coeff;
    newTerm->exp = exp;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

// Function to add two polynomials represented as linked lists
Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            result = insertTerm(result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            result = insertTerm(result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coeff + poly2->coeff;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exp);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coeff);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        poly1 = insertTerm(poly1, coeff, exp);
    }

    for (int i = 0; i < m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        poly2 = insertTerm(poly2, coeff, exp);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    // Free memory
    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
22742323,PES1UG22CS193,Reversing a Linked List,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

typedef struct node{
    int data;
    struct node *next;
}NODE;

NODE *reverselist(NODE *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}

void printlist(NODE *head){
    NODE *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->next;
    }
}

int main(){
    int nodes;
    int data;
    scanf(""%d"",&nodes);
    if (nodes < 0 || nodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    NODE *head=NULL;
    NODE *prev=NULL;
    for(int i=0;i<nodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        NODE *newnode=(NODE *)malloc(sizeof(NODE));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    NODE* reverse = reverselist(head);
    printlist(reverse);
    
    
    return 0;
}"
22742327,PES1UG22CS234,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}"
22742327,PES1UG22CS234,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void displayList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        if (head->next) {
            printf("""");
        }
        head = head->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);
        if (!head) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->value = value;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->value = value;
            current->next = NULL;
        }
    }

    struct Node* reversedList = reverseLinkedList(head);
    displayList(reversedList);

    // Free memory
    while (reversedList) {
        struct Node* temp = reversedList;
        reversedList = reversedList->next;
        free(temp);
    }

    return 0;
}"
22742330,PES1UG22CS209,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

// Function to insert a term into the linked list
Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

// Function to add two polynomials represented as linked lists
Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    // Free memory
    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
22742330,PES1UG22CS209,Reversing a Linked List,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *reverselist(struct node *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->next;
    }
}
int main(){
    int noofnodes;
    int data;
    scanf(""%d"",&noofnodes);
    if (noofnodes < 0 || noofnodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<noofnodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    struct node* reversedHead = reverselist(head);
    printlist(reversedHead);
    
    
    return 0;
}"
22742331,PES1UG22CS237,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to create a new term with given coefficient and exponent
struct Term* createTerm(int coefficient, int exponent) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coefficient;
    newTerm->exponent = exponent;
    newTerm->next = NULL;
    return newTerm;
}

// Function to add two polynomials and return the resultant polynomial
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    struct Term* current = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            if (result == NULL) {
                result = createTerm(poly1->coefficient, poly1->exponent);
                current = result;
            } else {
                current->next = createTerm(poly1->coefficient, poly1->exponent);
                current = current->next;
            }
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            if (result == NULL) {
                result = createTerm(poly2->coefficient, poly2->exponent);
                current = result;
            } else {
                current->next = createTerm(poly2->coefficient, poly2->exponent);
                current = current->next;
            }
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (result == NULL) {
                result = createTerm(sum, poly1->exponent);
                current = result;
            } else {
                current->next = createTerm(sum, poly1->exponent);
                current = current->next;
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        if (result == NULL) {
            result = createTerm(poly1->coefficient, poly1->exponent);
            current = result;
        } else {
            current->next = createTerm(poly1->coefficient, poly1->exponent);
            current = current->next;
        }
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        if (result == NULL) {
            result = createTerm(poly2->coefficient, poly2->exponent);
            current = result;
        } else {
            current->next = createTerm(poly2->coefficient, poly2->exponent);
            current = current->next;
        }
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the coefficients of the polynomial in the order of highest degree to lowest
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);

        if (i < n) {
            if (poly1 == NULL) {
                poly1 = createTerm(coefficient, exponent);
            } else {
                struct Term* current = poly1;
                while (current->next != NULL) {
                    current = current->next;
                }
                current->next = createTerm(coefficient, exponent);
            }
        } else {
            if (poly2 == NULL) {
                poly2 = createTerm(coefficient, exponent);
            } else {
                struct Term* current = poly2;
                while (current->next != NULL) {
                    current = current->next;
                }
                current->next = createTerm(coefficient, exponent);
            }
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22742331,PES1UG22CS237,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};


struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}


void reverseLinkedList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    *head = prev;
}


void printLinkedList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf(""%d"", temp->data);
        temp = temp->next;
    }
}


int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* temp = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        if (head == NULL) {
            head = createNode(data);
            temp = head;
        } else {
            temp->next = createNode(data);
            temp = temp->next;
        }
    }

    reverseLinkedList(&head);
    printLinkedList(head);

    return 0;
}"
22742333,PES1UG22CS199,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to create a new term with given coefficient and exponent
struct Term* createTerm(int coefficient, int exponent) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coefficient;
    newTerm->exponent = exponent;
    newTerm->next = NULL;
    return newTerm;
}

// Function to add two polynomials and return the resultant polynomial
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    struct Term* current = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            if (result == NULL) {
                result = createTerm(poly1->coefficient, poly1->exponent);
                current = result;
            } else {
                current->next = createTerm(poly1->coefficient, poly1->exponent);
                current = current->next;
            }
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            if (result == NULL) {
                result = createTerm(poly2->coefficient, poly2->exponent);
                current = result;
            } else {
                current->next = createTerm(poly2->coefficient, poly2->exponent);
                current = current->next;
            }
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (result == NULL) {
                result = createTerm(sum, poly1->exponent);
                current = result;
            } else {
                current->next = createTerm(sum, poly1->exponent);
                current = current->next;
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        if (result == NULL) {
            result = createTerm(poly1->coefficient, poly1->exponent);
            current = result;
        } else {
            current->next = createTerm(poly1->coefficient, poly1->exponent);
            current = current->next;
        }
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        if (result == NULL) {
            result = createTerm(poly2->coefficient, poly2->exponent);
            current = result;
        } else {
            current->next = createTerm(poly2->coefficient, poly2->exponent);
            current = current->next;
        }
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the coefficients of the polynomial in the order of highest degree to lowest
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);

        if (i < n) {
            if (poly1 == NULL) {
                poly1 = createTerm(coefficient, exponent);
            } else {
                struct Term* current = poly1;
                while (current->next != NULL) {
                    current = current->next;
                }
                current->next = createTerm(coefficient, exponent);
            }
        } else {
            if (poly2 == NULL) {
                poly2 = createTerm(coefficient, exponent);
            } else {
                struct Term* current = poly2;
                while (current->next != NULL) {
                    current = current->next;
                }
                current->next = createTerm(coefficient, exponent);
            }
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22742333,PES1UG22CS199,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;
    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    // Reverse the linked list
    head = reverseLinkedList(head);

    // Print the reversed linked list
    printLinkedList(head);

    // Free allocated memory
    current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22742348,PES1UG22CS226,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Term
{
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

Term *insertTerm(Term *head, int coeff, int expo)
{
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL)
    {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL)
    {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

Term *addPolynomials(Term *poly1, Term *poly2)
{
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL)
    {
        if (poly1->exponent > poly2->exponent)
        {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent)
        {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        }
        else
        {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0)
            {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL)
    {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL)
    {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(Term *head)
{
    Term *temp = head;
    while (temp != NULL)
    {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main()
{
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++)
    {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++)
    {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    while (poly1 != NULL)
    {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL)
    {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL)
    {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
22742348,PES1UG22CS226,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int info;
    struct node *next;
}node;

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    
    int n=0;
    int ele;
    scanf(""%d"",&n);
    if(n==0)
    {
        return n;
    }
    node *head=(node *)malloc(sizeof(node));
    node *p=head;
    scanf(""%d"",&ele);
    head->info=ele;
    n--;
    while(n)
    {
        scanf(""%d"",&ele);
        p=(node *)malloc(sizeof(node));
        p->info=ele;
        p->next=head;
        head=p;
        n--;
    }
    while(head)
    {
        printf(""%d"",head->info);
        head=head->next;
    }
    
    return 0;
}
"
22742358,PES1UG22CS225,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

// Function to insert a term into the linked list
Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

// Function to add two polynomials represented as linked lists
Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    // Free memory
    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
22742358,PES1UG22CS225,Reversing a Linked List,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *reverselist(struct node *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->next;
    }
}
int main(){
    int noofnodes;
    int data;
    scanf(""%d"",&noofnodes);
    if (noofnodes < 0 || noofnodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<noofnodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    struct node* reversedHead = reverselist(head);
    printlist(reversedHead);
    
    
    return 0;
}"
22742360,PES1UG22CS239,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}
"
22742360,PES1UG22CS239,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void displayList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        if (head->next) {
            printf("""");
        }
        head = head->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);
        if (!head) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->value = value;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->value = value;
            current->next = NULL;
        }
    }

    struct Node* reversedList = reverseLinkedList(head);
    displayList(reversedList);

    // Free memory
    while (reversedList) {
        struct Node* temp = reversedList;
        reversedList = reversedList->next;
        free(temp);
    }

    return 0;
}
"
22742364,PES1UG22CS205,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct node {
  int coef;
  int exp;
  struct node *next;
} node;

node *create_node(int coef, int exp) {
  node *new_node = (node *)malloc(sizeof(node));
  new_node->coef = coef;
  new_node->exp = exp;
  new_node->next = NULL;
  return new_node;
}

node *create_poly(int n, int m) {
  node *head = NULL, *tail = NULL;
  int coef, exp;
  for (int i = 0; i < n + m; i++) {
    scanf(""%d %d"", &coef, &exp);
    if (coef == 0) {
      continue;
    }
    node *new_node = create_node(coef, exp);
    if (head == NULL) {
      head = new_node;
      tail = new_node;
    } else {
      tail->next = new_node;
      tail = new_node;
    }
  }
  return head;
}

void compute(node *head, int n, int m) {
  int lst[100] = {0};
  node *ptr = head;
  while (ptr != NULL) {
    lst[ptr->exp] += ptr->coef;
    ptr = ptr->next;
  }
  for (int i = n + m + 1; i >= 0; i--) {
    if (lst[i] != 0)
      printf(""%d "", lst[i]);
  }
}

int main() {
  int n, m;
  scanf(""%d %d"", &n, &m);
  node *head = create_poly(n, m);
  compute(head, n, m);
}
"
22742364,PES1UG22CS205,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct {
  int data;
  struct node *next;
} node;

node *createNode(int data) {
  node *newNode = (node *)malloc(sizeof(node));
  newNode->data = data;
  newNode->next = NULL;
  return newNode;
}

node *insertNode(node *head, int data) {
  node *newNode = createNode(data);
  if (head == NULL) {
    head = newNode;
  } else {
    node *temp = head;
    while (temp->next != NULL) {
      temp = temp->next;
    }
    temp->next = newNode;
  }
  return head;
}

node *makeList(int n) {
  node *head = NULL;
  int i, data;
  for (i = 0; i < n; i++) {
    scanf(""%d"", &data);
    head = insertNode(head, data);
  }
  return head;
}

node *reverseList(node **head) {
  node *prev = NULL;
  node *curr = *head;
  node *next = NULL;
  while (curr != NULL) {
    next = curr->next;
    curr->next = prev;
    prev = curr;
    curr = next;
  }
  *head = prev;
  return *head;
}

void printList(node *head) {
  node *temp = head;
  while (temp != NULL) {
    printf(""%d"", temp->data);
    temp = temp->next;
  }
}

int main() {
  int n;
  scanf(""%d"", &n);
  node *head = makeList(n);
  node *rev = reverseList(&head);
  printList(rev);
}
"
22742365,PES1UG22CS217,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
    typedef struct node{
        int coe;
        int pow;
        struct node* next;
    }NODE;
    NODE* create(int c,int p){
        NODE* po=malloc(sizeof(NODE));
        po->coe=c;
        po->pow=p;
        po->next=NULL;
        return po;
    }
    NODE* createlist(NODE* head,int c,int p){
        if(head==NULL){
            NODE* a1;
            a1=create(c,p);
            return a1;
        }
        else{
            NODE* temp;
            NODE* a1;
            temp=head;
            while(temp->next!=NULL){
                temp=temp->next;
            }
            a1=create(c,p);
            temp->next=a1;
            return head;
        }
    }
    void find(NODE* head){
        int a[50]={0};
        NODE* temp;
        temp=head;
        while(temp!=NULL){
            a[temp->pow]+=temp->coe;
            temp=temp->next;
        }
        temp=head;
        for(int i=49;i>=0;i--){
            if(a[i]!=0){
                printf(""%d "",a[i]);
            }
        }
    }
    int main(){
        int n,m,a,b;
        NODE* head=NULL;
        scanf(""%d%d"",&n,&m);
        for(int i=0;i<n+m;i++){
            scanf(""%d%d"",&a,&b);
            head=createlist(head,a,b);
        }
        find(head);
        return 0;
    }"
22742365,PES1UG22CS217,Reversing a Linked List,15,"#include<stdio.h>
#include<stdlib.h>

typedef struct node
{
    int info;
    struct node *next;
}NODE;

NODE *CreateNode(int ele)
{
    NODE *new=(NODE*)malloc(sizeof(NODE));
    new->info=ele;
    new->next=NULL;
    return new;
}

NODE *InsertFront(NODE *head,int size,int arr[])
{
    for(int i=0;i<size;i++)
    {
        int ele=arr[i];
        NODE *newnode=CreateNode(ele);
        newnode->next=head;
        head=newnode;
    }
    return head;
}


void Display(NODE *head)
{
    NODE *temp=head;
    while(temp!=NULL)
    {
        printf(""%d"",temp->info);
        temp=temp->next;
    }
}

int main()
{
    NODE *head=NULL;
    int size;
    scanf(""%d"",&size);
    int arr[size];
    for(int i=0;i<size;i++)
        scanf(""%d"",&arr[i]);
    head=InsertFront(head,size,arr);
    Display(head);
}"
22742374,PES1UG22CS204,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
    typedef struct node{
        int coe;
        int pow;
        struct node* next;
    }NODE;
    NODE* create(int c,int p){
        NODE* po=malloc(sizeof(NODE));
        po->coe=c;
        po->pow=p;
        po->next=NULL;
        return po;
    }
    NODE* createlist(NODE* head,int c,int p){
        if(head==NULL){
            NODE* a1;
            a1=create(c,p);
            return a1;
        }
        else{
            NODE* temp;
            NODE* a1;
            temp=head;
            while(temp->next!=NULL){
                temp=temp->next;
            }
            a1=create(c,p);
            temp->next=a1;
            return head;
        }
    }
    void find(NODE* head){
        int a[50]={0};
        NODE* temp;
        temp=head;
        while(temp!=NULL){
            a[temp->pow]+=temp->coe;
            temp=temp->next;
        }
        temp=head;
        for(int i=49;i>=0;i--){
            if(a[i]!=0){
                printf(""%d "",a[i]);
            }
        }
    }
    int main(){
        int n,m,a,b;
        NODE* head=NULL;
        scanf(""%d%d"",&n,&m);
        for(int i=0;i<n+m;i++){
            scanf(""%d%d"",&a,&b);
            head=createlist(head,a,b);
        }
        find(head);
        return 0;
    }

"
22742374,PES1UG22CS204,Reversing a Linked List,15,"#include<stdio.h>
#include<stdlib.h>

typedef struct node
{
    int info;
    struct node *next;
}NODE;

NODE *CreateNode(int ele)
{
    NODE* new=(NODE*)malloc(sizeof(NODE));
    new->info=ele;
    new->next=NULL;
    return new;
}

NODE *InsertFront(NODE *head,int size,int arr[])
{
    for(int i=0;i<size;i++)
    {
        int ele=arr[i];
        NODE *newnode=CreateNode(ele);
        newnode->next=head;
        head=newnode;
    }
    return head;
}


void Display(NODE *head)
{
    NODE *temp=head;
    while(temp!=NULL)
    {
        printf(""%d"",temp->info);
        temp=temp->next;
    }
}

int main()
{
    NODE *head=NULL;
    int size;
    scanf(""%d"",&size);
    int arr[size];
    for(int i=0;i<size;i++)
        scanf(""%d"",&arr[i]);
    head=InsertFront(head,size,arr);
    Display(head);
}"
22742375,PES1UG22CS188,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    int power;
    struct node *next;
}NODE;



int main() {
    int n,m;
    scanf(""%d%d"",&n,&m);
    int k=n;
    NODE *p1=(NODE *)malloc((n+m)*sizeof(NODE));
    NODE *p2=(NODE *)malloc(m*sizeof(NODE));
    for(int i=0;i<n;i++)
    {
        scanf(""%d"",&p1[i].data);
        scanf(""%d"",&p1[i].power);
    }
    for(int i=0;i<m;i++)
    {
        scanf(""%d"",&p2[i].data);
        scanf(""%d"",&p2[i].power);
    }
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(p1[i].power==p2[j].power)
            {
                p1[i].data+=p2[j].data;
                p2[j].power=0;
            }
        }
    }
    for(int i=0;i<m;i++)
    {
        if(p2[i].power!=0)
        {
            p1[k].power=p2[i].power;
            p1[k].data=p2[i].data;
            k++;
        }
    }
    int l=k;
    for (int i = 0; i < l; i++) {
    for (int j = i + 1; j < l; j++) {
        if (p1[j].power > p1[i].power) {
            int tempPower = p1[i].power;
            int tempData = p1[i].data;
            p1[i].power = p1[j].power;
            p1[i].data = p1[j].data;
            p1[j].power = tempPower;
            p1[j].data = tempData;
        }
    }
    printf(""%d "", p1[i].data);
}
        
    return 0;
}
"
22742375,PES1UG22CS188,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int data;
    struct node *next;
}NODE;
int main() {
    int len=0;
    scanf(""%d"",&len);
    NODE *p=(NODE *)malloc(len*sizeof(NODE));
    for(int i=0;i<len;i++)
    {
        scanf(""%d"",&p[i].data);
    }
    int j=len-1;
    while(j>=0)
    {
        printf(""%d"",p[j].data);
        j--;
    }
        
    return 0;
}
"
22742376,pes1202201308,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>


struct NODE{
    int coefficient;
    int exponent;
    struct NODE *next;
};

typedef struct NODE LLIST;


LLIST* createNODE(int coeff, int exp) {
    LLIST *NODE = (LLIST*)malloc(sizeof(LLIST));
    NODE->coefficient = coeff;
    NODE->exponent = exp;
    NODE->next = NULL;
    return NODE;
}


void addToPolynomial(LLIST **poly, int coeff, int exp) {
   LLIST *NODE = createNODE(coeff, exp);

    if (*poly == NULL) {
        *poly = NODE;
    } else {
        LLIST *temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = NODE;
    }
}


LLIST* addit(LLIST *poly1, LLIST *poly2) {
    LLIST *result = NULL;
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            addToPolynomial(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            addToPolynomial(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            addToPolynomial(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Add remaining terms from both polynomials
    while (poly1 != NULL) {
        addToPolynomial(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        addToPolynomial(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void display(LLIST *poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    LLIST *poly1 = NULL;
   LLIST *poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            addToPolynomial(&poly1, coeff, exp);
        } else {
            addToPolynomial(&poly2, coeff, exp);
        }
    }

    LLIST *result = addit(poly1, poly2);
    display(result);

    return 0;
}"
22742376,pes1202201308,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next_node;
    
    while (current != NULL) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }
    
    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int num_nodes;
    scanf(""%d"", &num_nodes);
    
    struct Node* head = NULL;
    struct Node* current = NULL;
    
    for (int i = 0; i < num_nodes; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head == NULL) {
            head = new_node;
            current = new_node;
        } else {
            current->next = new_node;
            current = new_node;
        }
    }
    
    head = reverseLinkedList(head);
    printLinkedList(head);
    
    return 0;
}"
22742379,pes1202203581,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to create a new term with given coefficient and exponent
struct Term* createTerm(int coefficient, int exponent) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coefficient;
    newTerm->exponent = exponent;
    newTerm->next = NULL;
    return newTerm;
}

// Function to add two polynomials and return the resultant polynomial
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    struct Term* current = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            if (result == NULL) {
                result = createTerm(poly1->coefficient, poly1->exponent);
                current = result;
            } else {
                current->next = createTerm(poly1->coefficient, poly1->exponent);
                current = current->next;
            }
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            if (result == NULL) {
                result = createTerm(poly2->coefficient, poly2->exponent);
                current = result;
            } else {
                current->next = createTerm(poly2->coefficient, poly2->exponent);
                current = current->next;
            }
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (result == NULL) {
                result = createTerm(sum, poly1->exponent);
                current = result;
            } else {
                current->next = createTerm(sum, poly1->exponent);
                current = current->next;
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        if (result == NULL) {
            result = createTerm(poly1->coefficient, poly1->exponent);
            current = result;
        } else {
            current->next = createTerm(poly1->coefficient, poly1->exponent);
            current = current->next;
        }
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        if (result == NULL) {
            result = createTerm(poly2->coefficient, poly2->exponent);
            current = result;
        } else {
            current->next = createTerm(poly2->coefficient, poly2->exponent);
            current = current->next;
        }
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the coefficients of the polynomial in the order of highest degree to lowest
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);

        if (i < n) {
            if (poly1 == NULL) {
                poly1 = createTerm(coefficient, exponent);
            } else {
                struct Term* current = poly1;
                while (current->next != NULL) {
                    current = current->next;
                }
                current->next = createTerm(coefficient, exponent);
            }
        } else {
            if (poly2 == NULL) {
                poly2 = createTerm(coefficient, exponent);
            } else {
                struct Term* current = poly2;
                while (current->next != NULL) {
                    current = current->next;
                }
                current->next = createTerm(coefficient, exponent);
            }
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22742379,pes1202203581,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

// Structure for a LinkedList Node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new Node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to reverse the LinkedList
void reverseLinkedList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    *head = prev;
}

// Function to print the LinkedList
void printLinkedList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf(""%d"", temp->data);
        temp = temp->next;
    }
}

// Main function
int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* temp = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        if (head == NULL) {
            head = createNode(data);
            temp = head;
        } else {
            temp->next = createNode(data);
            temp = temp->next;
        }
    }

    reverseLinkedList(&head);
    printLinkedList(head);

    return 0;
}"
22742384,PES1UG22CS246_,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int exp;
    struct Node *next;
};

struct Node *createNode(int coeff, int exp) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->exp = exp;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node **poly, int coeff, int exp) {
    struct Node *newNode = createNode(coeff, exp);
    if (*poly == NULL) {
        *poly = newNode;
    } else {
        struct Node *temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

struct Node *addPolynomials(struct Node *poly1, struct Node *poly2) {
    struct Node *result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp == poly2->exp) {
            insertNode(&result, poly1->coeff + poly2->coeff, poly1->exp);
            poly1 = poly1->next;
            poly2 = poly2->next;
        } else if (poly1->exp > poly2->exp) {
            insertNode(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else {
            insertNode(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertNode(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertNode(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }
    
    return result;
}

void displayPolynomial(struct Node *poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node *poly1 = NULL;
    struct Node *poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertNode(&poly1, coeff, exp);
        } else {
            insertNode(&poly2, coeff, exp);
        }
    }

    struct Node *result = addPolynomials(poly1, poly2);
    displayPolynomial(result);

    return 0;
}
"
22742384,PES1UG22CS246_,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next_node;
    
    while (current != NULL) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }
    
    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int num_nodes;
    scanf(""%d"", &num_nodes);
    
    struct Node* head = NULL;
    struct Node* current = NULL;
    
    for (int i = 0; i < num_nodes; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head == NULL) {
            head = new_node;
            current = new_node;
        } else {
            current->next = new_node;
            current = new_node;
        }
    }
    
    head = reverseLinkedList(head);
    printLinkedList(head);
    
    return 0;
}"
22742393,PES1UG22CS197,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

    typedef struct node{
        int coe;
        int pow;
        struct node* next;
    }NODE;
    NODE* create(int c,int p){
        NODE* po=malloc(sizeof(NODE));
        po->coe=c;
        po->pow=p;
        po->next=NULL;
        return po;
    }
    NODE* createlist(NODE* head,int c,int p){
        if(head==NULL){
            NODE* a1;
            a1=create(c,p);
            return a1;
        }
        else{
            NODE* temp;
            NODE* a1;
            temp=head;
            while(temp->next!=NULL){
                temp=temp->next;
            }
            a1=create(c,p);
            temp->next=a1;
            return head;
        }
    }
    void find(NODE* head){
        int a[50]={0};
        NODE* temp;
        temp=head;
        while(temp!=NULL){
            a[temp->pow]+=temp->coe;
            temp=temp->next;
        }
        temp=head;
        for(int i=49;i>=0;i--){
            if(a[i]!=0){
                printf(""%d "",a[i]);
            }
        }
    }
    int main(){
        int n,m,a,b;
        NODE* head=NULL;
        scanf(""%d%d"",&n,&m);
        for(int i=0;i<n+m;i++){
            scanf(""%d%d"",&a,&b);
            head=createlist(head,a,b);
        }
        find(head);
        return 0;
    }
"
22742393,PES1UG22CS197,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next_node;
    
    while (current != NULL) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }
    
    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int num_nodes;
    scanf(""%d"", &num_nodes);
    
    struct Node* head = NULL;
    struct Node* current = NULL;
    
    for (int i = 0; i < num_nodes; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head == NULL) {
            head = new_node;
            current = new_node;
        } else {
            current->next = new_node;
            current = new_node;
        }
    }
    
    head = reverseLinkedList(head);
    printLinkedList(head);
    
    return 0;
}"
22742396,PES1UG22CS240,Polynomial Addition,15,"
#include <stdio.h>
#include <stdlib.h>

typedef struct exp {
    int coefficient;
    int exponent;
    struct exp *next;
} exp;

exp *insertexp(exp *head, int coeff, int expo) {
    exp *newexp = (exp *)malloc(sizeof(exp));
    newexp->coefficient = coeff;
    newexp->exponent = expo;
    newexp->next = NULL;

    if (head == NULL) {
        return newexp;
    }

    exp *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newexp;

    return head;
}

exp *addPoly(exp *poly1, exp *poly2) {
    exp *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertexp(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertexp(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertexp(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertexp(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertexp(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printpoly(exp *head) {
    exp *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    exp *poly1 = NULL;
    exp *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertexp(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertexp(poly2, coeff, expo);
    }

    exp *result = addPoly(poly1, poly2);

    printpoly(result);

    while (poly1 != NULL) {
        exp *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        exp *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        exp *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}

"
22742396,PES1UG22CS240,Reversing a Linked List,15,"
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertnode(Node* head, int data) 
{
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    if (head == NULL) 
    {
        return newNode;
    }

    Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;

    return head;
}

Node* revLL(Node* head) 
{
    Node* prev = NULL;
    Node* current = head;
    Node* nextNode;
    while (current != NULL) 
    {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    return prev;
}

void printLL(Node* head) 
{
    Node* temp = head;
    while (temp != NULL) {
        printf(""%d"", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() 
{
    int n;
    scanf(""%d"", &n);
    Node* head = NULL;
    for (int i = 0; i < n; i++) 
    {
        int data;
        scanf(""%d"", &data);
        head = insertnode(head, data);
    }
    head = revLL(head);
    printLL(head);

    while (head != NULL) 
    {
        Node* temp = head;
        head = head->next;
        free(temp);
    }
    return 0;
}


"
22742398,PES1202202547,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to create a new term with given coefficient and exponent
struct Term* createTerm(int coefficient, int exponent) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coefficient;
    newTerm->exponent = exponent;
    newTerm->next = NULL;
    return newTerm;
}

// Function to add two polynomials and return the resultant polynomial
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    struct Term* current = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            if (result == NULL) {
                result = createTerm(poly1->coefficient, poly1->exponent);
                current = result;
            } else {
                current->next = createTerm(poly1->coefficient, poly1->exponent);
                current = current->next;
            }
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            if (result == NULL) {
                result = createTerm(poly2->coefficient, poly2->exponent);
                current = result;
            } else {
                current->next = createTerm(poly2->coefficient, poly2->exponent);
                current = current->next;
            }
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (result == NULL) {
                result = createTerm(sum, poly1->exponent);
                current = result;
            } else {
                current->next = createTerm(sum, poly1->exponent);
                current = current->next;
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        if (result == NULL) {
            result = createTerm(poly1->coefficient, poly1->exponent);
            current = result;
        } else {
            current->next = createTerm(poly1->coefficient, poly1->exponent);
            current = current->next;
        }
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        if (result == NULL) {
            result = createTerm(poly2->coefficient, poly2->exponent);
            current = result;
        } else {
            current->next = createTerm(poly2->coefficient, poly2->exponent);
            current = current->next;
        }
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the coefficients of the polynomial in the order of highest degree to lowest
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);

        if (i < n) {
            if (poly1 == NULL) {
                poly1 = createTerm(coefficient, exponent);
            } else {
                struct Term* current = poly1;
                while (current->next != NULL) {
                    current = current->next;
                }
                current->next = createTerm(coefficient, exponent);
            }
        } else {
            if (poly2 == NULL) {
                poly2 = createTerm(coefficient, exponent);
            } else {
                struct Term* current = poly2;
                while (current->next != NULL) {
                    current = current->next;
                }
                current->next = createTerm(coefficient, exponent);
            }
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
"
22742398,PES1202202547,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


// Structure for a LinkedList Node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new Node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to reverse the LinkedList
void reverseLinkedList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    *head = prev;
}

// Function to print the LinkedList
void printLinkedList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf(""%d"", temp->data);
        temp = temp->next;
    }
}

// Main function
int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* temp = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        if (head == NULL) {
            head = createNode(data);
            temp = head;
        } else {
            temp->next = createNode(data);
            temp = temp->next;
        }
    }

    reverseLinkedList(&head);
    printLinkedList(head);

    return 0;
}"
22742404,PES1UG22CS216,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
typedef struct Term {
    int coefficient;
    int exp;
    struct Term *next;
} Term;

// Function to insert a term into the linked list
Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exp = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

// Function to add two polynomials represented as linked lists
Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            result = insertTerm(result, poly1->coefficient, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            result = insertTerm(result, poly2->coefficient, poly2->exp);
            poly2 = poly2->next;
        } else {
            int s = poly1->coefficient + poly2->coefficient;
            if (s != 0) {
                result = insertTerm(result, s, poly1->exp);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exp);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exp);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}"
22742404,PES1UG22CS216,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertNode(Node* head, int data) 
{
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    if (head == NULL) 
    {
        return newNode;
    }

    Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;

    return head;
}

Node* reverseLinkedList(Node* head) 
{
    Node* prev = NULL;
    Node* current = head;
    Node* nextNode;
    while (current != NULL) 
    {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    return prev;
}

void printLinkedList(Node* head) 
{
    Node* temp = head;
    while (temp != NULL) {
        printf(""%d"", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() 
{
    int n;
    scanf(""%d"", &n);
    Node* head = NULL;
    for (int i = 0; i < n; i++) 
    {
        int data;
        scanf(""%d"", &data);
        head = insertNode(head, data);
    }
    head = reverseLinkedList(head);
    printLinkedList(head);

    while (head != NULL) 
    {
        Node* temp = head;
        head = head->next;
        free(temp);
    }
}"
22742406,PES1UG22CS210,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

struct Term* createTerm(int coefficient, int exponent) {
    struct Term* term = (struct Term*)malloc(sizeof(struct Term));
    term->coefficient = coefficient;
    term->exponent = exponent;
    term->next = NULL;
    return term;
}

void insertTerm(struct Term** poly, int coefficient, int exponent) {
    struct Term* newTerm = createTerm(coefficient, exponent);

    if (*poly == NULL) {
        *poly = newTerm;
        return;
    }

    struct Term* current = *poly;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newTerm;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);

        if (i < n) {
            insertTerm(&poly1, coefficient, exponent);
        } else {
            insertTerm(&poly2, coefficient, exponent);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
"
22742406,PES1UG22CS210,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < numNodes; ++i) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = head;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }

    struct Node* newHead = reverseLinkedList(head);
    printLinkedList(newHead);

    return 0;
}
"
22742408,PES1UG22CS214,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;
    if (head == NULL) {
        return newTerm;
    }
    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;
    return head;
}
Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}
void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}
int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    Term *poly1 = NULL;
    Term *poly2 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }
    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }
    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);
    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }
    return 0;
}"
22742408,PES1UG22CS214,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}
void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);
    struct Node* head = NULL;
    struct Node* tail = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        struct Node* newNode = createNode(value);
        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }
    head = reverseLinkedList(head);
    printLinkedList(head);
    return 0;
}

"
22742417,PES1UG22CS207,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

// Function to insert a term into the linked list
Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

// Function to add two polynomials represented as linked lists
Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    // Free memory
    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
22742417,PES1UG22CS207,Reversing a Linked List,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *reverselist(struct node *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->next;
    }
}
int main(){
    int noofnodes;
    int data;
    scanf(""%d"",&noofnodes);
    if (noofnodes < 0 || noofnodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<noofnodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    struct node* reversedHead = reverselist(head);
    printlist(reversedHead);
    
    
    return 0;
}"
22742421,PES1UG22CS221,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

// Function to insert a term into the linked list
Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

// Function to add two polynomials represented as linked lists
Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    // Free memory
    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}
"
22742421,PES1UG22CS221,Reversing a Linked List,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *reverselist(struct node *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->next;
    }
}
int main(){
    int noofnodes;
    int data;
    scanf(""%d"",&noofnodes);
    if (noofnodes < 0 || noofnodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<noofnodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    struct node* reversedHead = reverselist(head);
    printlist(reversedHead);
    
    
    return 0;
}"
22742424,PES1UG22CS201,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int exp;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->exp = exp;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    if (*poly == NULL) {
        *poly = newNode;
    } else {
        struct Node* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node** result) {
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertNode(result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertNode(result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            insertNode(result, poly1->coeff + poly2->coeff, poly1->exp);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertNode(result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertNode(result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertNode(&poly1, coeff, exp);
        } else {
            insertNode(&poly2, coeff, exp);
        }
    }

    struct Node* result = NULL;
    addPolynomials(poly1, poly2, &result);

    printPolynomial(result);

    return 0;
}
"
22742424,PES1UG22CS201,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void reverseLinkedList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* nextNode = NULL;
    
    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    
    *head = prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertNode(&head, data);
    }

    reverseLinkedList(&head);
    printLinkedList(head);

    return 0;
}

"
22742436,PES1UG22CS235,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}"
22742436,PES1UG22CS235,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void displayList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        if (head->next) {
            printf("""");
        }
        head = head->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);
        if (!head) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->value = value;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->value = value;
            current->next = NULL;
        }
    }

    struct Node* reversedList = reverseLinkedList(head);
    displayList(reversedList);

    // Free memory
    while (reversedList) {
        struct Node* temp = reversedList;
        reversedList = reversedList->next;
        free(temp);
    }

    return 0;
}"
22742461,PES1UG22CS232,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
} Node;

Node* createNode(int coefficient, int exponent) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->coefficient = coefficient;
    newNode->exponent = exponent;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(Node** poly, int coefficient, int exponent) {
    Node* newNode = createNode(coefficient, exponent);
    if (*poly == NULL) {
        *poly = newNode;
    } else {
        Node* current = *poly;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

Node* addPolynomials(Node* poly1, Node* poly2) {
    Node* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    
    return result;
}

void printPolynomial(Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node* poly1 = NULL;
    Node* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);
        if (i < n) {
            insertTerm(&poly1, coefficient, exponent);
        } else {
            insertTerm(&poly2, coefficient, exponent);
        }
    }

    Node* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    // Free memory
    while (result != NULL) {
        Node* temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}
"
22742461,PES1UG22CS232,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int value;
    struct Node* next;
} Node;

Node* createNode(int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

void insertNode(Node** head, int value) {
    Node* newNode = createNode(value);
    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void reverseLinkedList(Node** head) {
    Node* prev = NULL;
    Node* current = *head;
    Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    *head = prev;
}

void printLinkedList(Node* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);

    Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertNode(&head, value);
    }

    reverseLinkedList(&head);
    printLinkedList(head);

    // Free memory
    while (head != NULL) {
        Node* temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}
"
22742548,PES1UG22CS186,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);


    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}




"
22742548,PES1UG22CS186,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertNode(Node* head, int data) 
{
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    if (head == NULL) 
    {
        return newNode;
    }

    Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;

    return head;
}

Node* reverseLinkedList(Node* head) 
{
    Node* prev = NULL;
    Node* current = head;
    Node* nextNode;
    while (current != NULL) 
    {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    return prev;
}

void printLinkedList(Node* head) 
{
    Node* temp = head;
    while (temp != NULL) {
        printf(""%d"", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() 
{
    int n;
    scanf(""%d"", &n);
    Node* head = NULL;
    for (int i = 0; i < n; i++) 
    {
        int data;
        scanf(""%d"", &data);
        head = insertNode(head, data);
    }
    head = reverseLinkedList(head);
    printLinkedList(head);

    while (head != NULL) 
    {
        Node* temp = head;
        head = head->next;
        free(temp);
    }
}
"
22742669,PES1UG22CS213,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
     return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);
    return 0;
}"
22742669,PES1UG22CS213,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void displayList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        if (head->next) {
            printf("""");
        }
        head = head->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);
        if (!head) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->value = value;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->value = value;
            current->next = NULL;
        }
    }

    struct Node* reversedList = reverseLinkedList(head);
    displayList(reversedList);

    // Free memory
    while (reversedList) {
        struct Node* temp = reversedList;
        reversedList = reversedList->next;
        free(temp);
    }
return 0;
}"
22742700,PES1UG22CS195,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


typedef struct NODE {
    int coefficient;
    int power;
    struct NODE *nxt;
} Node;

Node *create_node(int coefficient, int power) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coefficient = coefficient;
    node->power = power;
    node->nxt = NULL;
    return node;
}

void insert_node(Node **head, int coefficient, int power) {
    Node *node = create_node(coefficient, power);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->nxt != NULL) {
        temp = temp->nxt;
    }
    temp->nxt = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coefficient);
        head = head->nxt;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->power > p2->power) {
            insert_node(&result, p1->coefficient, p1->power);
            p1 = p1->nxt;
        } else if (p1->power < p2->power) {
            insert_node(&result, p2->coefficient, p2->power);
            p2 = p2->nxt;
        } else {
            insert_node(&result, p1->coefficient + p2->coefficient, p1->power);
            p1 = p1->nxt;
            p2 = p2->nxt;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coefficient, p1->power);
        p1 = p1->nxt;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coefficient, p2->power);
        p2 = p2->nxt;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coefficient, power;
        scanf(""%d %d"", &coefficient, &power);
        insert_node(&p1, coefficient, power);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coefficient, power;
        scanf(""%d %d"", &coefficient, &power);
        insert_node(&p2, coefficient, power);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}"
22742700,PES1UG22CS195,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct NODE {
    int val;
    struct NODE* next;
};

struct NODE* reversell(struct NODE* head) {
    struct NODE* prev = NULL;
    struct NODE* current = head;
    struct NODE* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void displayList(struct NODE* head) {
    while (head != NULL) {
        printf(""%d"", head->val);
        if (head->next) {
            printf("""");
        }
        head = head->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct NODE* head = NULL;
    struct NODE* current = NULL;

    for (int i = 0; i < numNodes; i++) {
        int val;
        scanf(""%d"", &val);
        if (!head) {
            head = (struct NODE*)malloc(sizeof(struct NODE));
            head->val = val;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct NODE*)malloc(sizeof(struct NODE));
            current = current->next;
            current->val = val;
            current->next = NULL;
        }
    }

    struct NODE* reversedList = reversell(head);
    displayList(reversedList);

  
    while (reversedList) {
        struct NODE* temp = reversedList;
        reversedList = reversedList->next;
        free(temp);
    }

    return 0;
}"
22742740,PES1UG22CS200,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeffecient;
    int power;
    struct Node *next;
} Node;

Node *create_node(int coeffecient, int power) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeffecient = coeffecient;
    node->power = power;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeffecient, int power) {
    Node *node = create_node(coeffecient, power);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeffecient);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->power > p2->power) {
            insert_node(&result, p1->coeffecient, p1->power);
            p1 = p1->next;
        } else if (p1->power < p2->power) {
            insert_node(&result, p2->coeffecient, p2->power);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeffecient + p2->coeffecient, p1->power);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeffecient, p1->power);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeffecient, p2->power);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeffecient, power;
        scanf(""%d %d"", &coeffecient, &power);
        insert_node(&p1, coeffecient, power);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeffecient, power;
        scanf(""%d %d"", &coeffecient, &power);
        insert_node(&p2, coeffecient, power);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}"
22742740,PES1UG22CS200,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int v;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* present = head;
    struct Node* nextNode;

    while (present != NULL) {
        nextNode = present->next;
        present->next = prev;
        prev = present;
        present = nextNode;
    }

    return prev;
}

void displayList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->v);
        if (head->next) {
            printf("""");
        }
        head = head->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* present = NULL;

    for (int i = 0; i < numNodes; i++) {
        int v;
        scanf(""%d"", &v);
        if (!head) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->v = v;
            head->next = NULL;
            present = head;
        } else {
            present->next = (struct Node*)malloc(sizeof(struct Node));
            present = present->next;
            present->v = v;
            present->next = NULL;
        }
    }

    struct Node* reversedList = reverseLinkedList(head);
    displayList(reversedList);

    // Free memory
    while (reversedList) {
        struct Node* temp = reversedList;
        reversedList = reversedList->next;
        free(temp);
    }

    return 0;
}
"
22742766,PES1UG22CS215,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node 
{
    int coef;
    int pow;
    struct Node *nxt;
} Node;

Node *create_node(int coef, int pow) 
{
    Node *node = (Node *)malloc(sizeof(Node));
    node->coef = coef;
    node->pow = pow;
    node->nxt = NULL;
    return node;
}

void insnode(Node **head, int coef, int pow) 
{
    Node *node = create_node(coef, pow);
    if (*head == NULL) 
    {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->nxt != NULL) 
    {
        temp = temp->nxt;
    }
    temp->nxt = node;
}

void printl(Node *head) 
{
    while (head != NULL) 
    {
        printf(""%d "", head->coef);
        head = head->nxt;
    }
}

Node *addpoly(Node *p1, Node *p2) 
{
    Node *res = NULL;
    while (p1 != NULL && p2 != NULL)
     {
        if (p1->pow > p2->pow) 
        {
            insnode(&res, p1->coef, p1->pow);
            p1 = p1->nxt;
        } else if (p1->pow < p2->pow) 
        {
            insnode(&res, p2->coef, p2->pow);
            p2 = p2->nxt;
        } else 
        {
            insnode(&res, p1->coef + p2->coef, p1->pow);
            p1 = p1->nxt;
            p2 = p2->nxt;
        }
    }
    while (p1 != NULL) 
    {
        insnode(&res, p1->coef, p1->pow);
        p1 = p1->nxt;
    }
    while (p2 != NULL) 
    {
        insnode(&res, p2->coef, p2->pow);
        p2 = p2->nxt;
    }
    return res;
}

int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) 
    {
        int coef, pow;
        scanf(""%d %d"", &coef, &pow);
        insnode(&p1, coef, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) 
    {
        int coef, pow;
        scanf(""%d %d"", &coef, &pow);
        insnode(&p2, coef, pow);
    }
    
    Node *res = addpoly(p1, p2);
    
    printl(res);

    return 0;
}
"
22742766,PES1UG22CS215,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node 
{
    int val;
    struct Node* nxt;
};

struct Node* reverseLinkedList(struct Node* head) 
{
    struct Node* prev = NULL;
    struct Node* curr = head;
    struct Node* next;

    while (curr != NULL) 
    {
        next = curr->nxt;
        curr->nxt = prev;
        prev = curr;
        curr = next;
    }

    return prev;
}

void displayList(struct Node* head) 
{
    while (head != NULL) 
    {
        printf(""%d"", head->val);
        if (head->nxt) 
        {
            printf("""");
        }
        head = head->nxt;
    }
}

int main() 
{
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* curr = NULL;

    for (int i = 0; i < numNodes; i++) 
    {
        int val;
        scanf(""%d"", &val);
        if (!head) 
        {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->val = val;
            head->nxt = NULL;
            curr = head;
        } 
        else 
        {
            curr->nxt = (struct Node*)malloc(sizeof(struct Node));
            curr = curr->nxt;
            curr->val = val;
            curr->nxt = NULL;
        }
    }
    struct Node* reverse = reverseLinkedList(head);
    displayList(reverse);
    while (reverse) 
    {
        struct Node* temp = reverse;
        reverse = reverse->nxt;
        free(temp);
    }
    return 0;
}"
22742780,PES1UG22CS187,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}"
22742780,PES1UG22CS187,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void displayList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        if (head->next) {
            printf("""");
        }
        head = head->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);
        if (!head) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->value = value;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->value = value;
            current->next = NULL;
        }
    }

    struct Node* reversedList = reverseLinkedList(head);
    displayList(reversedList);

    // Free memory
    while (reversedList) {
        struct Node* temp = reversedList;
        reversedList = reversedList->next;
        free(temp);
    }

    return 0;
}"
22742839,PES1UG22CS230,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to create a new term with given coefficient and exponent
struct Term* createTerm(int coefficient, int exponent) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coefficient;
    newTerm->exponent = exponent;
    newTerm->next = NULL;
    return newTerm;
}

// Function to add two polynomials and return the resultant polynomial
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    struct Term* current = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            if (result == NULL) {
                result = createTerm(poly1->coefficient, poly1->exponent);
                current = result;
            } else {
                current->next = createTerm(poly1->coefficient, poly1->exponent);
                current = current->next;
            }
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            if (result == NULL) {
                result = createTerm(poly2->coefficient, poly2->exponent);
                current = result;
            } else {
                current->next = createTerm(poly2->coefficient, poly2->exponent);
                current = current->next;
            }
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (result == NULL) {
                result = createTerm(sum, poly1->exponent);
                current = result;
            } else {
                current->next = createTerm(sum, poly1->exponent);
                current = current->next;
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        if (result == NULL) {
            result = createTerm(poly1->coefficient, poly1->exponent);
            current = result;
        } else {
            current->next = createTerm(poly1->coefficient, poly1->exponent);
            current = current->next;
        }
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        if (result == NULL) {
            result = createTerm(poly2->coefficient, poly2->exponent);
            current = result;
        } else {
            current->next = createTerm(poly2->coefficient, poly2->exponent);
            current = current->next;
        }
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the coefficients of the polynomial in the order of highest degree to lowest
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);

        if (i < n) {
            if (poly1 == NULL) {
                poly1 = createTerm(coefficient, exponent);
            } else {
                struct Term* current = poly1;
                while (current->next != NULL) {
                    current = current->next;
                }
                current->next = createTerm(coefficient, exponent);
            }
        } else {
            if (poly2 == NULL) {
                poly2 = createTerm(coefficient, exponent);
            } else {
                struct Term* current = poly2;
                while (current->next != NULL) {
                    current = current->next;
                }
                current->next = createTerm(coefficient, exponent);
            }
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22742839,PES1UG22CS230,Reversing a Linked List,15,"
#include <stdio.h>
#include <stdlib.h>

// Structure for a LinkedList Node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new Node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to reverse the LinkedList
void reverseLinkedList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    *head = prev;
}

// Function to print the LinkedList
void printLinkedList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf(""%d"", temp->data);
        temp = temp->next;
    }
}

// Main function
int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* temp = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        if (head == NULL) {
            head = createNode(data);
            temp = head;
        } else {
            temp->next = createNode(data);
            temp = temp->next;
        }
    }

    reverseLinkedList(&head);
    printLinkedList(head);

    return 0;
}"
22806666,ecamorais141,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int exp;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->exp = exp;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    if (*poly == NULL) {
        *poly = newNode;
    } else {
        struct Node* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node** result) {
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertNode(result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertNode(result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            insertNode(result, poly1->coeff + poly2->coeff, poly1->exp);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertNode(result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertNode(result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertNode(&poly1, coeff, exp);
        } else {
            insertNode(&poly2, coeff, exp);
        }
    }

    struct Node* result = NULL;
    addPolynomials(poly1, poly2, &result);

    printPolynomial(result);

    return 0;
}
"
22806666,ecamorais141,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void reverseLinkedList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* nextNode = NULL;
    
    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    
    *head = prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertNode(&head, data);
    }

    reverseLinkedList(&head);
    printLinkedList(head);

    return 0;
}
"
22818499,PES1UG22CS202,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
    typedef struct node{
        int coe;
        int pow;
        struct node* next;
    }NODE;
    NODE* create(int c,int p){
        NODE* po=malloc(sizeof(NODE));
        po->coe=c;
        po->pow=p;
        po->next=NULL;
        return po;
    }
    NODE* createlist(NODE* head,int c,int p){
        if(head==NULL){
            NODE* a1;
            a1=create(c,p);
            return a1;
        }
        else{
            NODE* temp;
            NODE* a1;
            temp=head;
            while(temp->next!=NULL){
                temp=temp->next;
            }
            a1=create(c,p);
            temp->next=a1;
            return head;
        }
    }
    void find(NODE* head){
        int a[50]={0};
        NODE* temp;
        temp=head;
        while(temp!=NULL){
            a[temp->pow]+=temp->coe;
            temp=temp->next;
        }
        temp=head;
        for(int i=49;i>=0;i--){
            if(a[i]!=0){
                printf(""%d "",a[i]);
            }
        }
    }
    int main(){
        int n,m,a,b;
        NODE* head=NULL;
        scanf(""%d%d"",&n,&m);
        for(int i=0;i<n+m;i++){
            scanf(""%d%d"",&a,&b);
            head=createlist(head,a,b);
        }
        find(head);
        return 0;
    }

"
22818499,PES1UG22CS202,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next_node;
    
    while (current != NULL) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }
    
    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int num_nodes;
    scanf(""%d"", &num_nodes);
    
    struct Node* head = NULL;
    struct Node* current = NULL;
    
    for (int i = 0; i < num_nodes; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head == NULL) {
            head = new_node;
            current = new_node;
        } else {
            current->next = new_node;
            current = new_node;
        }
    }
    
    head = reverseLinkedList(head);
    printLinkedList(head);
    
    return 0;
}
"
22831263,PES1UG22CS241,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int exp;
    struct Node *next;
};

struct Node *createNode(int coeff, int exp) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->exp = exp;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node **poly, int coeff, int exp) {
    struct Node *newNode = createNode(coeff, exp);
    if (*poly == NULL) {
        *poly = newNode;
    } else {
        struct Node *temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

struct Node *addPolynomials(struct Node *poly1, struct Node *poly2) {
    struct Node *result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp == poly2->exp) {
            insertNode(&result, poly1->coeff + poly2->coeff, poly1->exp);
            poly1 = poly1->next;
            poly2 = poly2->next;
        } else if (poly1->exp > poly2->exp) {
            insertNode(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else {
            insertNode(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertNode(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertNode(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }
    
    return result;
}

void displayPolynomial(struct Node *poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node *poly1 = NULL;
    struct Node *poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertNode(&poly1, coeff, exp);
        } else {
            insertNode(&poly2, coeff, exp);
        }
    }

    struct Node *result = addPolynomials(poly1, poly2);
    displayPolynomial(result);

    return 0;
}"
22831263,PES1UG22CS241,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next_node;
    
    while (current != NULL) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }
    
    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int num_nodes;
    scanf(""%d"", &num_nodes);
    
    struct Node* head = NULL;
    struct Node* current = NULL;
    
    for (int i = 0; i < num_nodes; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head == NULL) {
            head = new_node;
            current = new_node;
        } else {
            current->next = new_node;
            current = new_node;
        }
    }
    
    head = reverseLinkedList(head);
    printLinkedList(head);
    
    return 0;
}"
22835713,PES1UG22CS228,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node* next;
}Node;

Node* reverseList(Node* head){
    Node* next = NULL;
    Node* info = head;
    Node* prev = NULL;
    
    while(info){
        next = info->next;
        info->next = prev;
        prev = info;
        info = next;
    }
    return prev;
}
Node* create_node(int data){
    Node* new_node = (Node*) malloc(sizeof(Node));
    new_node->next = NULL;
    new_node->data = data;
    return new_node;
}

void display(Node* head){
    while(head){
        printf(""%d"",head->data);
        head = head->next;
    }
}

Node* createLinkedList(int n){
    Node* first = create_node(0);
    Node* firstp = first;
    while(n--){
        int data;
        scanf(""%d"",&data);
        Node* new_node = create_node(data);
        firstp->next = new_node;
        firstp = firstp->next;
    }
    first = first->next;
    return first;
}

int main() {
    int n;
    scanf(""%d"",&n);
    Node* head = createLinkedList(n);
    Node* rev = reverseList(head);
    display(rev);
     
    return 0;
}"
22835764,dhanushgaja22fhg,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
typedef struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
} Term;

// Function to insert a term into the linked list
Term *insertTerm(Term *head, int coeff, int expo) {
    Term *newTerm = (Term *)malloc(sizeof(Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = expo;
    newTerm->next = NULL;

    if (head == NULL) {
        return newTerm;
    }

    Term *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;

    return head;
}

// Function to add two polynomials represented as linked lists
Term *addPolynomials(Term *poly1, Term *poly2) {
    Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                result = insertTerm(result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(Term *head) {
    Term *temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly1 = insertTerm(poly1, coeff, expo);
    }

    for (int i = 0; i < m; i++) {
        int coeff, expo;
        scanf(""%d %d"", &coeff, &expo);
        poly2 = insertTerm(poly2, coeff, expo);
    }

    Term *result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    // Free memory
    while (poly1 != NULL) {
        Term *temp = poly1;
        poly1 = poly1->next;
        free(temp);
    }
    while (poly2 != NULL) {
        Term *temp = poly2;
        poly2 = poly2->next;
        free(temp);
    }
    while (result != NULL) {
        Term *temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"