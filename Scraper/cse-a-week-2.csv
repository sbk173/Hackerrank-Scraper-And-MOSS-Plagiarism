studentId,studentUserName,challenge,score,code
22611658,pes1202202160,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Term{

    int coef;
    int expo;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coef = coeff;
    newTerm->expo = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->expo > poly2->expo) 
        {
            insertTerm(&result, poly1->coef, poly1->expo);
            poly1 = poly1->next;
        }
        else if (poly1->expo < poly2->expo) 
        {
            insertTerm(&result, poly2->coef, poly2->expo);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coef + poly2->coef;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->expo);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coef, poly1->expo);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coef, poly2->expo);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coef);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}
"
22611658,pes1202202160,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


typedef struct Node {
    int data;
    struct Node *next;
} Node;

Node *create_node(int data) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    return node;
}

void printList(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n""); 
}

void splitList(Node *head, Node **first, Node **second) {
    Node *slow = head;
    Node *fast = head;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        if (fast != NULL) {
            slow = slow->next;
        }
    }

    *first = head;
    *second = slow->next;
    slow->next = NULL;
}

int main() {
    int n, data;
    scanf(""%d"", &n);

    Node *head = NULL, *back = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &data);
        if (head == NULL) {
            head = create_node(data);
            back = head;
        } else {
            back->next = create_node(data);
            back = back->next;
        }
    }

    Node *first, *second;
    splitList(head, &first, &second);

    printList(first);
    printList(second);
return 0;
}

  "
22611966,pes1202203263,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}
"
22611966,pes1202203263,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node{
    int data;
    struct node* next;
}n;
n* create(int ele){
    n* head=malloc(sizeof(struct node));
    head->data=ele;
    head->next=NULL;
    return head;
}
n* insertend(n* head, int ele)
{
    n* nod = create(ele);
    if (head == NULL)
        head = nod;
    else
    {
        n* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = nod;
    }
    return head;
}

int pointer(n* head){
    int ptr=0;
    while((head->next!=NULL)&&(head->next->next!=NULL)){
        ptr++;
        head=head->next->next;
    }return ptr;
}
int main() {
    n* head=NULL;
    int n;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++){
        int ele;
        scanf(""%d"",&ele);
        head=insertend(head,ele);
    }
    int num = pointer(head);
    int counter=0;
    while(head!=NULL){
        printf(""%d "",head->data);
        if(counter==num)
            printf(""\n"");
        counter++;
        head=head->next;
    }
    return 0;
}
"
22612357,pes1202202183,Polynomial Addition,0,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node
{
    int coefficient;
    int index;
    struct node* link;
};

struct node* add(struct node* head, int coefficient, int index);
void display(struct node* head);


int main()
{

    int n,m;
    int coeff;
    int indice;
    struct node* head = NULL;
    scanf(""%d %d"", &n, &m);
    for(int i=0; i<n+m ; i++)
    {
        scanf(""%d %d"", &coeff, &indice);
        head = add(head,coeff,indice);
    }
    display(head);
    return 0;
}

struct node* add(struct node* head, int coefficient, int index)
{
    struct node* parser = head;
    struct node* temp = malloc(sizeof(struct node));
    if(head==NULL)
    {
        head->coefficient = coefficient;
        head->index = index;
        return temp;
    }
    
    while(parser->index > index)
    {
        if(parser->link == NULL)
        {
            break;
        }
        parser =parser->link;
        
    }
    if(parser->index == index)
    {
        parser->coefficient = parser->coefficient + coefficient;
    }
    else
    {
        temp->index = index;
        temp->coefficient = coefficient;
        temp->link = parser->link;
        parser->link= temp;
    }
    return head;
}

void display(struct node* head)
{
    if(head==NULL)
    {
        printf(""empty"");
    }
    while(head)
    {
        printf(""%d "", head->coefficient);
        
        head = head->link;
    }
}"
22612357,pes1202202183,Divide Linked List 2,7.5,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node* link;
};

struct node* push(struct node* head,int  data);
struct node* split(struct node* head);
void display(struct node* head);

int main() 
{
    int l;
    int temp;
    struct node* head =NULL;
    struct node* tail =malloc(sizeof(struct node));
    scanf(""%d"", &l);
    for(int i=0;i<l;i++)
    {
        scanf(""%d"", &temp);
        head = push(head, temp);
    }
    
    tail=split(head);
    display(head);
    printf(""\n"");
    display(tail);
     
    return 0;
}

struct node* push(struct node* head,int  data)
{
    struct node* temp=malloc(sizeof(struct node));
    temp->data = data;
    temp->link =NULL;
    if(head==NULL)
    {
        return temp;
    }
    
    else
    {
        struct node* p=head;
        while(p->link!=NULL)
        {
            p=p->link;
        }
        p->link=temp;
    }
    
    return head;
}

void display(struct node* head)
{
    while(head)
    {
        printf(""%d "", head->data);
        head=head->link;
    }
}

struct node* split(struct node* head)
{
    struct node* temp1 = head;
    struct node* temp2 = head;
    
    while(temp1->link!=NULL)
    {
        temp1=temp1->link->link;
        temp2 = temp2->link;
    }
    
    temp1=temp2->link;
    temp2->link=0;
    
    return temp1;
}"
22613210,pes1202201178,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


typedef struct node
{
    int coeff;
    int power;
    struct node *next;
} Node;


// Function definitions

// Function to create a node
Node *create_node(int coeff, int power)
{
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->power = power;
    node->next = NULL;
    return node;
}

// Function to insrt a node into the list
void insertNode(Node **head, int coeff, int power)
{
    Node *node = create_node(coeff, power);
    if (*head == NULL)
    {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL)
    {
        temp = temp->next;
    }
    temp->next = node;
}

// Function to display the sum
void displayList(Node *head)
{
    while (head != NULL)
    {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

// Function to add the list
Node *addList(Node *p1, Node *p2)
{
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL)
    {
        if (p1->power > p2->power)
        {
            insertNode(&result, p1->coeff, p1->power);
            p1 = p1->next;
        } 
        else if (p1->power < p2->power)
        {
            insertNode(&result, p2->coeff, p2->power);
            p2 = p2->next;
        } 
        else
        {
            insertNode(&result, p1->coeff + p2->coeff, p1->power);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL)
    {
        insertNode(&result, p1->coeff, p1->power);
        p1 = p1->next;
    }
    while (p2 != NULL)
    {
        insertNode(&result, p2->coeff, p2->power);
        p2 = p2->next;
    }
    return result;
}


int main()
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        insertNode(&p1, coeff, power);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        insertNode(&p2, coeff, power);
    }
    
    Node *result = addList(p1, p2);
    
    displayList(result);

    return 0;
}
"
22613210,pes1202201178,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

// Structure of a node in the integer linked list
typedef struct node 
{
    int data;
    struct node* link;
} Node;


// Function definitions

// Function to insert a node into the linked list
Node* insertNode(Node* head, int info)
{
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL)
    {
        printf(""Memory allocation failed\n"");
        return head;
    }

    newNode->data = info;
    newNode->link = NULL;

    if (head == NULL)
    {
        return newNode;
    }
    else
    {
        Node* current = head;
        while (current->link != NULL)
        {
            current = current->link;
        }
        current->link = newNode;
    }

    return head;
}

// Function to read inputs
void readList(int n, Node** head)
{
    if (n < 1)
    {
        return;   
    }
    
    int x;
    for (int i = 1; i <= n; i++)
    {
        scanf(""%d"", &x);
        *head = insertNode(*head, x);
    }
}

// Function to split the list
void splitList(Node* head, Node** head1, Node** head2)
{
    if (head == NULL)
    {
        *head1 = NULL;
        *head2 = NULL;
        return;
    }
    
    Node* slow = head;
    Node* fast = head->link;

    while (fast != NULL && fast->link != NULL)
    {
        slow = slow->link;
        fast = fast->link->link;
    }

    *head1 = head;
    *head2 = slow->link;
    slow->link = NULL;
}

// Function to display all elements of the linked list
void displayList(Node* head)
{
    Node* temp = head;
    if (temp == NULL)
    {
        return;
    }
    while (temp != NULL)
    {
        printf(""%d "", temp->data);
        temp = temp->link;
    }
    printf(""\n"");
}


int main()
{
    int n;
    scanf(""%d"", &n);

    Node* head = NULL;
    readList(n, &head);

    Node* head1 = NULL;
    Node* head2 = NULL;
    splitList(head, &head1, &head2);

    displayList(head1);
    displayList(head2);

    return 0;
}"
22613326,pes1202201050,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to insert a new term into the polynomial
void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Add any remaining terms from poly1 or poly2
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}
"
22613326,pes1202201050,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to find the midpoint of the linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head->next;
    
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

// Function to split the linked list into two parts at the given node
void splitLinkedList(struct Node* midNode, struct Node** head1, struct Node** head2) {
    if (midNode == NULL) {
        return;
    }
    
    *head1 = midNode->next;
    midNode->next = NULL;
    *head2 = midNode->next;
}

// Function to print the elements of a linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }
    
    struct Node* midNode = findMidpoint(head);
    
    struct Node* head1 = head;
    struct Node* head2 = midNode->next;
    midNode->next = NULL;
    
    printList(head1);
    printList(head2);
    
    return 0;
}
"
22614304,pes1202202251,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Polynomial{
    int coefficient;
    int exponent;
    struct Polynomial* next;
};

void insertPolynomial(struct Polynomial** Poly, int coeff, int exp){
    struct Polynomial* newPolynomial = (struct Polynomial*)malloc(sizeof(struct Polynomial));
    newPolynomial->coefficient = coeff;
    newPolynomial->exponent = exp;
    newPolynomial->next = NULL;
    if(*Poly == NULL){
        *Poly = newPolynomial;
    }
    else{
        struct Polynomial* current = *Poly;

        while (current->next != NULL){
            current = current->next;
        }
        current->next = newPolynomial;
    }
}

struct Polynomial* addPolynomial(struct Polynomial* polynomial1, struct Polynomial* polynomial2){
    struct Polynomial* Result = NULL;
    while(polynomial1 != NULL || polynomial2 != NULL){
        if(polynomial1 == NULL || (polynomial2 != NULL && polynomial2->exponent > polynomial1->exponent)){
            insertPolynomial(&Result, polynomial2->coefficient, polynomial2->exponent);
            polynomial2 = polynomial2->next;
        }
        else if(polynomial2 == NULL || (polynomial1 != NULL && polynomial1->exponent > polynomial2->exponent)){
            insertPolynomial(&Result, polynomial1->coefficient, polynomial1->exponent);
            polynomial1 = polynomial1->next;
        }
        else{
            int sumCoefficient = polynomial1->coefficient + polynomial2->coefficient;
            if (sumCoefficient != 0){
                insertPolynomial(&Result, sumCoefficient, polynomial1->exponent);
            }
            polynomial1 = polynomial1->next;
            polynomial2 = polynomial2->next;
        }
    }
    return Result;
}

void display(struct Polynomial* Poly){
    while (Poly != NULL){
        printf(""%d "", Poly->coefficient);
        Poly = Poly->next;
    }
}

int main(){
    int n, m; // Number of terms of the Polynomials
    scanf(""%d %d"", &n, &m);
    struct Polynomial* poly1 = NULL;
    struct Polynomial* poly2 = NULL;
    for (int i = 0; i < (m + n); i++){
        int coefficient1, exponent1;
        scanf(""%d %d"", &coefficient1, &exponent1);
        if(i < n){
            insertPolynomial(&poly1, coefficient1, exponent1);
        }
        else{
            insertPolynomial(&poly2, coefficient1, exponent1);
        }
    }
    struct Polynomial* Result = addPolynomial(poly1, poly2);
    display(Result);
    return 0;
}"
22614304,pes1202202251,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct Node{
    int data;
    struct Node *next;
} Fast;

Fast *createNode(int element){
    Fast *fast = (Fast *)malloc(sizeof(Fast));
    fast->data = element;
    fast->next = NULL;
    return fast;
}

void display(Fast *head){
    while (head != NULL){
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

void SplitList(Fast *head, Fast **firstSeg, Fast **secondSeg){
    Fast *slow = head;
    Fast *fast = head;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        if (fast != NULL) {
            slow = slow->next;
        }
    }

    *firstSeg = head;
    *secondSeg = slow->next;
    slow->next = NULL;
}

int main() {
    int n; // number of nodes in the linked list
    int element; // To take the elements of the linked list
    scanf(""%d"",&n);
    Fast *head = NULL , *tail = NULL;
    for(int i = 0; i < n; i++){
        scanf(""%d"",&element);
        if(head == NULL){
            head = createNode(element);
            tail = head;
        }
        else{
            tail->next = createNode(element);
            tail = tail->next;
        }
    }
    Fast *firstSegment, *secondSegment;
    SplitList(head, &firstSegment, &secondSegment);
    display(firstSegment);
    display(secondSegment);
    return 0;
}
"
22614870,pes1202201283,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *createNode(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insertNode(Node **head, int coeff, int pow) {
    Node *node = createNode(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void displayList(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insertNode(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insertNode(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insertNode(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insertNode(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insertNode(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insertNode(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insertNode(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    displayList(result);
}
"
22614870,pes1202201283,Divide Linked List 2,15,"typedef struct NODE {
    int info;
    struct NODE* link;
    
}NODE;

#include ""stdio.h""
#include ""stdlib.h""

//Reversal of a List
NODE* createNode(int info){
    NODE* MyNode=(NODE*) malloc(sizeof(NODE));
    MyNode->info=info;
    MyNode->link=NULL;
    
    return MyNode;
}
//Stack Implementation of Node or Linked List
NODE* nodeStacker(NODE* head, int info){
    NODE* myNewHead=createNode(info);
        myNewHead->link = head;
        head = myNewHead;
    return head;
}
NODE* insertNode(NODE* head, int info){
    
    /*
     Allocate memory, for newNode, Assign Info to newNode, If LinkedList does not exist, create the new Node, Else, Traverse Till End of List
     If LinkedList does not exist, it means Head is NULL.
     */
    
    
    
    if (head==NULL) {
        NODE* myNode=createNode(info);
        return myNode;
    } else {
        NODE* myNode=createNode(info);
        NODE* currentLast=head;
        while (currentLast->link!=NULL) {
            currentLast=currentLast->link;
        }
        currentLast->link=myNode;
        
    }
    
    return head;
    
}
void clearNode(NODE* head){
    NODE* previous=NULL;
    NODE* current=head;
    if (head==NULL) {
    } else {
        while (current->link!=NULL) {
            previous=current;
            current=current->link;
            free(previous);
        }
        free(previous);
    }
    
}
NODE* nodeScanner(NODE* head, int size){
    int myTempValue;
    while (size--) {
        scanf(""%d"", &myTempValue);
        head=insertNode(head, myTempValue);
    }
    return head;
}
NODE* firstHalfer(NODE* head, int midWayNodeLocation){
    NODE* myFirstHalf=NULL;
    NODE* myTemp=head;
    while (midWayNodeLocation--) {
        myFirstHalf=insertNode(myFirstHalf, myTemp->info);
        myTemp=myTemp->link;
    }
    return myFirstHalf;
}
NODE* secondHalfer(NODE* head, int midWayNodeLocation){
    NODE* mySecondHalf=NULL;
    NODE* myTemp=head;
    while (midWayNodeLocation-- && myTemp!=NULL) {
        myTemp=myTemp->link;
    }
    mySecondHalf=myTemp;
    return mySecondHalf;
        
    }

void displayNode(NODE* head){
    NODE* current=head;
    if (head==NULL) {
    } else {
        while (current!=NULL) {
            printf(""%d\t"", current->info);
            current = current->link;
        }
    }
    printf(""\n"");
}
int main(void){
    int sizeOfLL;
    scanf(""%d"", &sizeOfLL);
    int midWayNodeLoaction;
    if (sizeOfLL%2==0) {
        midWayNodeLoaction=sizeOfLL/2;
    } else {
        midWayNodeLoaction=sizeOfLL/2+1;
    }
    NODE* head=NULL;
    head=nodeScanner(head, sizeOfLL);
    NODE* myFirstHalf=firstHalfer(head, midWayNodeLoaction);
    displayNode(myFirstHalf);
    NODE* mySecondHalf=secondHalfer(head, midWayNodeLoaction);
    displayNode(mySecondHalf);
}"
22615160,PES1202202271,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coefficient;
    int power;
    struct Node *next;
} Node;

Node *createNode(int coefficient, int power) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coefficient = coefficient;
    node->power = power;
    node->next = NULL;
    return node;
}

void insertNode(Node **head, int coefficient, int power) {
    Node *node = createNode(coefficient, power);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void printList(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coefficient);
        head = head->next;
    }
}

Node *addPolynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->power > p2->power) {
            insertNode(&result, p1->coefficient, p1->power);
            p1 = p1->next;
        } else if (p1->power < p2->power) {
            insertNode(&result, p2->coefficient, p2->power);
            p2 = p2->next;
        } else {
            insertNode(&result, p1->coefficient + p2->coefficient, p1->power);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insertNode(&result, p1->coefficient, p1->power);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insertNode(&result, p2->coefficient, p2->power);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coefficient, power;
        scanf(""%d %d"", &coefficient, &power);
        insertNode(&p1, coefficient, power);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coefficient, power;
        scanf(""%d %d"", &coefficient, &power);
        insertNode(&p2, coefficient, power);
    }
    
    Node *result = addPolynomials(p1, p2);
    
    printList(result);

    return 0;
}
"
22615160,PES1202202271,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *next;
} Node;

Node *create_node(int data) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    return node;
}

void PrintList(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

void SplitList(Node *head, Node **first_half, Node **second_half) {
    Node *slow = head;
    Node *fast = head;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        if (fast != NULL) {
            slow = slow->next;
        }
    }

    *first_half = head;
    *second_half = slow->next;
    slow->next = NULL;
}

int main() {
    int n, data;
    scanf(""%d"", &n);

    Node *head = NULL, *tail = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &data);
        if (head == NULL) {
            head = create_node(data);
            tail = head;
        } else {
            tail->next = create_node(data);
            tail = tail->next;
        }
    }

    Node *first_half, *second_half;
    SplitList(head, &first_half, &second_half);

    PrintList(first_half);
    PrintList(second_half);
return 0;
}"
22616487,pes1202203761,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}
"
22616487,pes1202203761,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *next;
} Node;

Node *create_node(int data) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    return node;
}

void PrintList(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

void SplitList(Node *head, Node **first_half, Node **second_half) {
    Node *slow = head;
    Node *fast = head;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        if (fast != NULL) {
            slow = slow->next;
        }
    }

    *first_half = head;
    *second_half = slow->next;
    slow->next = NULL;
}

int main() {
    int n, data;
    scanf(""%d"", &n);

    Node *head = NULL, *tail = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &data);
        if (head == NULL) {
            head = create_node(data);
            tail = head;
        } else {
            tail->next = create_node(data);
            tail = tail->next;
        }
    }

    Node *first_half, *second_half;
    SplitList(head, &first_half, &second_half);

    PrintList(first_half);
    PrintList(second_half);
return 0;
}
"
22639359,pes1202203421,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node
{
   int coff;
   int exp;
   struct node* link;
};

struct node* createNode(int coff, int exp) {
    struct node* node1 = (struct node*)malloc(sizeof(struct node));
    node1->coff = coff;
    node1->exp = exp;
    node1->link = NULL;
    return node1;
}

void insertEle(struct node** head, int coff, int exp) {
    struct node* node1 = createNode(coff, exp);
    if (*head == NULL) {
        *head = node1;
        return;
    }
    struct node* temp = *head;
    while (temp->link != NULL) {
        temp = temp->link;
    }
    temp->link= node1;
}

struct node* Total(struct node* p1,struct node* p2)
{ 
    struct node* result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->exp > p2->exp) {
            insertEle(&result, p1->coff, p1->exp);
            p1 = p1->link;
        } else if (p1->exp < p2->exp) {
            insertEle(&result, p2->coff, p2->exp);
            p2 = p2->link;
        } else {
            insertEle(&result, p1->coff + p2->coff, p1->exp);
            p1 = p1->link;
            p2 = p2->link;
        }
    }
    while (p1 != NULL) {
        insertEle(&result, p1->coff, p1->exp);
        p1 = p1->link;
    }
    while (p2 != NULL) {
        insertEle(&result, p2->coff, p2->exp);
        p2 = p2->link;
    }
    return result;
}

void displayList(struct node* head) {
    while (head != NULL) {
        printf(""%d "", head->coff);
        head = head->link;
    }
}


int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct node* p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coff, exp;
        scanf(""%d %d"", &coff, &exp);
        insertEle(&p1, coff, exp);
    }

    struct node* p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coff, exp;
        scanf(""%d %d"", &coff, &exp);
        insertEle(&p2, coff, exp);
    }

    struct node* result = Total(p1, p2);

    displayList(result);
}


"
22639359,pes1202203421,Divide Linked List 2,15,"#include ""stdio.h""
#include ""stdlib.h""

struct NODE 
{
    int info;
    struct NODE* link;

};


 struct NODE* createNode(int info){
    struct NODE* MyNode=(struct NODE*) malloc(sizeof(struct NODE));
    MyNode->info=info;
    MyNode->link=NULL;

    return MyNode;
}

struct NODE* nodeStacker(struct NODE* head, int info){
    struct NODE* myNewHead=createNode(info);
        myNewHead->link = head;
        head = myNewHead;
    return head;
}
struct NODE* insertNode(struct NODE* head, int info)
{

    if (head==NULL) {
        struct NODE* myNode=createNode(info);
        return myNode;
    } else {
        struct NODE* myNode=createNode(info);
        struct NODE* currentLast=head;
        while (currentLast->link!=NULL) {
            currentLast=currentLast->link;
        }
        currentLast->link=myNode;

    }

    return head;

}
void clearNode(struct NODE* head){
    struct NODE* previous=NULL;
    struct NODE* current=head;
    if (head==NULL) {
    } else {
        while (current->link!=NULL) {
            previous=current;
            current=current->link;
            free(previous);
        }
        free(previous);
    }

}
struct NODE* nodeScanner(struct NODE* head, int size){
    int myTempValue;
    while (size--) {
        scanf(""%d"", &myTempValue);
        head=insertNode(head, myTempValue);
    }
    return head;
}
struct NODE* firstHalf(struct NODE* head, int midWayNodeLocation){
    struct NODE* myFirstHalf=NULL;
    struct NODE* myTemp=head;
    while (midWayNodeLocation--) {
        myFirstHalf=insertNode(myFirstHalf, myTemp->info);
        myTemp=myTemp->link;
    }
    return myFirstHalf;
}
struct NODE* secondHalf(struct NODE* head, int midWayNodeLocation){
    struct NODE* mySecondHalf=NULL;
    struct NODE* myTemp=head;
    while (midWayNodeLocation-- && myTemp!=NULL) {
        myTemp=myTemp->link;
    }
    mySecondHalf=myTemp;
    return mySecondHalf;

    }

void displayNode(struct NODE* head){
    struct NODE* current=head;
    if (head==NULL) {
    } else {
        while (current!=NULL) {
            printf(""%d\t"", current->info);
            current = current->link;
        }
    }
    printf(""\n"");
}
int main(void)
{
    int n;
    scanf(""%d"", &n);
    int midNode;
    if (n%2==0) {
        midNode=n/2;
    } else {
        midNode=n/2+1;
    }
    struct NODE* head=NULL;
    head=nodeScanner(head, n);
    struct NODE* myFirstHalf=firstHalf(head, midNode);
    displayNode(myFirstHalf);
    struct NODE* mySecondHalf=secondHalf(head, midNode);
    displayNode(mySecondHalf);
}
"
22644724,pes1202200980,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
   
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
   
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
   
    Node *result = add_polynomials(p1, p2);
   
    print_list(result);
}"
22644724,pes1202200980,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct NODE {

    int info;

    struct NODE* link;

   

}NODE;





NODE* createNode(int info){

    NODE* MyNode=(NODE*) malloc(sizeof(NODE));

    MyNode->info=info;

    MyNode->link=NULL;

   

    return MyNode;

}

NODE* nodeStacker(NODE* head, int info){

    NODE* myNewHead=createNode(info);

        myNewHead->link = head;

        head = myNewHead;

    return head;

}

NODE* insertNode(NODE* head, int info){
    if (head==NULL) {

        NODE* myNode=createNode(info);

        return myNode;

    } else {

        NODE* myNode=createNode(info);

        NODE* currentLast=head;

        while (currentLast->link!=NULL) {

            currentLast=currentLast->link;

        }

        currentLast->link=myNode;

       

    }

   

    return head;

   

}

void clearNode(NODE* head){

    NODE* previous=NULL;

    NODE* current=head;

    if (head==NULL) {

    } else {

        while (current->link!=NULL) {

            previous=current;

            current=current->link;

            free(previous);

        }

        free(previous);

    }

   

}

NODE* nodeScanner(NODE* head, int size){

    int myTempValue;

    while (size--) {

        scanf(""%d"", &myTempValue);

        head=insertNode(head, myTempValue);

    }

    return head;

}

NODE* firstHalfer(NODE* head, int midWayNodeLocation){

    NODE* tempHead=NULL;

    while (midWayNodeLocation--) {
        int inf= head->info;
        tempHead= insertNode(tempHead,inf );
head=head->link;
    }

    return tempHead;

}
NODE* secondHalfer(NODE* head, int midWayNodeLocation){

    NODE* tempHead=NULL;

    while (midWayNodeLocation--) {
head=head->link;
    }
    while (head!=NULL) {
int inf= head->info;
        tempHead= insertNode(tempHead,inf );
head=head->link;
    }

    return tempHead;

}
void displayNode(NODE* head){

    NODE* current=head;

    if (head==NULL) {
    } else {

        while (current!=NULL) {

            printf(""%d "", current->info);

            current = current->link;

        }

    }

    printf(""\n"");

}

int main(void){

    int sizeOfLL;

    scanf(""%d"", &sizeOfLL);
    int n2;
    if(sizeOfLL&1){
        n2=(sizeOfLL/2)+ 1;
    }else{
        n2=(sizeOfLL/2);
    }
    if(sizeOfLL!=0){
    NODE* head=NULL;

    head=nodeScanner(head, sizeOfLL);
    NODE* fh = firstHalfer(head,n2);
    NODE* sh =secondHalfer(head,n2);
   
    displayNode(fh);
    displayNode(sh);}
   

}
"
22653196,PES1UG22CS057,Polynomial Addition,15,"
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}"
22653196,PES1UG22CS057,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct NODE {
    int data;
    struct NODE *next;
} NODE;

NODE *create_node(int data) {
    NODE *node = (NODE *)malloc(sizeof(NODE));
    node->data = data;
    node->next = NULL;
    return node;
}

void printList(NODE *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

void HalfList(NODE *head, NODE **first_half, NODE **second_half) {
    NODE *slow = head;
    NODE *fast = head;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        if (fast != NULL) {
            slow = slow->next;
        }
    }

    *first_half = head;
    *second_half = slow->next;
    slow->next = NULL;
}

int main() {
    int n, data;
    scanf(""%d"", &n);

    NODE *head = NULL, *tail = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &data);
        if (head == NULL) {
            head = create_node(data);
            tail = head;
        } else {
            tail->next = create_node(data);
            tail = tail->next;
        }
    }

    NODE *first_half, *second_half;
    HalfList(head, &first_half, &second_half);

    printList(first_half);
    printList(second_half);
return 0;
}"
22664461,PES1202201092,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct node 
{
    int coeff;
    int pow;
    struct node *link;
};

typedef struct node NODE;

NODE *createNode(int coeff, int pow) 
{
    NODE *node = (NODE*)malloc(sizeof(NODE));
    node->coeff = coeff;
    node->pow = pow;
    node->link = NULL;
    return node;
}

void insertNode(NODE **head, int coeff, int pow) 
{
    NODE *node = createNode(coeff, pow);
    if (*head == NULL) 
    {
        *head = node;
        return;
    }
    NODE *temp = *head;
    while (temp->link != NULL)
    {
        temp = temp->link;
    }
    temp->link = node;
}

void display(NODE *head) 
{
    while (head != NULL) 
    {
        printf(""%d "", head->coeff);
        head = head->link;
    }
}

NODE *addPoly(NODE *p1, NODE *p2) 
{
    NODE *result = NULL;
    while (p1 != NULL && p2 != NULL) 
    {
        if (p1->pow > p2->pow) 
        {
            insertNode(&result, p1->coeff, p1->pow);
            p1 = p1->link;
        } else if (p1->pow < p2->pow) 
        {
            insertNode(&result, p2->coeff, p2->pow);
            p2 = p2->link;
        } 
        else 
        {
            insertNode(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->link;
            p2 = p2->link;
        }
    }

    while (p1 != NULL) 
    {
        insertNode(&result, p1->coeff, p1->pow);
        p1 = p1->link;
    }
    while (p2 != NULL) 
    {
        insertNode(&result, p2->coeff, p2->pow);
        p2 = p2->link;
    }
    return result;
}

int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    NODE *p1 = NULL;
    for (int i = 0; i < n; i++) 
    {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insertNode(&p1, coeff, pow);
    }
    
    NODE *p2 = NULL;
    for (int i = 0; i < m; i++) 
    {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insertNode(&p2, coeff, pow);
    }
    
    NODE *result = addPoly(p1, p2);
    
    display(result);

    return 0;
}"
22664461,PES1202201092,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct node 
{
    int data;
    struct node *link;
};

typedef struct node NODE;

NODE *createNode(int data) 
{
    NODE *node = (NODE *)malloc(sizeof(NODE));
    node->data = data;
    node->link = NULL;
    return node;
}

void display(NODE *head) 
{
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->link;
    }
    printf(""\n"");
}

void SplitList(NODE *head, NODE **first_half, NODE **second_half) 
{
    NODE *slow = head;
    NODE *fast = head;

    while (fast != NULL && fast->link != NULL) {
        fast = fast->link->link;
        if (fast != NULL) {
            slow = slow->link;
        }
    }

    *first_half = head;
    *second_half = slow->link;
    slow->link = NULL;
}

int main() 
{
    int num, data;
    scanf(""%d"", &num);

    NODE *head = NULL, *last = NULL;
    for (int i = 0; i < num; i++) 
    {
        scanf(""%d"", &data);
        if (head == NULL) 
        {
            head = createNode(data);
            last = head;
        } 
        else 
        {
            last->link = createNode(data);
            last = last->link;
        }
    }

    NODE *first_half, *second_half;
    SplitList(head, &first_half, &second_half);

    display(first_half);
    display(second_half);
return 0;
}"
22667531,pes1202203538,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct poly {
    int coef;
    int pow;
    struct poly* next;
};

void createNode(struct poly** poly, int coeff, int exp) {
    struct poly* new = (struct poly*)malloc(sizeof(struct poly));
    new->coef = coeff;
    new->pow = exp;
    new->next = NULL;

    if (*poly == NULL) {
        *poly = new;
    } else {
        struct poly* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = new;
    }
}

struct poly* addPolynomials(struct poly* f1, struct poly* f2) {
    struct poly* result = NULL;

    while (f1 != NULL && f2 != NULL) {
        if (f1->pow > f2->pow) {
            createNode(&result, f1->coef, f1->pow);
            f1 = f1->next;
        } else if (f1->pow < f2->pow) {
            createNode(&result, f2->coef, f2->pow);
            f2 = f2->next;
        } else {
            createNode(&result, f1->coef + f2->coef, f1->pow);
            f1 = f1->next;
            f2 = f2->next;
        }
    }

    while (f1 != NULL) {
        createNode(&result, f1->coef, f1->pow);
        f1 = f1->next;
    }
    while (f2 != NULL) {
        createNode(&result, f2->coef, f2->pow);
        f2 = f2->next;
    }
    return result;
}

void display(struct poly* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coef);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct poly* f1 = NULL;
    struct poly* f2 = NULL;
    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            createNode(&f1, coeff, exp);
        } else {
            createNode(&f2, coeff, exp);
        }
    }
    struct poly* result = addPolynomials(f1, f2);
    display(result);
    return 0;
}"
22667531,pes1202203538,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct node {
    int data;
    struct node* next;
};
void insertNode(struct node** head, int info) {
    struct node* newNode = (struct node*)malloc(sizeof(struct node));
    newNode->data = info;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } 
    else {
        struct node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct node *midPoint(struct node *head){
    if(head==NULL || head->next==NULL){return head;}
    struct node *fastpointer = head;
    struct node *normalpointer = head;
    while(fastpointer->next!=NULL && fastpointer->next->next!=NULL){
        normalpointer = normalpointer->next;
        fastpointer = fastpointer->next->next;
    }
    return normalpointer;
}

struct node *split(struct node **head){
    struct node *realmidpoint = midPoint(*head);
    if(realmidpoint==NULL){return NULL;}
    struct node *secondHalf = realmidpoint->next;
    realmidpoint->next = NULL;
    return secondHalf;
}
void display(struct node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}


int main() {
    int size , info;
    scanf(""%d"",&size);
    struct node *head = NULL;
    for(int i = 0; i <size ; i++){
        scanf(""%d"",&info);
        insertNode(&head,info);
    }
    struct node *secondHalflist = split(&head);
    display(head);
    display(secondHalflist);
    return 0;
}
"
22721092,pes1202203288,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *createNode(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insertNode(Node **head, int coeff, int pow) {
    Node *node = createNode(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void printList(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *addPolynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insertNode(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insertNode(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insertNode(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insertNode(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insertNode(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insertNode(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i=0 ;i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insertNode(&p2, coeff, pow);
    }
    
    Node *result = addPolynomials(p1, p2);
    
    printList(result);

    return 0;
}"
22721092,pes1202203288,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *next;
} Node;

Node *createNode(int data) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    return node;
}

void printList(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

void splitList(Node *head, Node **firstHalf, Node **secondHalf) {
    Node *slow = head;
    Node *fast = head;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        if (fast != NULL) {
            slow = slow->next;
        }
    }

    *firstHalf = head;
    *secondHalf = slow->next;
    slow->next = NULL;
}

int main() {
    int n, data;
    scanf(""%d"", &n);

    Node *head = NULL, *tail = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &data);
        if (head == NULL) {
            head = createNode(data);
            tail = head;
        } else {
            tail->next = createNode(data);
            tail = tail->next;
        }
    }

    Node *firstHalf, *secondHalf;
    splitList(head, &firstHalf, &secondHalf);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22729022,pes1202201033,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct poly {
    int coef;
    int pow;
    struct poly* next;
};

void createNode(struct poly** poly, int coeff, int exp) {
    struct poly* new = (struct poly*)malloc(sizeof(struct poly));
    new->coef = coeff;
    new->pow = exp;
    new->next = NULL;

    if (*poly == NULL) {
        *poly = new;
    } else {
        struct poly* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = new;
    }
}

struct poly* addPolynomials(struct poly* f1, struct poly* f2) {
    struct poly* result = NULL;

    while (f1 != NULL && f2 != NULL) {
        if (f1->pow > f2->pow) {
            createNode(&result, f1->coef, f1->pow);
            f1 = f1->next;
        } else if (f1->pow < f2->pow) {
            createNode(&result, f2->coef, f2->pow);
            f2 = f2->next;
        } else {
            createNode(&result, f1->coef + f2->coef, f1->pow);
            f1 = f1->next;
            f2 = f2->next;
        }
    }

    while (f1 != NULL) {
        createNode(&result, f1->coef, f1->pow);
        f1 = f1->next;
    }
    while (f2 != NULL) {
        createNode(&result, f2->coef, f2->pow);
        f2 = f2->next;
    }

    return result;
}

void display(struct poly* poly){
    while (poly != NULL) {
        printf(""%d "", poly->coef);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct poly* f1 = NULL;
    struct poly* f2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            createNode(&f1, coeff, exp);
        } else {
            createNode(&f2, coeff, exp);
        }
    }

    struct poly* result = addPolynomials(f1, f2);

    display(result);

    return 0;
}"
22729022,pes1202201033,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node {
    int info;
    struct node* link;
};


void insertnode(struct node** head, int info) {
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->info = info;
    newnode->link = NULL;

    if (*head == NULL) {
        *head = newnode;
    } else {
        struct node* current = *head;
        while (current->link != NULL) {
            current = current->link;
        }
        current->link = newnode;
    }
}

struct node* findMidpoint(struct node* head) {
    if (head == NULL || head->link == NULL) {
        return head;
    }

    struct node* slow = head;
    struct node* fast = head;

    while (fast->link != NULL && fast->link->link != NULL) {
        slow = slow->link;
        fast = fast->link->link;
    }

    return slow;
}

struct node* splitLinkedList(struct node** head) {
    struct node* midpoint = findMidpoint(*head);

    if (midpoint == NULL) {
        return NULL;
    }

    struct node* secondHalf = midpoint->link;
    midpoint->link = NULL;

    return secondHalf;
}


void printLinkedList(struct node* head) {
    while (head != NULL) {
        printf(""%d "", head->info);
        head = head->link;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertnode(&head, value);
    }

    struct node* secondHalf = splitLinkedList(&head);

    printLinkedList(head);
    printLinkedList(secondHalf);

    return 0;
}"
22730038,PES1202201329,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coefficient;
    int order;
    struct Node *next;
} Node;

Node *create_node(int coefficient, int order) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coefficient = coefficient;
    node->order = order;
    node->next = NULL;
    return node;
}

void Insertion(Node **head, int coefficient, int order) {
    Node *node = create_node(coefficient, order);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void Display(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coefficient);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->order > p2->order) {
            Insertion(&result, p1->coefficient, p1->order);
            p1 = p1->next;
        } else if (p1->order < p2->order) {
            Insertion(&result, p2->coefficient, p2->order);
            p2 = p2->next;
        } else {
            Insertion(&result, p1->coefficient + p2->coefficient, p1->order);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        Insertion(&result, p1->coefficient, p1->order);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        Insertion(&result, p2->coefficient, p2->order);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coefficient, order;
        scanf(""%d %d"", &coefficient, &order);
        Insertion(&p1, coefficient, order);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coefficient, order;
        scanf(""%d %d"", &coefficient, &order);
        Insertion(&p2, coefficient, order);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    Display(result);


}
"
22730038,PES1202201329,Divide Linked List 2,15,"#include<stdio.h>
#include<stdlib.h>
#include<math.h>

typedef struct Structure
{
    int data;
    struct NODE* next;
}NODE;

NODE* Insertion(int e,NODE* head){
    NODE* NewNode=(NODE*)malloc(sizeof(NODE));
    NewNode->data=e;
    NewNode->next=NULL;
    if (head==NULL)
    return NewNode;
    NODE* current=head;
    while(current->next!=NULL){
        current=current->next;
    }
    current->next=NewNode;
    return head;

}

NODE* display(NODE*head,int n){
    NODE*current=head;
    for(int i=1;i<=n;i++){
      printf(""%d "",current->data);
      current=current->next;
    }
    printf(""\n"");
    return current;
}


int main(){
    NODE* head=NULL;
    int info;
    int n;
    

    scanf(""%d"",&n);
        for(int i=0;i<n;i++){
            scanf(""%d"",&info);
            head=Insertion(info,head);
        }
    float num=(float)n;
    int mid=(int)ceil(num/2);
    
    head=display(head,mid);
    display(head,n-mid);
    
    


    
}"
22730062,pes1202201210,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to insert a new term into the polynomial
void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Add any remaining terms from poly1 or poly2
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}
"
22730062,pes1202201210,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to find the midpoint of the linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head->next;
    
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

// Function to split the linked list into two parts at the given node
void splitLinkedList(struct Node* midNode, struct Node** head1, struct Node** head2) {
    if (midNode == NULL) {
        return;
    }
    
    *head1 = midNode->next;
    midNode->next = NULL;
    *head2 = midNode->next;
}

// Function to print the elements of a linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }
    
    struct Node* midNode = findMidpoint(head);
    
    struct Node* head1 = head;
    struct Node* head2 = midNode->next;
    midNode->next = NULL;
    
    printList(head1);
    printList(head2);
    
    return 0;
}"
22730560,pes1202202268,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *make_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = make_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}"
22730560,pes1202202268,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *next;
} Node;

Node *make_node(int data) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    return node;
}

void PrintList(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

void divideList(Node *head, Node **first_half, Node **second_half) {
    Node *slow = head;
    Node *fast = head;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        if (fast != NULL) {
            slow = slow->next;
        }
    }

    *first_half = head;
    *second_half = slow->next;
    slow->next = NULL;
}

int main() 
{
    int n, data;
    scanf(""%d"", &n);

    Node *head = NULL, *tail = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &data);
        if (head == NULL) {
            head = make_node(data);
            tail = head;
        } else {
            tail->next = make_node(data);
            tail = tail->next;
        }
    }

    Node *first_half, *second_half;
    divideList(head, &first_half, &second_half);

    PrintList(first_half);
    PrintList(second_half);
return 0;
}"
22730571,pes1202201029,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}"
22730571,pes1202201029,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int data;
    struct node* next;
}NODE;

NODE* create(int ele)
{
    NODE* head=malloc(sizeof(struct node));
    head->data=ele;
    head->next=NULL;
    return head;
}

NODE* insertend(NODE* head, int ele)
{
    NODE* node = create(ele);
    if (head == NULL)
        head = node;
    else
    {
        NODE* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = node;
    }
    return head;
}

int pointer(NODE* head)
{
    int ptr=0;
    while((head->next!=NULL)&&(head->next->next!=NULL))
    {
        ptr++;
        head=head->next->next;
    }
    return ptr;
}

int main() 
{
    NODE* head=NULL;
    int n;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++){
        int ele;
        scanf(""%d"",&ele);
        head=insertend(head,ele);
    }
    int num = pointer(head);
    int counter=0;
    while(head!=NULL)
    {
        printf(""%d "",head->data);
        if(counter==num)
            printf(""\n"");
        counter++;
        head=head->next;
    }
    return 0;
}"
22730620,PES1202201259,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Poly;

Poly *create_node(int coeff, int pow) {
    Poly *node = (Poly *)malloc(sizeof(Poly));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Poly **head, int coeff, int pow) {
    Poly *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Poly *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Poly *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Poly *add_polynomials(Poly *p1, Poly *p2) {
    Poly *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Poly *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Poly *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Poly *result = add_polynomials(p1, p2);
    
    print_list(result);
}"
22730620,PES1202201259,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

// Structure of a node in the integer linked list
typedef struct node 
{
    int data;
    struct node* link;
} Node;


// Function definitions

// Function to insert a node into the linked list
Node* insertNode(Node* head, int info)
{
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL)
    {
        printf(""Memory allocation failed\n"");
        return head;
    }

    newNode->data = info;
    newNode->link = NULL;

    if (head == NULL)
    {
        return newNode;
    }
    else
    {
        Node* current = head;
        while (current->link != NULL)
        {
            current = current->link;
        }
        current->link = newNode;
    }

    return head;
}

// Function to read inputs
void readList(int n, Node** head)
{
    if (n < 1)
    {
        return;   
    }
    
    int x;
    for (int i = 1; i <= n; i++)
    {
        scanf(""%d"", &x);
        *head = insertNode(*head, x);
    }
}

// Function to split the list
void splitList(Node* head, Node** l1, Node** l2)
{
    if (head == NULL)
    {
        *l1 = NULL;
        *l2 = NULL;
        return;
    }
    
    Node* slow = head;
    Node* fast = head->link;

    while (fast != NULL && fast->link != NULL)
    {
        slow = slow->link;
        fast = fast->link->link;
    }

    *l1 = head;
    *l2 = slow->link;
    slow->link = NULL;
}

// Function to display all elements of the linked list
void displayList(Node* head)
{
    Node* temp = head;
    if (temp == NULL)
    {
        return;
    }
    while (temp != NULL)
    {
        printf(""%d "", temp->data);
        temp = temp->link;
    }
    printf(""\n"");
}


int main()
{
    int n;
    scanf(""%d"", &n);

    Node* head = NULL;
    readList(n, &head);

    Node* head1 = NULL;
    Node* head2 = NULL;
    splitList(head, &head1, &head2);

    displayList(head1);
    displayList(head2);

    return 0;
}"
22737335,pes1202203254,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int exp;
    struct Node *next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->exp = exp;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    if (*poly == NULL) {
        *poly = newNode;
    } else {
        struct Node* current = *poly;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertTerm(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertTerm(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coeff + poly2->coeff, poly1->exp);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }
    return result;
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Node* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
"
22737335,pes1202203254,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* link;
};

void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->link = NULL;
    
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    
    struct Node* temp = *head;
    while (temp->link != NULL) {
        temp = temp->link;
    }
    temp->link = newNode;
}

struct Node* find_midpoint(struct Node* head) {
    if (head == NULL || head->link == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head;
    
    while (fast->link != NULL && fast->link->link != NULL) {
        slow = slow->link;
        fast = fast->link->link;
    }
    
    return slow;
}

void split_list(struct Node* mid, struct Node** head1, struct Node** head2) {
    if (mid == NULL) {
        *head1 = NULL;
        *head2 = NULL;
        return;
    }
    
    *head1 = mid->link;
    *head2 = mid->link->link;
    mid->link = NULL;
}

void print_list(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->link;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insert(&head, data);
    }
    
    struct Node* mid = find_midpoint(head);
    struct Node* head1 = head;
    struct Node* head2 = mid->link;
    mid->link = NULL;
    
    print_list(head1);
    print_list(head2);
    
    return 0;
}"
22739149,pes1202203875,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Term {
    int coeff;
    int power;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coeff, int power) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coeff = coeff;
    newTerm->power = power;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* current = *poly;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newTerm;
    }
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->power > poly2->power) {
            insertTerm(&result, poly1->coeff, poly1->power);
            poly1 = poly1->next;
        } else if (poly1->power < poly2->power) {
            insertTerm(&result, poly2->coeff, poly2->power);
            poly2 = poly2->next;
        } else {
            int sumCoeff = poly1->coeff + poly2->coeff;
            insertTerm(&result, sumCoeff, poly1->power);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coeff, poly1->power);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coeff, poly2->power);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        if (i < n) {
            insertTerm(&poly1, coeff, power);
        } else {
            insertTerm(&poly2, coeff, power);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22739149,pes1202203875,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};


void insertAtEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}


struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}


struct Node* split(struct Node** head) {
    struct Node* midpoint = findMidpoint(*head);
    struct Node* secondHalf = midpoint->next;
    midpoint->next = NULL;
    return secondHalf;
}


void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertAtEnd(&head, data);
    }

    struct Node* secondHalf = split(&head);

    printLinkedList(head);
    printLinkedList(secondHalf);

    return 0;
}"
22743469,pes1202201171,Polynomial Addition,9,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node{
    int coefficient;
    int index;
    struct node* link;
};

struct node* add(struct node* head, int coefficient, int index);
void display(struct node* head);

int main() {
    int n,m;
    int coeff;
    int indice;
    struct node* head = NULL;
    scanf(""%d %d"", &n, &m);
    for(int i=0; i<n+m; i++){
        scanf(""%d %d"", &coeff, &indice);
        head = add(head,coeff,indice);
    }
    display(head);
    return 0;
}

struct node* add(struct node* head, int coefficient, int index){
    struct node* p = head;
    struct node* temp = malloc(sizeof(struct node));
    if(head == NULL){
        temp->coefficient=coefficient;
        temp->index=index;
        return temp;
    }
    else if(head->link == NULL){
        temp->coefficient=coefficient;
        temp->index=index;
        head->link=temp;
        return head;
    }
    struct node* parser = head->link;
    while(parser->index>index){
        if(parser->link==NULL){
            temp->index=index;
            temp->coefficient=coefficient;
            temp->link = NULL;
            parser->link=temp;
            return head;
        }
        parser=parser->link;
        p=p->link;
    }
    if(parser->index==index){
        parser->coefficient = parser->coefficient+coefficient;
    }else{
        temp->index=index;
        temp->coefficient=coefficient;
        temp->link = parser;
        p->link=temp;
    }
    return head;
}

void display(struct node* head){
    if(head==NULL){
        printf(""Empty List"");
    }
    while(head){
        printf(""%d "", head->coefficient);
        head=head->link;
    }
}"
22743469,pes1202201171,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node{
    int data;
    struct node* link;
};

struct node* insert(struct node* head, int data);
struct node* split(struct node* head);
void display(struct node* head);

int main() {
    int listlen;
    int temp;
    struct node* head = NULL;
    struct node* tail = malloc(sizeof(struct node));
    scanf(""%d"", &listlen);
    for(int i=0; i<listlen; i++){
        scanf(""%d"", &temp);
        head = insert(head, temp);
    }
    tail=split(head);
    display(head);
    printf(""\n"");
    display(tail);
    return 0;
}

struct node* insert(struct node* head, int data){
    struct node* temp = malloc(sizeof(struct node));
    temp->data = data;
    temp->link = NULL;
    if(head==NULL){
        return temp;
    }else{
        struct node* p = head;
        while(p->link!=NULL){
            p=p->link;
        }
        p->link=temp;
    }
    return head;
}

void display(struct node* head){
    while(head){
        printf(""%d "", head->data);
        head=head->link;
    }
}

struct node* split(struct node* head){
    struct node* temp1 = head;
    struct node* temp2 = head;
    while(temp1->link!=NULL){
        temp1=temp1->link;
        if(temp1->link!=NULL){
            temp1=temp1->link;
        }else{
            break;
        }
        temp2=temp2->link;
    }
    temp1=temp2->link;
    temp2->link=NULL;
    return temp1;
}"
22743656,pes1202203593,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

   
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}


"
22743656,pes1202203593,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *next;
};
struct node* createNode(int ele)
{
    
    struct node *newNode=(struct node*)malloc(sizeof(struct node));
    newNode->data=ele;
    newNode->next=NULL;
    return newNode;
    
    
}
void insertNode(struct node **head,int ele)
{
    struct node *newNode=createNode(ele);
    if(*head==NULL)
    {
        *head=newNode;
        
    }else{
        struct node* current = *head;
        while(current->next!=NULL)
        {
            current=current->next;
            
        }
        current->next =newNode;
    }
}
void printlist(struct node* head)
{
    struct node *current =head;
    while(current!=NULL)
    {
        printf(""%d "",current->data);
        current =current->next;
    }
    printf(""\n"");
}
 
    
void splitlist(struct node *pre,struct node **first,struct node **second)

{
    struct node *ptr1=pre;
    struct node *ptr2=pre->next;
    
    while (ptr2 != NULL) {
        ptr2 = ptr2->next;
        if (ptr2 != NULL) {
            ptr1 = ptr1->next;
            ptr2 = ptr2->next;
        }
    }

    *first = pre;
    *second = ptr1->next;
    ptr1->next = NULL;
}




    





int main()
{
    int n;
    struct node *head = NULL;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++)
    {
        int ele;
        scanf(""%d"",&ele);
        insertNode(&head,ele);
        
    }
    struct node* first=NULL;
    struct node* second=NULL;
    splitlist(head,&first,&second);
    printlist(first);
    printlist(second);
    return 0;
    
    
}
"
22743849,pes1202201160,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}"
22743849,pes1202201160,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node *next;
} NODE;

NODE *create_node(int data) {
    NODE *node = (NODE *)malloc(sizeof(NODE));
    node->data = data;
    node->next = NULL;
    return node;
}

void printList(NODE *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

void splitList(NODE *head, NODE **first_half, NODE **second_half) {
    NODE *slow = head;
    NODE *fast = head;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        if (fast != NULL) {
            slow = slow->next;
        }
    }

    *first_half = head;
    *second_half = slow->next;
    slow->next = NULL;
}

int main() {
    int n, data;
    scanf(""%d"", &n);

    NODE *head = NULL, *tail = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &data);
        if (head == NULL) {
            head = create_node(data);
            tail = head;
        } else {
            tail->next = create_node(data);
            tail = tail->next;
        }
    }

    NODE *first_half, *second_half;
    splitList(head, &first_half, &second_half);

    printList(first_half);
    printList(second_half);
return 0;
}"
22743960,pes1202201250,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct PolynomialNode {
    int coefficient;
    int exponent;
    struct PolynomialNode *next;
} PolynomialNode;

PolynomialNode *create_polynomial_node(int coefficient, int exponent) {
    PolynomialNode *node = (PolynomialNode *)malloc(sizeof(PolynomialNode));
    node->coefficient = coefficient;
    node->exponent = exponent;
    node->next = NULL;
    return node;
}

void insert_polynomial_node(PolynomialNode **head, int coefficient, int exponent) {
    PolynomialNode *node = create_polynomial_node(coefficient, exponent);
    if (*head == NULL) {
        *head = node;
        return;
    }
    PolynomialNode *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_polynomial(PolynomialNode *head) {
    while (head != NULL) {
        printf(""%d "", head->coefficient);
        head = head->next;
    }
}

PolynomialNode *add_polynomials(PolynomialNode *poly1, PolynomialNode *poly2) {
    PolynomialNode *result = NULL;
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insert_polynomial_node(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insert_polynomial_node(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insert_polynomial_node(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    while (poly1 != NULL) {
        insert_polynomial_node(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insert_polynomial_node(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}

int main() {
    int num_terms1, num_terms2;
    scanf(""%d %d"", &num_terms1, &num_terms2);
    
    PolynomialNode *poly1 = NULL;
    for (int i = 0; i < num_terms1; i++) {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);
        insert_polynomial_node(&poly1, coefficient, exponent);
    }
    
    PolynomialNode *poly2 = NULL;
    for (int i = 0; i < num_terms2; i++) {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);
        insert_polynomial_node(&poly2, coefficient, exponent);
    }
    
    PolynomialNode *result_poly = add_polynomials(poly1, poly2);
    
    print_polynomial(result_poly);
}
"
22743960,pes1202201250,Divide Linked List 2,15,"typedef struct NODE {

    int info;

    struct NODE* link;

    

}NODE;


#include ""stdio.h""

#include ""stdlib.h""


NODE* createNode(int info){

    NODE* MyNode=(NODE*) malloc(sizeof(NODE));

    MyNode->info=info;

    MyNode->link=NULL;

    

    return MyNode;

}

NODE* nodeStacker(NODE* head, int info){

    NODE* myNewHead=createNode(info);

        myNewHead->link = head;

        head = myNewHead;

    return head;

}

NODE* insertNode(NODE* head, int info){
    if (head==NULL) {

        NODE* myNode=createNode(info);

        return myNode;

    } else {

        NODE* myNode=createNode(info);

        NODE* currentLast=head;

        while (currentLast->link!=NULL) {

            currentLast=currentLast->link;

        }

        currentLast->link=myNode;

        

    }

    

    return head;

    

}

void clearNode(NODE* head){

    NODE* previous=NULL;

    NODE* current=head;

    if (head==NULL) {

    } else {

        while (current->link!=NULL) {

            previous=current;

            current=current->link;

            free(previous);

        }

        free(previous);

    }

    

}

NODE* nodeScanner(NODE* head, int size){

    int myTempValue;

    while (size--) {

        scanf(""%d"", &myTempValue);

        head=insertNode(head, myTempValue);

    }

    return head;

}

NODE* firstHalfer(NODE* head, int midWayNodeLocation){

    NODE* tempHead=NULL;

    while (midWayNodeLocation--) {
        int inf= head->info;
        tempHead= insertNode(tempHead,inf );
head=head->link;
    }

    return tempHead;

}
NODE* secondHalfer(NODE* head, int midWayNodeLocation){

    NODE* tempHead=NULL;

    while (midWayNodeLocation--) {
head=head->link;
    }
    while (head!=NULL) {
int inf= head->info;
        tempHead= insertNode(tempHead,inf );
head=head->link;
    }

    return tempHead;

}
void displayNode(NODE* head){

    NODE* current=head;

    if (head==NULL) {
    } else {

        while (current!=NULL) {

            printf(""%d "", current->info);

            current = current->link;

        }

    }

    printf(""\n"");

}

int main(void){

    int sizeOfLL;

    scanf(""%d"", &sizeOfLL);
    int n2;
    if(sizeOfLL&1){
        n2=(sizeOfLL/2)+ 1;
    }else{
        n2=(sizeOfLL/2);
    }
    if(sizeOfLL!=0){
    NODE* head=NULL;

    head=nodeScanner(head, sizeOfLL);
    NODE* fh = firstHalfer(head,n2);
    NODE* sh =secondHalfer(head,n2);
    
    displayNode(fh);
    displayNode(sh);}
    

}

"
22743965,pes1202203870,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to insert a new term into the polynomial
void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Add any remaining terms from poly1 or poly2
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}"
22743965,pes1202203870,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* link;
};

void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->link = NULL;
    
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    
    struct Node* temp = *head;
    while (temp->link != NULL) {
        temp = temp->link;
    }
    temp->link = newNode;
}

struct Node* find_midpoint(struct Node* head) {
    if (head == NULL || head->link == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head;
    
    while (fast->link != NULL && fast->link->link != NULL) {
        slow = slow->link;
        fast = fast->link->link;
    }
    
    return slow;
}

void split_list(struct Node* mid, struct Node** head1, struct Node** head2) {
    if (mid == NULL) {
        *head1 = NULL;
        *head2 = NULL;
        return;
    }
    
    *head1 = mid->link;
    *head2 = mid->link->link;
    mid->link = NULL;
}

void print_list(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->link;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insert(&head, data);
    }
    
    struct Node* mid = find_midpoint(head);
    struct Node* head1 = head;
    struct Node* head2 = mid->link;
    mid->link = NULL;
    
    print_list(head1);
    print_list(head2);
    
    return 0;
}"
22743968,pes1202202067,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    print_list(result);
    return 0;
}"
22743968,pes1202202067,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *next;
} Node;

Node *create_node(int data) {
    Node *node = (Node*)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    return node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

void split_list(Node *head, Node **first_half, Node **second_half) {
    Node *slow = head;
    Node *fast = head;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        if (fast != NULL) {
            slow = slow->next;
        }
    }

    *first_half = head;
    *second_half = slow->next;
    slow->next = NULL;
}

int main() {
    int n, data;
    scanf(""%d"", &n);

    Node *head = NULL, *tail = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &data);
        if (head == NULL) {
            head = create_node(data);
            tail = head;
        } else {
            tail->next = create_node(data);
            tail = tail->next;
        }
    }

    Node *first_half, *second_half;
    split_list(head, &first_half, &second_half);

    print_list(first_half);
    print_list(second_half);

    return 0;
}"
22743970,pes1202203298,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int coeff;
    int power;
    struct node* link;
}NODE;

NODE* insert(NODE* head, int co, int po)
{
    NODE* p= head;
    NODE* newNode = (NODE*)malloc(sizeof(NODE));
    newNode->coeff=co;
    newNode->power=po;
    newNode->link = NULL;
    if(head == NULL)
        return newNode;
    while(p->link!=NULL)
    {
        p = p->link;
    }
        p->link = newNode;
    return head;
}


NODE* add(NODE* h1, NODE* h2)
{
    NODE* res = NULL;
    NODE* p1 = h1;
    NODE* p2 = h2;
    while(p1!=NULL && p2!=NULL)
    {
        if(p1->power > p2->power)
        {
            res = insert(res, p1->coeff, p1->power);
            p1 = p1->link;
        }
        else if(p1->power < p2->power)
        {
            res = insert(res, p2->coeff, p2->power);
            p2 = p2->link;
        }
        else
        {
            res = insert(res, (p1->coeff + p2->coeff), p1->power);
            p1 = p1->link;
            p2 = p2->link;
        }
    }
    
    while(p1!=NULL)
    {
        insert(res, p1->coeff, p1->power);
        p1 = p1->link;
    }
    
    while(p2!=NULL)
    {
        insert(res, p2->coeff, p2->power);
        p2 = p2->link;
    }
    
    return res;
}


void display(NODE* head)
{
    NODE* p=head;
    while(p!=NULL)
    {
        printf(""%d "", p->coeff);
        p = p->link;
    }
    printf(""\n"");
}


int main() {

    int n, m;
    int c, p;
    NODE* h1= (NODE*)malloc(sizeof(NODE));
    NODE* h2= (NODE*)malloc(sizeof(NODE));
    scanf(""%d %d"", &n, &m);
    for(int i=0; i<(n+m); i++)
    {
        scanf(""%d %d"", &c, &p);
        if(i<n)
           insert(h1, c, p);
        else
            insert(h2, c, p);
    }
    NODE* res = add(h1, h2);
    res = res->link;
    display(res);
    return 0;
}
"
22743970,pes1202203298,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


typedef struct node
{
    int data;
    struct node* link;
}NODE;

NODE* split(NODE* head)
{
    NODE* p = head;
    int n=0;
    while(p->link!=NULL)
    {
        n++;
        p=p->link;
    }
    NODE* p2 = head;
    int half;
    if(n%2 ==0)
        half = n/2;
    else
        half = n/2 + 1;
    
    //NODE* p3;
    NODE* p4;
    for(int i=0; i<half; i++)
    {
        p2 = p2->link;
    }
    p4 = p2->link;
    p2->link = NULL;
    return p4;

}


NODE* insert(NODE* head, int n)
{
    NODE* p = head;
    NODE* newNode = (NODE*)malloc(sizeof(NODE));
    newNode->data = n;
    newNode->link = NULL;
    if(head == NULL)
    {
        return newNode;
    }
    while(p->link!=NULL)
    {
        p = p->link;
    }
    p->link = newNode;
    return head;
}

void display(NODE* head)
{
    NODE* p = head;
    while(p!=NULL)
    {
        printf(""%d "", p->data);
        p = p->link;
    }
}

int main() {

    NODE* head = (NODE*)malloc(sizeof(NODE));
    int n;
    scanf(""%d"", &n);
    int inp;
    for(int i=0; i<n; i++)
    {
        scanf(""%d "", &inp);
        head = insert(head, inp);
    }
    NODE* second = split(head);
    head = head->link;
    display(head);
    printf(""\n"");
    display(second);
    return 0;
}
"
22743972,PES1202201291,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}"
22743972,PES1202201291,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node{
    int data;
    struct node* next;
}n;
n* create(int ele){
    n* head=malloc(sizeof(struct node));
    head->data=ele;
    head->next=NULL;
    return head;
}
n* insertend(n* head, int ele)
{
    n* nod = create(ele);
    if (head == NULL)
        head = nod;
    else
    {
        n* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = nod;
    }
    return head;
}

int pointer(n* head){
    int ptr=0;
    while((head->next!=NULL)&&(head->next->next!=NULL)){
        ptr++;
        head=head->next->next;
    }return ptr;
}
int main() {
    n* head=NULL;
    int n;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++){
        int ele;
        scanf(""%d"",&ele);
        head=insertend(head,ele);
    }
    int num = pointer(head);
    int counter=0;
    while(head!=NULL){
        printf(""%d "",head->data);
        if(counter==num)
            printf(""\n"");
        counter++;
        head=head->next;
    }
    return 0;
}"
22743976,PES1202203905,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}"
22743976,PES1202203905,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node{
    int data;
    struct node* next;
}n;
n* create(int ele){
    n* head=malloc(sizeof(struct node));
    head->data=ele;
    head->next=NULL;
    return head;
}
n* insertend(n* head, int ele)
{
    n* nod = create(ele);
    if (head == NULL)
        head = nod;
    else
    {
        n* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = nod;
    }
    return head;
}

int pointer(n* head){
    int ptr=0;
    while((head->next!=NULL)&&(head->next->next!=NULL)){
        ptr++;
        head=head->next->next;
    }return ptr;
}
int main() {
    n* head=NULL;
    int n;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++){
        int ele;
        scanf(""%d"",&ele);
        head=insertend(head,ele);
    }
    int num = pointer(head);
    int counter=0;
    while(head!=NULL){
        printf(""%d "",head->data);
        if(counter==num)
            printf(""\n"");
        counter++;
        head=head->next;
    }
    return 0;
}"
22743977,pes1202203464,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term 
{
    int coeff;
    int power;
    struct Term* next;
};

void insertTerm(struct Term** poly, int coeff, int power) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coeff = coeff;
    newTerm->power = power;
    newTerm->next = NULL;

    if (*poly == NULL) 
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->power > poly2->power) 
        {
            insertTerm(&result, poly1->coeff, poly1->power);
            poly1 = poly1->next;
        } else if (poly1->power < poly2->power) 
        {
            insertTerm(&result, poly2->coeff, poly2->power);
            poly2 = poly2->next;
        } else 
        {
            int sumCoeff = poly1->coeff + poly2->coeff;
            insertTerm(&result, sumCoeff, poly1->power);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coeff, poly1->power);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coeff, poly2->power);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main()
{
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) 
    {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, power);
        } else {
            insertTerm(&poly2, coeff, power);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
"
22743977,pes1202203464,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insertAtEnd(struct Node** head, int data)
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) 
    {
        *head = newNode;
    } else 
    {
        struct Node* current = *head;
        while (current->next != NULL) 
        {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* findMidpoint(struct Node* head)
{
    if (head == NULL || head->next == NULL) 
    {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

struct Node* splitLinkedList(struct Node** head) 
{
    struct Node* midpoint = findMidpoint(*head);
    struct Node* secondHalf = midpoint->next;
    midpoint->next = NULL;
    return secondHalf;
}

void printLinkedList(struct Node* head) 
{
    while (head != NULL)
    {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() 
{
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) 
    {
        int data;
        scanf(""%d"", &data);
        insertAtEnd(&head, data);
    }

    struct Node* secondHalf = splitLinkedList(&head);

    printLinkedList(head);
    printLinkedList(secondHalf);

    return 0;
}
"
22744024,pes1202201900,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct node
{
    int coeff;
    int pow;
    struct Node *next;
};

typedef struct node NODE;

NODE *create_node(int coeff, int pow) 
{
    NODE *node = (NODE*)malloc(sizeof(NODE));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(NODE **head, int coeff, int pow) 
{
    NODE *node = create_node(coeff, pow);
    if (*head == NULL) 
    {
        *head = node;
        return;
    }
    NODE *temp = *head;
    while (temp->next != NULL) 
    {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(NODE *head) 
{
    while (head != NULL) 
    {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

NODE *add_polynomials(NODE *p1, NODE *p2) 
{
    NODE *result = NULL;
    while (p1 != NULL && p2 != NULL) 
    {
        if (p1->pow > p2->pow) 
        {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) 
        {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else 
        {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) 
    {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) 
    {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    NODE *p1 = NULL;
    for (int i = 0; i < n; i++) 
    {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    NODE *p2 = NULL;
    for (int i = 0; i < m; i++) 
    {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    NODE *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}"
22744024,pes1202201900,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct node 
{
    int data;
    struct node *link;
};

typedef struct node NODE;

NODE *createNode(int data) 
{
    NODE *node = (NODE *)malloc(sizeof(NODE));
    node->data = data;
    node->link = NULL;
    return node;
}

void display(NODE *head) 
{
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->link;
    }
    printf(""\n"");
}

void SplitList(NODE *head, NODE **first_half, NODE **second_half) 
{
    NODE *slow = head;
    NODE *fast = head;

    while (fast != NULL && fast->link != NULL) {
        fast = fast->link->link;
        if (fast != NULL) {
            slow = slow->link;
        }
    }

    *first_half = head;
    *second_half = slow->link;
    slow->link = NULL;
}

int main() 
{
    int num, data;
    scanf(""%d"", &num);

    NODE *head = NULL, *last = NULL;
    for (int i = 0; i < num; i++) 
    {
        scanf(""%d"", &data);
        if (head == NULL) 
        {
            head = createNode(data);
            last = head;
        } 
        else 
        {
            last->link = createNode(data);
            last = last->link;
        }
    }

    NODE *first_half, *second_half;
    SplitList(head, &first_half, &second_half);

    display(first_half);
    display(second_half);
return 0;
}"
22744032,pes1202201325,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}"
22744032,pes1202201325,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node{
    int data;
    struct node* next;
}n;
n* create(int ele){
    n* head=malloc(sizeof(struct node));
    head->data=ele;
    head->next=NULL;
    return head;
}
n* insertend(n* head, int ele)
{
    n* nod = create(ele);
    if (head == NULL)
        head = nod;
    else
    {
        n* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = nod;
    }
    return head;
}

int pointer(n* head){
    int ptr=0;
    while((head->next!=NULL)&&(head->next->next!=NULL)){
        ptr++;
        head=head->next->next;
    }return ptr;
}
int main() {
    n* head=NULL;
    int n;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++){
        int ele;
        scanf(""%d"",&ele);
        head=insertend(head,ele);
    }
    int num = pointer(head);
    int counter=0;
    while(head!=NULL){
        printf(""%d "",head->data);
        if(counter==num)
            printf(""\n"");
        counter++;
        head=head->next;
    }
    return 0;
}

  
    

"
22744035,abhinarasimham8,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coefficient;
    int power;
    struct Node *next;
} Node;

Node *create_node(int coefficient, int power) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coefficient = coefficient;
    node->power = power;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coefficient, int power) {
    Node *node = create_node(coefficient, power);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coefficient);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->power > p2->power) {
            insert_node(&result, p1->coefficient, p1->power);
            p1 = p1->next;
        } else if (p1->power < p2->power) {
            insert_node(&result, p2->coefficient, p2->power);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coefficient + p2->coefficient, p1->power);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coefficient, p1->power);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coefficient, p2->power);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coefficient, power;
        scanf(""%d %d"", &coefficient, &power);
        insert_node(&p1, coefficient, power);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coefficient, power;
        scanf(""%d %d"", &coefficient, &power);
        insert_node(&p2, coefficient, power);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}"
22744035,abhinarasimham8,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *next;
} Node;

Node *create_node(int data) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    return node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

void split_list(Node *head, Node **first_half, Node **second_half) {
    Node *slow = head;
    Node *fast = head;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        if (fast != NULL) {
            slow = slow->next;
        }
    }

    *first_half = head;
    *second_half = slow->next;
    slow->next = NULL;
}

int main() {
    int n, data;
    scanf(""%d"", &n);

    Node *head = NULL, *tail = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &data);
        if (head == NULL) {
            head = create_node(data);
            tail = head;
        } else {
            tail->next = create_node(data);
            tail = tail->next;
        }
    }

    Node *first_half, *second_half;
    split_list(head, &first_half, &second_half);

    print_list(first_half);
    print_list(second_half);

    return 0;
}"
22744053,pes1202202181,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {//represents the term
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coeff, int exp) { //function to add the term
    
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) 
    {
        *poly = newTerm;
    } else 
    {
        struct Term* temp = *poly;
        while (temp->next != NULL) 
        {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) { //function to find the sum of polynomials
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } 
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) 
    { // add the remaining terms of the polyniomial
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(struct Term* poly) { // prints the poplynomial sum
    
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        
        poly = poly->next;
    }
    printf(""\n"");
}

int main() { 
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        
        scanf(""%d %d"", &coeff, &exp);
        
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } 
        
        else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}"
22744053,pes1202202181,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

// defines structure

struct Node {
    int data;
    struct Node* next;
};

// insert new node

void addNode(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    
    newNode->data = data;
    
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        
        while (current->next != NULL) {
            
            current = current->next;
        }
        
        current->next = newNode;
    }
}

// finds the midpoint of linked list

struct Node* findMid(struct Node* head) {

    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    
    struct Node* fast = head->next;
    
    while (fast != NULL && fast->next != NULL) {
    
        slow = slow->next;
        
        fast = fast->next->next;
    }
    
    return slow;
}

// function splits the linked list at midpoint

void splitLinkedList(struct Node* midNode, struct Node** head1, struct Node** head2) {
    
    if (midNode == NULL) {
        return;
    }
    
    *head1 = midNode->next;
    midNode->next = NULL;
    *head2 = midNode->next;
}

// function prints the elements of both lists

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        addNode(&head, data);
    }
    
    struct Node* midNode = findMid(head);
    
    struct Node* head1 = head;
    
    struct Node* head2 = midNode->next;
    
    midNode->next = NULL;
    
    
    printList(head1);
    printList(head2);
    
    return 0;
}
"
22744054,pes1202201165,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
// typedef struct Node
// {
    
    
//     struct Node* next;
//     int data[];
    
// }Node;
// void push(struct Node* head, int data)
// {
//     struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
//     newNode->data = data;
//     newNode->next = head;
//     head = newNode;
// }
// struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
//     struct Node* result = NULL;

//     while (poly1 != NULL && poly2 != NULL) {
//         if ((poly1->data)[1] > (poly2->data)[1]) {
//             //insertTerm(&result, poly1->coefficient, poly1->exponent);
//             push(result,poly1->data);
//             poly1 = poly1->next;
//         } else if ((poly1->data)[1] < (poly2->data)[1]) {
//             //insertTerm(&result, poly2->coefficient, poly2->exponent);
//             push(result, poly2->data);
//             poly2 = poly2->next;
//         } else {
//             int ans[];
//             ans[0] = poly1->data[0] + poly2->data[0];
//             ans[1] = poly1->data[1];
//             push(result,ans);
//             poly1 = poly1->next;
//             poly2 = poly2->next;
//         }
//     }
//     return result;
// }
    
//     void printPolynomial(struct Node* poly) {
//     while (poly != NULL) {
//         printf(""%d "", poly->data[0]);
//         poly = poly->next;
//     }
//     printf(""\n"");
// }



// int main() {
//     int a;
//     int b;
//     struct Node*head1 = NULL;
//     struct Node*head2 = NULL;
    
//     scanf(""%d %d"", &a,&b);
//     for(int i=0; i++; i<a){
//         int data[a];
//         scanf(""%d %d"", &data[0], &[data[1]]);
//         push(head1,data);
        
//     }
    
//     for(int j=0;j++;j<b){
//         int data[b];
//         scanf(""%d %d"", &data[0], &data[1]);
//         push(head2,data);
//     }
    
//     struct Node*result = addPolynomials(struct Node*head1, struct Node*head2);
//     printPolynomial(result);
    
    

//     /* Enter your code here. Read input from STDIN. Print output to STDOUT */    


//     return 0;
// }

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int exp;
    struct Node* next;
};


void insertTerm(struct Node** poly, int coeff, int exp) {
    struct Node* newTerm = (struct Node*)malloc(sizeof(struct Node));
    newTerm->coeff = coeff;
    newTerm->exp = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Node* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertTerm(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertTerm(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coeff + poly2->coeff, poly1->exp);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

  
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }

    return result;
}



int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Node* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}
"
22744054,pes1202201165,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *next;
} Node;

void print(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

Node *create(int data) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    return node;
}



void split(Node *head, Node **first, Node **second) {
    Node *slow = head;
    Node *fast = head;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        if (fast != NULL) {
            slow = slow->next;
        }
    }

    *first = head;
    *second = slow->next;
    slow->next = NULL;
}

int main() {
    int n, data;
    scanf(""%d"", &n);

    Node *head = NULL, *tail = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &data);
        if (head == NULL) {
            head = create(data);
            tail = head;
        } else {
            tail->next = create(data);
            tail = tail->next;
        }
    }

    Node *first_half, *second_half;
    split(head, &first_half, &second_half);

    print(first_half);
    print(second_half);

    return 0;
}
"
22744060,PES1202202539,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

  
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}
"
22744060,PES1202202539,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head->next;
    
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

void splitLinkedList(struct Node* midNode, struct Node** head1, struct Node** head2) {
    if (midNode == NULL) {
        return;
    }
    
    *head1 = midNode->next;
    midNode->next = NULL;
    *head2 = midNode->next;
}
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }
    
    struct Node* midNode = findMidpoint(head);
    
    struct Node* head1 = head;
    struct Node* head2 = midNode->next;
    midNode->next = NULL;
    
    printList(head1);
    printList(head2);
    
    return 0;
}
"
22744065,PES1202203799,Polynomial Addition,15,"

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

   
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}"
22744065,PES1202203799,Divide Linked List 2,15,"
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

struct Node* splitLinkedList(struct Node** head) {
    if (*head == NULL) {
        return NULL;
    }
    
    struct Node* slow = *head;
    struct Node* fast = (*head)->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    struct Node* secondHalf = slow->next;
    slow->next = NULL;
    
    return secondHalf;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; ++i) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    struct Node* secondHalf = splitLinkedList(&head);

    printLinkedList(head);
    printLinkedList(secondHalf);

    return 0;
}
"
22744070,PES1202203292,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head==NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next!=NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void display(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *combine(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1=p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2=p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = combine(p1, p2);
    
    display(result);

    return 0;
}"
22744070,PES1202203292,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *next;
} Node;

Node *create_node(int data) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    return node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

void split_list(Node *head, Node **first_half, Node **second_half) {
    Node *slow = head;
    Node *fast = head;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        if (fast != NULL) {
            slow = slow->next;
        }
    }

    *first_half = head;
    *second_half = slow->next;
    slow->next = NULL;
}

int main() {
    int n, data;
    scanf(""%d"", &n);

    Node *head = NULL, *tail = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &data);
        if (head == NULL) {
            head = create_node(data);
            tail = head;
        } else {
            tail->next = create_node(data);
            tail = tail->next;
        }
    }

    Node *first_half, *second_half;
    split_list(head, &first_half, &second_half);

    print_list(first_half);
    print_list(second_half);

    return 0;
}"
22744082,pes1202203909,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

   
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}"
22744082,pes1202203909,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node *next;
} NODE;
NODE *createNode(int value)
{
    NODE *newNode = (NODE *)malloc(sizeof(NODE));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}
void splitList(NODE *head)
{
    NODE *mid = head;
    NODE *temp = head;
    NODE *curr = head;
    while (temp->next != NULL && temp->next->next!=NULL)
    {
        mid = mid->next;
        temp = temp->next->next; // fast pointer
    }
    while (curr != mid->next)
    {
        printf(""%d "", curr->data);
        curr = curr->next;
    }
    printf(""\n"");
    while (curr != NULL)
    {
        printf(""%d "", curr->data);
        curr = curr->next;
    }
}
int main()
{
    NODE *head = NULL;
    NODE *temp = NULL;
    int n;
    scanf(""%d"", &n);
    for (int i = 0; i < n; i++)
    {
        int val;
        scanf(""%d"", &val);
        if (head == NULL)
        {
            head = createNode(val);
            temp = head;
        }
        else
        {
            temp->next = createNode(val);
            temp = temp->next;
        }
    }
    splitList(head);
    return 0;
}"
22744087,pes1202201100,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

  
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}"
22744087,pes1202201100,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head->next;
    
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

void splitLinkedList(struct Node* midNode, struct Node** head1, struct Node** head2) {
    if (midNode == NULL) {
        return;
    }
    
    *head1 = midNode->next;
    midNode->next = NULL;
    *head2 = midNode->next;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }
    
    struct Node* midNode = findMidpoint(head);
    
    struct Node* head1 = head;
    struct Node* head2 = midNode->next;
    midNode->next = NULL;
    
    printList(head1);
    printList(head2);
    
    return 0;
}"
22744102,PES1202203347,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}"
22744102,PES1202203347,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
//this the code to split
typedef struct Node {
    int data;
    struct Node *next;
}Node;




Node *createNode(int data) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    return node;
}

void printList(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

void splitList(Node *head, Node **first_half, Node **second_half) {
    Node *slow = head;
    Node *fast = head;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        if (fast != NULL) {
            slow = slow->next;
        }
    }

    *first_half = head;
    *second_half = slow->next;
    slow->next = NULL;
}

int main() {
    int n, data;
    scanf(""%d"", &n);

    Node *head = NULL, *tail = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &data);
        if (head == NULL) {
            head = createNode(data);
            tail = head;
        } else {
            tail->next = createNode(data);
            tail = tail->next;
        }
    }

    Node *firstHalf, *secondHalf;
    splitList(head, &firstHalf, &secondHalf);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22744106,PES1202202253,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int exp;
    struct Node* next;
};

typedef struct Node Node;

Node* createNode(int coef, int expo) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->coeff = coef;
    newNode->exp = expo;
    newNode->next = NULL;
    return newNode;
}



void printPolynomial(Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}
Node* addpoly(Node* poly1, Node* poly2) {
    Node* result = NULL;
    Node* tail = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            if (tail == NULL) {
                result = tail = createNode(poly1->coeff, poly1->exp);
            } else {
                tail->next = createNode(poly1->coeff, poly1->exp);
                tail = tail->next;
            }
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            if (tail == NULL) {
                result = tail = createNode(poly2->coeff, poly2->exp);
            } else {
                tail->next = createNode(poly2->coeff, poly2->exp);
                tail = tail->next;
            }
            poly2 = poly2->next;
        } else {
            int sumCoeff = poly1->coeff + poly2->coeff;
            if (sumCoeff != 0) {
                if (tail == NULL) {
                    result = tail = createNode(sumCoeff, poly1->exp);
                } else {
                    tail->next = createNode(sumCoeff, poly1->exp);
                    tail = tail->next;
                }
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        if (tail == NULL) {
            result = tail = createNode(poly1->coeff, poly1->exp);
        } else {
            tail->next = createNode(poly1->coeff, poly1->exp);
            tail = tail->next;
        }
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        if (tail == NULL) {
            result = tail = createNode(poly2->coeff, poly2->exp);
        } else {
            tail->next = createNode(poly2->coeff, poly2->exp);
            tail = tail->next;
        }
        poly2 = poly2->next;
    }

    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Node* poly1 = NULL;
    Node* poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coef, expo;
        scanf(""%d %d"", &coef, &expo);
        if (poly1 == NULL) {
            poly1 = createNode(coef, expo);
        } else {
            Node* temp = poly1;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = createNode(coef, expo);
        }
    }

    for (int i = 0; i < m; i++) {
        int coef, expo;
        scanf(""%d %d"", &coef, &expo);
        if (poly2 == NULL) {
            poly2 = createNode(coef, expo);
        } else {
            Node* temp = poly2;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = createNode(coef, expo);
        }
    }

    Node* result = addpoly(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22744106,PES1202202253,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* ptr = (struct Node*)malloc(sizeof(struct Node));
    ptr->data = data;
    ptr->next = NULL;
    
    if (*head == NULL) {
        *head = ptr;
    } else {
        struct Node* pos = *head;
        while (pos->next != NULL) {
            pos = pos->next;
        }
        pos->next = ptr;
    }
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head->next;
    
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}


void splitLinkedList(struct Node* midNode, struct Node** head1, struct Node** head2) {
    if (midNode == NULL) {
        return;
    }
    
    *head1 = midNode->next;
    midNode->next = NULL;
    *head2 = midNode->next;
}

void printList(struct Node* head) {
    struct Node* pos = head;
    while (pos != NULL) {
        printf(""%d "", pos->data);
        pos = pos->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }
    
    struct Node* midNode = findMidpoint(head);
    
    struct Node* head1 = head;
    struct Node* head2 = midNode->next;
    midNode->next = NULL;
    
    printList(head1);
    printList(head2);
    
  
}"
22744110,PES1202203928,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}
"
22744110,PES1202203928,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node *next;
} NODE;
NODE *createNode(int value)
{
    NODE *newNode = (NODE *)malloc(sizeof(NODE));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}
void splitList(NODE *head)
{
    NODE *mid = head;
    NODE *temp = head;
    NODE *curr = head;
    while (temp->next != NULL && temp->next->next!=NULL)
    {
        mid = mid->next;
        temp = temp->next->next; // fast pointer
    }
    while (curr != mid->next)
    {
        printf(""%d "", curr->data);
        curr = curr->next;
    }
    printf(""\n"");
    while (curr != NULL)
    {
        printf(""%d "", curr->data);
        curr = curr->next;
    }
}
int main()
{
    NODE *head = NULL;
    NODE *temp = NULL;
    int n;
    scanf(""%d"", &n);
    for (int i = 0; i < n; i++)
    {
        int val;
        scanf(""%d"", &val);
        if (head == NULL)
        {
            head = createNode(val);
            temp = head;
        }
        else
        {
            temp->next = createNode(val);
            temp = temp->next;
        }
    }
    splitList(head);
    return 0;
}"
22744118,abhibhama45,Polynomial Addition,15,"#include <stdio.h>

#include <stdlib.h>

// Structure to represent a term in the polynomial

struct Term {

    int coefficient;

    int exponent;

    struct Term* next;

};

// Function to insert a new term into the polynomial

void insertTerm(struct Term** poly, int coeff, int exp) {

    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));

    newTerm->coefficient = coeff;

    newTerm->exponent = exp;

    newTerm->next = NULL;

    if (*poly == NULL) {

        *poly = newTerm;

    } else {

        struct Term* temp = *poly;

        while (temp->next != NULL) {

            temp = temp->next;

        }

        temp->next = newTerm;

    }

}

// Function to add two polynomials

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {

    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {

        if (poly1->exponent > poly2->exponent) {

            insertTerm(&result, poly1->coefficient, poly1->exponent);

            poly1 = poly1->next;

        } else if (poly1->exponent < poly2->exponent) {

            insertTerm(&result, poly2->coefficient, poly2->exponent);

            poly2 = poly2->next;

        } else {

            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);

            poly1 = poly1->next;

            poly2 = poly2->next;

        }

    }

    // Add any remaining terms from poly1 or poly2

    while (poly1 != NULL) {

        insertTerm(&result, poly1->coefficient, poly1->exponent);

        poly1 = poly1->next;

    }

    while (poly2 != NULL) {

        insertTerm(&result, poly2->coefficient, poly2->exponent);

        poly2 = poly2->next;

    }

    return result;

}

// Function to print the polynomial

void printPolynomial(struct Term* poly) {

    while (poly != NULL) {

        printf(""%d "", poly->coefficient);

        poly = poly->next;

    }

    printf(""\n"");

}

int main() {

    int n, m;

    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;

    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {

        int coeff, exp;

        scanf(""%d %d"", &coeff, &exp);

        if (i < n) {

            insertTerm(&poly1, coeff, exp);

        } else {

            insertTerm(&poly2, coeff, exp);

        }

    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;

}


"
22744118,abhibhama45,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* link;
};

void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->link = NULL;
    
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    
    struct Node* temp = *head;
    while (temp->link != NULL) {
        temp = temp->link;
    }
    temp->link = newNode;
}

struct Node* find_midpoint(struct Node* head) {
    if (head == NULL || head->link == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head;
    
    while (fast->link != NULL && fast->link->link != NULL) {
        slow = slow->link;
        fast = fast->link->link;
    }
    
    return slow;
}

void split_list(struct Node* mid, struct Node** head1, struct Node** head2) {
    if (mid == NULL) {
        *head1 = NULL;
        *head2 = NULL;
        return;
    }
    
    *head1 = mid->link;
    *head2 = mid->link->link;
    mid->link = NULL;
}

void print_list(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->link;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insert(&head, data);
    }
    
    struct Node* mid = find_midpoint(head);
    struct Node* head1 = head;
    struct Node* head2 = mid->link;
    mid->link = NULL;
    
    print_list(head1);
    print_list(head2);
    
    return 0;
}"
22744125,akashghatage_19,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to insert a new term into the polynomial
void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Add any remaining terms from poly1 or poly2
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}"
22744125,akashghatage_19,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node 
{
    int data;
    struct Node* next;
};

void insertAtEnd(struct Node** head, int data) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL)
    {
        *head = newNode;
    } 
    else
    {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* findMidpoint(struct Node* head)
{
    if (head == NULL || head->next == NULL)
    {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

struct Node* splitLinkedList(struct Node** head) 
{
    struct Node* midpoint = findMidpoint(*head);
    struct Node* secondHalf = midpoint->next;
    midpoint->next = NULL;
    return secondHalf;
}

void printLinkedList(struct Node* head) 
{
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertAtEnd(&head, data);
    }

    struct Node* secondHalf = splitLinkedList(&head);

    printLinkedList(head);
    printLinkedList(secondHalf);

    return 0;
}"
22744126,pes1202203796,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to insert a new term into the polynomial
void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Add any remaining terms from poly1 or poly2
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}"
22744126,pes1202203796,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* link;
};

void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->link = NULL;
    
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    
    struct Node* temp = *head;
    while (temp->link != NULL) {
        temp = temp->link;
    }
    temp->link = newNode;
}

struct Node* find_midpoint(struct Node* head) {
    if (head == NULL || head->link == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head;
    
    while (fast->link != NULL && fast->link->link != NULL) {
        slow = slow->link;
        fast = fast->link->link;
    }
    
    return slow;
}

void split_list(struct Node* mid, struct Node** head1, struct Node** head2) {
    if (mid == NULL) {
        *head1 = NULL;
        *head2 = NULL;
        return;
    }
    
    *head1 = mid->link;
    *head2 = mid->link->link;
    mid->link = NULL;
}

void print_list(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->link;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insert(&head, data);
    }
    
    struct Node* mid = find_midpoint(head);
    struct Node* head1 = head;
    struct Node* head2 = mid->link;
    mid->link = NULL;
    
    print_list(head1);
    print_list(head2);
    
    return 0;
}"
22744146,pes1202202504,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int exp;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->exp = exp;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    if (*poly == NULL) {
        *poly = newNode;
    } else {
        struct Node* current = *poly;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void addPolynomials(struct Node* poly_1, struct Node* poly_2, struct Node** result) {
    while (poly_1 != NULL && poly_2 != NULL) {
        if (poly_1->exp > poly_2->exp) {
            insertTerm(result, poly_1->coeff, poly_1->exp);
            poly_1 = poly_1->next;
        } else if (poly_1->exp < poly_2->exp) {
            insertTerm(result, poly_2->coeff, poly_2->exp);
            poly_2 = poly_2->next;
        } else {
            insertTerm(result, poly_1->coeff + poly_2->coeff, poly_1->exp);
            poly_1 = poly_1->next;
            poly_2 = poly_2->next;
        }
    }

    while (poly_1 != NULL) {
        insertTerm(result, poly_1->coeff, poly_1->exp);
        poly_1 = poly_1->next;
    }

    while (poly_2 != NULL) {
        insertTerm(result, poly_2->coeff, poly_2->exp);
        poly_2 = poly_2->next;
    }
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* poly_1 = NULL;
    struct Node* poly_2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly_1, coeff, exp);
        } else {
            insertTerm(&poly_2, coeff, exp);
        }
    }

    struct Node* result = NULL;
    addPolynomials(poly_1, poly_2, &result);

    printPolynomial(result);

    return 0;
}"
22744146,pes1202202504,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *next;
} Node;

Node *createNode(int data) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    return node;
}

void printlist(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

void splitlist(Node *head, Node **firsthalf, Node **secondhalf) {
    Node *slow = head;
    Node *fast = head;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        if (fast != NULL) {
            slow = slow->next;
        }
    }

    *firsthalf = head;
    *secondhalf = slow->next;
    slow->next = NULL;
}

int main() {
    int n, data;
    scanf(""%d"", &n);

    Node *head = NULL, *tail = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &data);
        if (head == NULL) {
            head = createNode(data);
            tail = head;
        } else {
            tail->next = createNode(data);
            tail = tail->next;
        }
    }

    Node *firsthalf, *secondhalf;
    splitlist(head, &firsthalf, &secondhalf);

    printlist(firsthalf);
    printlist(secondhalf);

    return 0;
}"
22744158,pes1202202220,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *create_node(int coeff, int pow) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->coeff = coeff;
    node->pow = pow;
    node->next = NULL;
    return node;
}

void insert_node(Node **head, int coeff, int pow) {
    Node *node = create_node(coeff, pow);
    if (*head == NULL) {
        *head = node;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
}

Node *add_polynomials(Node *p1, Node *p2) {
    Node *result = NULL;
    while (p1 != NULL && p2 != NULL) {
        if (p1->pow > p2->pow) {
            insert_node(&result, p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            insert_node(&result, p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            insert_node(&result, p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    while (p1 != NULL) {
        insert_node(&result, p1->coeff, p1->pow);
        p1 = p1->next;
    }
    while (p2 != NULL) {
        insert_node(&result, p2->coeff, p2->pow);
        p2 = p2->next;
    }
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *p1 = NULL;
    for (int i = 0; i < n; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p1, coeff, pow);
    }
    
    Node *p2 = NULL;
    for (int i = 0; i < m; i++) {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        insert_node(&p2, coeff, pow);
    }
    
    Node *result = add_polynomials(p1, p2);
    
    print_list(result);

    return 0;
}
"
22744158,pes1202202220,Divide Linked List 2,11.25,"#include<stdio.h>
#include<stdlib.h>

typedef struct node{
    int data;
    struct node* next;
}NODE;

NODE* new_node(int n){
    NODE* temp=(NODE*)malloc(sizeof(NODE));
    temp->data=n;
    temp->next=NULL;
    return temp;
}

NODE* append(NODE* node,int n){
    NODE* temp=node;
    while(node->next!=NULL){
        node=node->next;
    }
    node->next=new_node(n);
    return temp;
}

void print(NODE *head){
    NODE* temp=head;
    if(head==NULL){
        printf(""empty\n"");
    }
    else{
        while(temp!=NULL){
            printf(""%d "",temp->data);
            temp=temp->next;
        }
        printf(""\n"");
    }
}

int main(){
    int len;
    scanf(""%d"",&len);

    if(len==0)
        return 0;

    NODE* head;
    for(int i=0;i<len;i++){
        int n;
        scanf(""%d"",&n);
        if(i==0){
            head=new_node(n);
        }else{
            head=append(head,n);
        }
    }
    int mid;
    if((len%2)==0){
        mid=(len/2)-1;
    }   
    else{
        mid=len/2;
    }
    
    NODE* part1;
    NODE* part2;
    int i=0;
    
    while(i<=mid){
        if(i==0){
            part1=new_node(head->data);
        }else{
            part1=append(part1,head->data);
        }
        head=head->next;
        i++;
    }
    print(part1);

    i=0;
    while(head!=NULL){
        if(i==0){
            part2=new_node(head->data);
        }else{
            part2=append(part2,head->data);
        }
        head=head->next;
        i++;
    }

    print(part2);
  return 0;
}"
22837740,PES1202202567,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coeff;
    int pow;
    struct Node *next;
} Node;

Node *newNode(int coeff, int pow) {
    Node *temp = (Node *)malloc(sizeof(Node));
    temp->coeff = coeff;
    temp->pow = pow;
    temp->next = NULL;
    return temp;
}

void printList(Node *node) {
    while (node != NULL) {
        printf(""%d "", node->coeff);
        node = node->next;
    }
}

void addPolynomial(Node *p1, Node *p2, Node **result) {
    while (p1 && p2) {
        if (p1->pow > p2->pow) {
            *result = newNode(p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p1->pow < p2->pow) {
            *result = newNode(p2->coeff, p2->pow);
            p2 = p2->next;
        } else {
            *result = newNode(p1->coeff + p2->coeff, p1->pow);
            p1 = p1->next;
            p2 = p2->next;
        }
        result = &((*result)->next);
    }
    while (p1 || p2) {
        if (p1) {
            *result = newNode(p1->coeff, p1->pow);
            p1 = p1->next;
        } else if (p2) {
            *result = newNode(p2->coeff, p2->pow);
            p2 = p2->next;
        }
        result = &((*result)->next);
    }
}

int main() {
    int n, m, coeff, pow;
    scanf(""%d %d"", &n, &m);

    Node *p1 = NULL, **last_p1 = &p1;
    for (int i = 0; i < n; i++) {
        scanf(""%d %d"", &coeff, &pow);
        *last_p1 = newNode(coeff, pow);
        last_p1 = &((*last_p1)->next);
    }

    Node *p2 = NULL, **last_p2 = &p2;
    for (int i = 0; i < m; i++) {
        scanf(""%d %d"", &coeff, &pow);
        *last_p2 = newNode(coeff, pow);
        last_p2 = &((*last_p2)->next);
    }

    Node *result = NULL;
    addPolynomial(p1, p2, &result);

    printList(result);

    return 0;
}
"
22837740,PES1202202567,Divide Linked List 2,15,"
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
     int data;
    struct Node *next;
} Node;

Node *create_node(int data) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    return node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

void split_list(Node *head, Node **first_half, Node **second_half) {
    Node *slow = head;
     Node *fast = head;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        if (fast != NULL) {
            slow = slow->next;
        }
    }

    *first_half = head;
    *second_half = slow->next;
    slow->next = NULL;
}

int main() {
    int n, data;
    scanf(""%d"", &n);

    Node *head = NULL, *tail = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &data);
        if (head == NULL) {
            head = create_node(data);
            tail = head;
        } else {
            tail->next = create_node(data);
            tail = tail->next;
        }
    }

    Node *first_half, *second_half;
    split_list(head, &first_half, &second_half);

    print_list(first_half);
    print_list(second_half);

    return 0;
}"
22837766,pes1202202637,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node 
{
 int coeff;
 int pow;
 struct Node *next;
} Node;

Node *newNode(int coeff, int pow) 
{
 Node *temp = (Node *)malloc(sizeof(Node));
 temp->coeff = coeff;
 temp->pow = pow;
 temp->next = NULL;
 return temp;
}

void printList(Node *node) 
{
    while (node != NULL){
     printf(""%d "", node->coeff);
     node = node->next;
    }
}

void addPolynomial(Node *p1, Node *p2, Node **result) 
{
    while (p1 && p2){
       if (p1->pow > p2->pow){
         *result = newNode(p1->coeff, p1->pow);
         p1 = p1->next;
        } else if (p1->pow < p2->pow){
          *result = newNode(p2->coeff, p2->pow);
          p2 = p2->next;
        } else{
          *result = newNode(p1->coeff + p2->coeff, p1->pow);
          p1 = p1->next;
          p2 = p2->next;
        }
        result = &((*result)->next);
    }
    while (p1 || p2){
        if (p1){
         *result = newNode(p1->coeff, p1->pow);
         p1 = p1->next;
        } else if (p2){
         *result = newNode(p2->coeff, p2->pow);
         p2 = p2->next;
        }
        result = &((*result)->next);
    }
}

int main() 
{
 int n, m, coeff, pow;
 scanf(""%d %d"", &n, &m);

 Node *p1 = NULL, **last_p1 = &p1;
    for (int i = 0; i < n; i++) {
     scanf(""%d %d"", &coeff, &pow);
     *last_p1 = newNode(coeff, pow);
     last_p1 = &((*last_p1)->next);
    }

 Node *p2 = NULL, **last_p2 = &p2;
    for (int i = 0; i < m; i++) {
     scanf(""%d %d"", &coeff, &pow);
     *last_p2 = newNode(coeff, pow);
     last_p2 = &((*last_p2)->next);
    }

 Node *result = NULL;
 addPolynomial(p1, p2, &result);
 printList(result);

 return 0;
}"
22837766,pes1202202637,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *next;
} Node;

Node *create_node(int data) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    return node;
}

void print_list(Node *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

void split_list(Node *head, Node **first_half, Node **second_half) {
    Node *slow = head;
    Node *fast = head;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        if (fast != NULL) {
            slow = slow->next;
        }
    }

    *first_half = head;
    *second_half = slow->next;
    slow->next = NULL;
}

int main() {
    int n, data;
    scanf(""%d"", &n);

    Node *head = NULL, *tail = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &data);
        if (head == NULL) {
            head = create_node(data);
            tail = head;
        } else {
            tail->next = create_node(data);
            tail = tail->next;
        }
    }

    Node *first_half, *second_half;
    split_list(head, &first_half, &second_half);

    print_list(first_half);
    print_list(second_half);

    return 0;
}"
22837783,pes1202203768,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to insert a new term into the polynomial
void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Add any remaining terms from poly1 or poly2
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}"
22837783,pes1202203768,Divide Linked List 2,15,"
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* link;
};

void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->link = NULL;
    
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    
    struct Node* temp = *head;
    while (temp->link != NULL) {
        temp = temp->link;
    }
    temp->link = newNode;
}

struct Node* find_midpoint(struct Node* head) {
    if (head == NULL || head->link == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head;
    
    while (fast->link != NULL && fast->link->link != NULL) {
        slow = slow->link;
        fast = fast->link->link;
    }
    
    return slow;
}

void split_list(struct Node* mid, struct Node** head1, struct Node** head2) {
    if (mid == NULL) {
        *head1 = NULL;
        *head2 = NULL;
        return;
    }
    
    *head1 = mid->link;
    *head2 = mid->link->link;
    mid->link = NULL;
}

void print_list(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->link;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insert(&head, data);
    }
    
    struct Node* mid = find_midpoint(head);
    struct Node* head1 = head;
    struct Node* head2 = mid->link;
    mid->link = NULL;
    
    print_list(head1);
    print_list(head2);
    
    return 0;
}"
22837791,PES1202202176,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

  
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}"
22837791,PES1202202176,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to find the midpoint of the linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head->next;
    
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

// Function to split the linked list into two parts at the given node
void splitLinkedList(struct Node* midNode, struct Node** head1, struct Node** head2) {
    if (midNode == NULL) {
        return;
    }
    
    *head1 = midNode->next;
    midNode->next = NULL;
    *head2 = midNode->next;
}

// Function to print the elements of a linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }
    
    struct Node* midNode = findMidpoint(head);
    
    struct Node* head1 = head;
    struct Node* head2 = midNode->next;
    midNode->next = NULL;
    
    printList(head1);
    printList(head2);
    
    return 0;
}"
22837807,pes1202202197,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure for a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to create a new term
struct Term* createTerm(int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    return newTerm;
}

// Function to insert a term at the end of a polynomial
void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = createTerm(coeff, exp);
    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* current = *poly;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newTerm;
    }
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            // Add coefficients of terms with the same exponent
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Append any remaining terms from both polynomials
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print a polynomial
void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->coefficient);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    // Read the terms of the first polynomial
    for (int i = 0; i < n; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly1, coeff, exp);
    }

    // Read the terms of the second polynomial
    for (int i = 0; i < m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly2, coeff, exp);
    }

    // Add the polynomials
    struct Term* result = addPolynomials(poly1, poly2);

    // Print the result
    printPolynomial(result);

    return 0;
}
"
22837807,pes1202202197,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdlib.h>

// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to find the midpoint of the linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head->next;
    
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

// Function to split the linked list into two parts at the given node
void splitLinkedList(struct Node* midNode, struct Node** head1, struct Node** head2) {
    if (midNode == NULL) {
        return;
    }
    
    *head1 = midNode->next;
    midNode->next = NULL;
    *head2 = midNode->next;
}

// Function to print the elements of a linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }
    
    struct Node* midNode = findMidpoint(head);
    
    struct Node* head1 = head;
    struct Node* head2 = midNode->next;
    midNode->next = NULL;
    
    printList(head1);
    printList(head2);
    
    return 0;
}






"
22837812,PES1202202302,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct term {
    int coeff;
    int exponent;
    struct term* next;
};

void insert(struct term** poly, int coeff, int exp) {
    struct term* new = (struct term*)malloc(sizeof(struct term));
    new->coeff = coeff;
    new->exponent = exp;
    new->next = NULL;
    if (*poly == NULL) {
        *poly = new;
    } else {
        struct term* temp = *poly;
        while (temp->next != NULL) {
        temp = temp->next;
    }
        temp->next = new;
    }
}
struct term* add(struct term* poly1, struct term* poly2) {
    struct term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insert(&result, poly1->coeff, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insert(&result, poly2->coeff, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insert(&result, poly1->coeff + poly2->coeff, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
      }
    }
    while (poly1 != NULL) {
        insert(&result, poly1->coeff, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insert(&result, poly2->coeff, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void printPolynomial(struct term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct term* poly1 = NULL;
    struct term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insert(&poly1, coeff, exp);
        } else {
            insert(&poly2, coeff, exp);
        }
    }
    struct term* result = add(poly1, poly2);
    printPolynomial(result);
    return 0;
}
"
22837812,PES1202202302,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to find the midpoint of the linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head->next;
    
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

// Function to split the linked list into two parts at the given node
void splitLinkedList(struct Node* midNode, struct Node** head1, struct Node** head2) {
    if (midNode == NULL) {
        return;
    }
    
    *head1 = midNode->next;
    midNode->next = NULL;
    *head2 = midNode->next;
}

// Function to print the elements of a linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }
    
    struct Node* midNode = findMidpoint(head);
    
    struct Node* head1 = head;
    struct Node* head2 = midNode->next;
    midNode->next = NULL;
    
    printList(head1);
    printList(head2);
    
    return 0;
}"
22837816,pes1202202495,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }


    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}
    
"
22837816,pes1202202495,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head->next;
    
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

void splitLinkedList(struct Node* midNode, struct Node** head1, struct Node** head2) {
    if (midNode == NULL) {
        return;
    }
    
    *head1 = midNode->next;
    midNode->next = NULL;
    *head2 = midNode->next;
}


void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }
    
    struct Node* midNode = findMidpoint(head);
    
    struct Node* head1 = head;
    struct Node* head2 = midNode->next;
    midNode->next = NULL;
    
    printList(head1);
    printList(head2);
    
    return 0;
}"
22837829,pes1202202527,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure for a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to create a new term
struct Term* createTerm(int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    return newTerm;
}

// Function to insert a term at the end of a polynomial
void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = createTerm(coeff, exp);
    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* current = *poly;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newTerm;
    }
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            // Add coefficients of terms with the same exponent
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Append any remaining terms from both polynomials
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print a polynomial
void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->coefficient);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    // Read the terms of the first polynomial
    for (int i = 0; i < n; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly1, coeff, exp);
    }

    // Read the terms of the second polynomial
    for (int i = 0; i < m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly2, coeff, exp);
    }

    // Add the polynomials
    struct Term* result = addPolynomials(poly1, poly2);

    // Print the result
    printPolynomial(result);

    return 0;
}"
22837829,pes1202202527,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head->next;
    
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}
void splitLinkedList(struct Node* midNode, struct Node** head1, struct Node** head2) {
    if (midNode == NULL) {
        return;
    }
    
    *head1 = midNode->next;
    midNode->next = NULL;
    *head2 = midNode->next;
}
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }
    
    struct Node* midNode = findMidpoint(head);
    
    struct Node* head1 = head;
    struct Node* head2 = midNode->next;
    midNode->next = NULL;
    
    printList(head1);
    printList(head2);
    
    return 0;
}"
22838007,pes12022013021,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int n,i,a[5];
    scanf(""%d"",&n);
    for(i=0;i<n;i++){
    scanf(""%d"",&a[i]);
    }
if(n%2==1){
    for(i=0;i<=n/2;i++){
        printf(""%d "",a[i]);
    }
    printf(""\n"");
    for(i=n/2+1;i<n;i++)
    {
        printf(""%d "",a[i]);
    }
}
else{
    for(i=0;i<n/2;i++){
        printf(""%d "",a[i]);
    }
    printf(""\n"");
    for(i=n/2;i<n;i++)
    {
        printf(""%d "",a[i]);
    }
    
}
    
    return 0;
}
"