studentId,studentUserName,challenge,score,code
12978240,guptaashish1305,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    
    if (*poly == NULL || exp > (*poly)->exponent) {
        newNode->next = *poly;
        *poly = newNode;
    } else {
        struct Node* current = *poly;
        while (current->next != NULL && current->next->exponent >= exp) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int coeffSum = poly1->coefficient + poly2->coefficient;
            if (coeffSum != 0) {
                insertTerm(&result, coeffSum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    
    return result;
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }
    
    struct Node* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}


"
12978240,guptaashish1305,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *link;
};
struct node *add(struct node *head, int key)
{
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    newnode->data = key;
    newnode->link = NULL;

    if (head == NULL)
    {
        head = newnode;
        return head;
    }
    newnode->link = head;
    head = newnode;
    return head;
}

void display(struct node *head)
{
    struct node *current = head;
    while (current != NULL)
    {
        printf(""%d"", current->data);
        current = current->link;
    }
}

int main()
{

    struct node *head = (struct node *)malloc(sizeof(struct node));
    head = NULL;
    int n;
    scanf(""%d"", &n);
    int a[n];
    for (int i = 0; i < n; i++)
    {
        scanf(""%d"", &a[i]);
    }
    for (int i = 0; i < n; i++)
    {
        head = add(head, a[i]);
    }

    display(head);
    return 0;
}
"
21656835,anjanaganesh06,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
typedef struct Node {
    int coeff;
    int power;
    struct Node* next;
} Node;

// Function to insert a new term at the end of the linked list
void insert(Node** head, int coeff, int power) {
    Node* new_node = (Node*)malloc(sizeof(Node));
    new_node->coeff = coeff;
    new_node->power = power;
    new_node->next = NULL;

    if (*head == NULL) {
        *head = new_node;
    } else {
        Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = new_node;
    }
}

// Function to add two polynomials represented as linked lists
Node* addPolynomials(Node* poly1, Node* poly2) {
    Node* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->power > poly2->power) {
            insert(&result, poly1->coeff, poly1->power);
            poly1 = poly1->next;
        } else if (poly1->power < poly2->power) {
            insert(&result, poly2->coeff, poly2->power);
            poly2 = poly2->next;
        } else {
            insert(&result, poly1->coeff + poly2->coeff, poly1->power);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insert(&result, poly1->coeff, poly1->power);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insert(&result, poly2->coeff, poly2->power);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial linked list
void printPolynomial(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->coeff);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Node* poly1 = NULL;
    Node* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        if (i < n) {
            insert(&poly1, coeff, power);
        } else {
            insert(&poly2, coeff, power);
        }
    }

    Node* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}


"
21656835,anjanaganesh06,Reversing a Linked List,12,"#include <stdio.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node *link;
}NODE;

NODE*insert(NODE* head,int ele)
{
    NODE* new_node=(NODE*)malloc(sizeof(NODE));
    new_node->data=ele;
    new_node->link=NULL;
    NODE* temp=head;
    if(head==NULL)
    {
        head=new_node;
        return head;
    }
    while(temp->link!=NULL)
    {
        temp=temp->link;
    }
    temp->link=new_node;
    return head;
}

void reverse(NODE* head)
{
    NODE* prev=NULL;
    NODE* ans=head;
    NODE* next=NULL;
    while(ans!=NULL)
    {
        next=ans->link;
        ans->link=prev;
        prev=ans;
        ans=next;
    }
    if(prev==NULL)
    {
        printf(""List is empty\n"");
    }
    else{
        while(prev!=NULL)
        {
            printf(""%d"",prev->data);
            prev=prev->link;
        }
    }
}



int main() {
    NODE* head=NULL;
    int e;
    //int ch;
    int n;
    scanf(""%d"",&n);
    for(int i=1;i<=n;i++)
    {
        scanf(""%d"",&e);
        head=insert(head,e);
    }
    reverse(head);
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}"
22689142,PES1UG22CS073,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}"
22689142,PES1UG22CS073,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>




struct Node {
    int value;
    struct Node* next;
};

void insertNode(struct Node** head, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}


void reverseLinkedList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* next = NULL;
    
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    
    *head = prev;
}


void displayLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < numNodes; ++i) {
        int value;
        scanf(""%d"", &value);
        insertNode(&head, value);
    }
    
    reverseLinkedList(&head);
    displayLinkedList(head);
    
    return 0;
}"
22742236,PES1202202533,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure for a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
};

// Function to create a new term node
struct Term* createTerm(int coeff, int exp) {
    struct Term *term = (struct Term*)malloc(sizeof(struct Term));
    term->coefficient = coeff;
    term->exponent = exp;
    term->next = NULL;
    return term;
}

// Function to add a term to the polynomial
void addToPolynomial(struct Term** poly, int coeff, int exp) {
    struct Term *newTerm = createTerm(coeff, exp);
    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term *current = *poly;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newTerm;
    }
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 && poly2) {
        if (poly1->exponent > poly2->exponent) {
            addToPolynomial(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            addToPolynomial(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) {
                addToPolynomial(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1) {
        addToPolynomial(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2) {
        addToPolynomial(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial coefficients in descending order
void printPolynomial(struct Term* poly) {
    while (poly) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    // Read coefficients and exponents for the first polynomial
    for (int i = 0; i < n; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        addToPolynomial(&poly1, coeff, exp);
    }

    // Read coefficients and exponents for the second polynomial
    for (int i = 0; i < m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        addToPolynomial(&poly2, coeff, exp);
    }

    struct Term* resultPoly = addPolynomials(poly1, poly2);

    printPolynomial(resultPoly);

    // Free memory
    while (resultPoly) {
        struct Term* temp = resultPoly;
        resultPoly = resultPoly->next;
        free(temp);
    }

    return 0;
}
"
22742236,PES1202202533,Reversing a Linked List,12,"#include <stdio.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node *link;
}NODE;

NODE*insert(NODE* head,int ele)
{
    NODE* temp=(NODE*)malloc(sizeof(NODE));
    temp->data=ele;
    temp->link=NULL;
    NODE* ans=head;
    if(head==NULL)
    {
        head=temp;
        return head;
    }
    while(ans->link!=NULL)
    {
        ans=ans->link;
    }
    ans->link=temp;
    return head;
}

void reverse(NODE* head)
{
    NODE* prev=NULL;
    NODE* ans=head;
    NODE* next=NULL;
    while(ans!=NULL)
    {
        next=ans->link;
        ans->link=prev;
        prev=ans;
        ans=next;
    }
    if(prev==NULL)
    {
        printf(""List is empty\n"");
    }
    else{
        while(prev!=NULL)
        {
            printf(""%d"",prev->data);
            prev=prev->link;
        }
    }
}

/*void display(NODE* head)
{
    if(head==NULL)
    {
        printf(""List is empty\n"");
    }
    else{
        while(head!=NULL)
        {
            printf(""%d"",head->data);
            head=head->link;
        }
    }
}*/

int main() {
    NODE* head=NULL;
    int ele;
    //int ch;
    int n;
    scanf(""%d"",&n);
    for(int i=1;i<=n;i++)
    {
        scanf(""%d"",&ele);head=insert(head,ele);
    }
    reverse(head);
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
"
22742237,PES1202202013,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int c;
    int exp;
    struct Term* n;
};

void insertTerm(struct Term** p, int c, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL) {
        *p = newTerm;
    } else {
        struct Term* current = *p;
        while (current->n != NULL) {
            current = current->n;
        }
        current->n = newTerm;
    }
}

struct Term* addPolynomials(struct Term* p1, struct Term* p2) {
    struct Term* result = NULL;
    struct Term* current1 = p1;
    struct Term* current2 = p2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            insertTerm(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp) {
            insertTerm(&result, current2->c, current2->exp);
            current2 = current2->n;
        } else {
            insertTerm(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }
    
    while (current1 != NULL) {
        insertTerm(&result, current1->c, current1->exp);
        current1 = current1->n;
    }
    
    while (current2 != NULL) {
        insertTerm(&result, current2->c, current2->exp);
        current2 = current2->n;
    }
    
    return result;
}

void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22742237,PES1202202013,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = createNode(value);

        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    head = reverseLinkedList(head);

    printLinkedList(head);

    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}"
22742249,pes1202201301,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Define a structure for a polynomial term (node)
struct Term {
    int coefficient;
    int power;
    struct Term* next;
};

// Function to create a new term node
struct Term* createTerm(int coeff, int power) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->power = power;
    newTerm->next = NULL;
    return newTerm;
}

// Function to insert a term at the end of a linked list
void insertTerm(struct Term** head, int coeff, int power) {
    struct Term* newTerm = createTerm(coeff, power);
    if (*head == NULL) {
        *head = newTerm;
    } else {
        struct Term* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newTerm;
    }
}

// Function to print a polynomial
void printPolynomial(struct Term* head) {
    struct Term* current = head;
    while (current != NULL) {
        printf(""%d "", current->coefficient);
        current = current->next;
    }
    printf(""\n"");
}

// Function to add two polynomials and return the result
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->power > poly2->power) {
            insertTerm(&result, poly1->coefficient, poly1->power);
            poly1 = poly1->next;
        } else if (poly1->power < poly2->power) {
            insertTerm(&result, poly2->coefficient, poly2->power);
            poly2 = poly2->next;
        } else {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) {
                insertTerm(&result, sumCoeff, poly1->power);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    // Add remaining terms from poly1 and poly2 (if any)
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->power);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->power);
        poly2 = poly2->next;
    }
    
    return result;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        if (i < n) {
            insertTerm(&poly1, coeff, power);
        } else {
            insertTerm(&poly2, coeff, power);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
"
22742249,pes1202201301,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    
    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    
    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);
    
    struct Node* head = NULL;
    struct Node* prevNode = NULL;
    
    for (int i = 0; i < numNodes; i++) {
        int val;
        scanf(""%d"", &val);
        
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = val;
        newNode->next = NULL;
        
        if (prevNode == NULL) {
            head = newNode;
        } else {
            prevNode->next = newNode;
        }
        
        prevNode = newNode;
    }
    
    struct Node* reversedHead = reverseLinkedList(head);
    printLinkedList(reversedHead);
    
    return 0;
}"
22742254,PES1UG22CS086,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct polynomial{
    int coef;
    int po;
    struct polynomial* next;
}POLY;
POLY* addpoly(POLY* p1, POLY* p2,POLY* ans);
int main() {
    int n,m;
    scanf(""%d %d"", &n, &m);
    POLY* p1=(POLY*)malloc(sizeof(POLY));
    POLY* t1=p1;
    POLY* p2=(POLY*)malloc(sizeof(POLY));
    POLY* t2=p2;
    POLY* ans=(POLY*)malloc(sizeof(POLY));
    int c,p;
    if(n>=1){
        scanf(""%d %d"", &c,&p);
        p1->coef=c;
        p1->po=p;
        p1->next=NULL;
        for(int i=1; i<n; i++){
            p1->next=(POLY*)malloc(sizeof(POLY));
            p1=p1->next;
            scanf(""%d %d"", &c,&p);
            p1->coef=c;
            p1->po=p;
            p1->next=NULL;
        }
    }
    if(m>=1){
        scanf(""%d %d"", &c,&p);
        p2->coef=c;
        p2->po=p;
        p2->next=NULL;
        for(int i=1; i<m; i++){
            p2->next=(POLY*)malloc(sizeof(POLY));
            p2=p2->next;
            scanf(""%d %d"", &c,&p);
            p2->coef=c;
            p2->po=p;
            p2->next=NULL;
        }
    }
    ans=addpoly(t1,t2,ans);
    while(ans){
        printf(""%d "", ans->coef);
        ans=ans->next;
    }
    return 0;
}
POLY* addpoly(POLY* p1, POLY* p2,POLY* ans){
    POLY* temp=ans;
    int f=0;
    while(p1 && p2){
        if(p1->po>p2->po){
            if(f==1){
                ans->next = (POLY*)malloc(sizeof(POLY));
                ans=ans->next;
            }
            ans->po=p1->po;
            ans->coef=p1->coef;
            f=1;
            p1=p1->next;
            ans->next=NULL;
        }
        else if(p1->po<p2->po){
            if(f==1){
                ans->next = (POLY*)malloc(sizeof(POLY));
                ans=ans->next;
            }
            ans->po=p2->po;
            ans->coef=p2->coef;
            f=1;
            p2=p2->next;
            ans->next=NULL;
        }
        else if(p1->po == p2->po){
            if(f==1){
                ans->next = (POLY*)malloc(sizeof(POLY));
                ans=ans->next;
            }
            ans->po=p1->po;
            ans->coef=p1->coef + p2->coef;
            f=1;
            p1=p1->next;
            p2=p2->next;
            ans->next=NULL;
        }
    }
    while(p1){
        if(f==1){
                ans->next = (POLY*)malloc(sizeof(POLY));
                ans=ans->next;
            }
            ans->po=p1->po;
            ans->coef=p1->coef;
            f=1;
            p1=p1->next;
            ans->next=NULL;
    }
    while(p2){
        if(f==1){
            ans->next = (POLY*)malloc(sizeof(POLY));
            ans=ans->next;
        }
        ans->po=p2->po;
        ans->coef=p2->coef;
        f=1;
        p2=p2->next;
        ans->next=NULL;
    }
   return temp;
}
"
22742254,PES1UG22CS086,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct linkednodes{
    int data;
    struct linkednodes* next;
}NODE;
NODE* revList(NODE* head);
int main() {
    int n; int ele;
    scanf(""%d"", &n);
    NODE* head=(NODE*) malloc(sizeof(NODE));
    if (n>=1){
        scanf(""%d"", &ele);
        head->data=ele;
        head->next=NULL;
        NODE* temp=head;
        for (int i=1; i<n; i++){
            head->next =(NODE*) malloc(sizeof(NODE));
            head=head->next;
            scanf(""%d"", &ele);
            head->data=ele;
            head->next=NULL;
        }
        head = revList(temp);
        while(head){
            printf(""%d"", head->data);
            head=head->next;
        }
    }
    return 0;
}
NODE* revList(NODE* head){
    NODE* ans=NULL;
    NODE* temp;
    NODE* curr=head;
    while(curr){
        temp=curr->next;
        curr->next=ans;
        ans=curr;
        curr=temp;
    }
    return ans;
}
"
22742258,PES1UG22CS125,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term
{
    int coeff;
    int exp;
    struct Term* next;
};
typedef struct Term Term;
Term* create(int coef, int exp)
{
    Term* term = (Term*)malloc(sizeof(Term));
    term->coeff = coef;
    term->exp = exp;
    term->next = NULL;
    return term;
}
void insert(Term** pol, int coef, int exp) {
    Term* term = create(coef, exp);

    if (*pol == NULL) {
        *pol = term;
    } else {
        Term* curr = *pol;
        while (curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = term;
    }
}
Term* add(Term* pol1, Term* pol2) {
    Term* result = NULL;
    while (pol1 != NULL && pol2 != NULL) {
        if (pol1->exp > pol2->exp) {
            insert(&result, pol1->coeff, pol1->exp);
            pol1 = pol1->next;
        } else if (pol1->exp < pol2->exp) {
            insert(&result, pol2->coeff, pol2->exp);
            pol2 = pol2->next;
        } else {
            int sumCoef = pol1->coeff + pol2->coeff;
            if (sumCoef != 0) {
                insert(&result, sumCoef, pol1->exp);
            }
            pol1 = pol1->next;
            pol2 = pol2->next;
        }
    }
    while (pol1 != NULL) {
        insert(&result, pol1->coeff, pol1->exp);
        pol1 = pol1->next;
    }

    while (pol2 != NULL) {
        insert(&result, pol2->coeff, pol2->exp);
        pol2 = pol2->next;
    }

    return result;
}
void print(Term* pol) {
    if (pol == NULL) {
        // printf(""0"");
        return;
    }

    while (pol != NULL) {
        printf(""%d "", pol->coeff);
        if (pol->next != NULL) {
        }
        pol = pol->next;
    }
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    Term* pol1 = NULL;
    Term* pol2 = NULL;
    for (int i = 0; i < n + m; i++) 
    {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        if (i < n)
        {
            insert(&pol1, coef, exp);
        }
        else
        {
            insert(&pol2, coef, exp);
        }
    }

    Term* result = add(pol1, pol2);
    print(result);
    return 0;
}

"
22742258,PES1UG22CS125,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
typedef struct Node Node;
Node* createNode(int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}
Node* End(Node* head, int value) {
    Node* newNode = createNode(value);

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }

    return head;
}
void reverse(Node* p) 
{
    if(p==NULL)
        return;
    else
    {
        reverse(p->next);
        printf(""%d"",p->data);
    }
}
int main()
{
    int n;
    scanf(""%d"", &n);

    Node* first = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        first = End(first, value);
    }
    reverse(first);
    return 0;
}



"
22742262,PES1UG22CS072,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct poly {
    int coef;
    int pow;
    struct poly* next;
};

void createNode(struct poly** poly, int coeff, int exp) {
    struct poly* new = (struct poly*)malloc(sizeof(struct poly));
    new->coef = coeff;
    new->pow = exp;
    new->next = NULL;

    if (*poly == NULL) {
        *poly = new;
    } else {
        struct poly* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = new;
    }
}

struct poly* addPolynomials(struct poly* f1, struct poly* f2) {
    struct poly* result = NULL;

    while (f1 != NULL && f2 != NULL) {
        if (f1->pow > f2->pow) {
            createNode(&result, f1->coef, f1->pow);
            f1 = f1->next;
        } else if (f1->pow < f2->pow) {
            createNode(&result, f2->coef, f2->pow);
            f2 = f2->next;
        } else {
            createNode(&result, f1->coef + f2->coef, f1->pow);
            f1 = f1->next;
            f2 = f2->next;
        }
    }

    while (f1 != NULL) {
        createNode(&result, f1->coef, f1->pow);
        f1 = f1->next;
    }
    while (f2 != NULL) {
        createNode(&result, f2->coef, f2->pow);
        f2 = f2->next;
    }

    return result;
}

void display(struct poly* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coef);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct poly* f1 = NULL;
    struct poly* f2 = NULL;
    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            createNode(&f1, coeff, exp);
        } else {
            createNode(&f2, coeff, exp);
        }
    }
    struct poly* result = addPolynomials(f1, f2);
    display(result);
    return 0;
}"
22742262,PES1UG22CS072,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct nums {
    int value;
    struct nums* next;
}n;

void createNode(n** head, int value) {
    n* newNode = (n*)malloc(sizeof(n));
    newNode->value = value;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        n* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void rev(n** head) {
    n* prev = NULL;
    n* current = *head;
    n* next = NULL;
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    *head = prev;
}

void display(n* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);
    n* head = NULL;
    for (int i = 0; i < numNodes; ++i) {
        int value;
        scanf(""%d"", &value);
        createNode(&head, value);
    }
    rev(&head);
    display(head);    
    return 0;
}"
22742263,pes1202202201,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coef, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coef;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    while (poly1 != NULL || poly2 != NULL) {
        int coef = 0, exp = 0;

        if (poly1 != NULL && poly2 != NULL) {
            if (poly1->exponent > poly2->exponent) {
                coef = poly1->coefficient;
                exp = poly1->exponent;
                poly1 = poly1->next;
            } else if (poly1->exponent < poly2->exponent) {
                coef = poly2->coefficient;
                exp = poly2->exponent;
                poly2 = poly2->next;
            } else {
                coef = poly1->coefficient + poly2->coefficient;
                exp = poly1->exponent;
                poly1 = poly1->next;
                poly2 = poly2->next;
            }
        } else if (poly1 != NULL) {
            coef = poly1->coefficient;
            exp = poly1->exponent;
            poly1 = poly1->next;
        } else if (poly2 != NULL) {
            coef = poly2->coefficient;
            exp = poly2->exponent;
            poly2 = poly2->next;
        }

        insertTerm(&result, coef, exp);
    }
    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
   
}"
22742263,pes1202202201,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* next;
};

struct node* createNode(int data) 
{
    struct node* newNode = (struct node*)malloc(sizeof(struct node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct node** head, int data) {
    struct node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void printLinkedList(struct node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

struct node* reverseLinkedList(struct node* head) {
    struct node* prev = NULL;
    struct node* current = head;
    struct node* next;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct node* head = NULL;
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertNode(&head, data);
    }

    head = reverseLinkedList(head);
    printLinkedList(head);
    
}"
22742264,PES1UG22CS118,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp)
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;
    return newNode;
}

void insert(struct Node** p, int coeff, int exp)
{
    struct Node* newNode = createNode(coeff, exp);
   
    if (*p == NULL || exp > (*p)->exponent) {
        newNode->next = *p;
        *p = newNode;
    }
    else
    {
        struct Node* current = *p;
        while (current->next != NULL && current->next->exponent >= exp)
            current = current->next;
        newNode->next = current->next;
        current->next = newNode;
    }
}

struct Node* addPolynomials(struct Node* p1, struct Node* p2)
{
    struct Node* result = NULL;
   
    while (p1 != NULL && p2 != NULL) {
        if (p1->exponent > p2->exponent) {
            insert(&result, p1->coefficient, p1->exponent);
            p1 = p1->next;
        }
        else if (p1->exponent < p2->exponent)
        {
            insert(&result, p2->coefficient, p2->exponent);
            p2 = p2->next;
        }
        else
        {
            int coeffSum = p1->coefficient + p2->coefficient;
            if (coeffSum != 0) {
                insert(&result, coeffSum, p1->exponent);
            }
            p1 = p1->next;
            p2 = p2->next;
        }
    }
   
    while (p1 != NULL)
    {
        insert(&result, p1->coefficient, p1->exponent);
        p1 = p1->next;
    }
   
    while (p2 != NULL)
    {
        insert(&result, p2->coefficient, p2->exponent);
        p2 = p2->next;
    }
   
    return result;
}

void printPolynomial(struct Node* p) {
    while (p != NULL) {
        printf(""%d "", p->coefficient);
        p = p->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
   
    struct Node* p1 = NULL;
    struct Node* p2 = NULL;
   
    for (int i = 0; i < n + m; i++)
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n)
            insert(&p1, coeff, exp);
        else
            insert(&p2, coeff, exp);
    }
   
    struct Node* result = addPolynomials(p1, p2);
    printPolynomial(result);
   
    return 0;
}
"
22742264,PES1UG22CS118,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

   
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }
return 0;
}
"
22742265,PES1202201118,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coef, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coef;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    while (poly1 != NULL || poly2 != NULL) {
        int coef = 0, exp = 0;

        if (poly1 != NULL && poly2 != NULL) {
            if (poly1->exponent > poly2->exponent) {
                coef = poly1->coefficient;
                exp = poly1->exponent;
                poly1 = poly1->next;
            } else if (poly1->exponent < poly2->exponent) {
                coef = poly2->coefficient;
                exp = poly2->exponent;
                poly2 = poly2->next;
            } else {
                coef = poly1->coefficient + poly2->coefficient;
                exp = poly1->exponent;
                poly1 = poly1->next;
                poly2 = poly2->next;
            }
        } else if (poly1 != NULL) {
            coef = poly1->coefficient;
            exp = poly1->exponent;
            poly1 = poly1->next;
        } else if (poly2 != NULL) {
            coef = poly2->coefficient;
            exp = poly2->exponent;
            poly2 = poly2->next;
        }

        insertTerm(&result, coef, exp);
    }
    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);


}
"
22742265,PES1202201118,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node
{
    int value;
    struct Node* next;
};

struct Node* createNode(int value) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node** head, int value) 
{
    struct Node* newNode = createNode(value);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void printLinkedList(struct Node* head) 
{
    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}

struct Node* reverseLinkedList(struct Node* head) 
{
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

int main() 
{
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) 
{
        int value;
        scanf(""%d"", &value);
        insertNode(&head, value);
    }

    head = reverseLinkedList(head);
    printLinkedList(head);


}"
22742268,PES1UG22CS108,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    
    if (*poly == NULL || exp > (*poly)->exponent) {
        newNode->next = *poly;
        *poly = newNode;
    } else {
        struct Node* current = *poly;
        while (current->next != NULL && current->next->exponent >= exp) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int coeffSum = poly1->coefficient + poly2->coefficient;
            if (coeffSum != 0) {
                insertTerm(&result, coeffSum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    
    return result;
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }
    
    struct Node* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22742268,PES1UG22CS108,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22742269,PES1202201336,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int c;
    int exp;
    struct Term* n;
};

void insertTerm(struct Term** p, int c, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL) {
        *p = newTerm;
    } else {
        struct Term* current = *p;
        while (current->n != NULL) {
            current = current->n;
        }
        current->n = newTerm;
    }
}

struct Term* addPolynomials(struct Term* p1, struct Term* p2) {
    struct Term* result = NULL;
    struct Term* current1 = p1;
    struct Term* current2 = p2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            insertTerm(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp) {
            insertTerm(&result, current2->c, current2->exp);
            current2 = current2->n;
        } else {
            insertTerm(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }
    
    while (current1 != NULL) {
        insertTerm(&result, current1->c, current1->exp);
        current1 = current1->n;
    }
    
    while (current2 != NULL) {
        insertTerm(&result, current2->c, current2->exp);
        current2 = current2->n;
    }
    
    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22742269,PES1202201336,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = createNode(value);

        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    head = reverseLinkedList(head);

    printLinkedList(head);

    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}
"
22742276,PES1UG22CS100,Polynomial Addition,15,"

#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
int value;
int power;
struct Node* next;
} Node;

void insert(Node** head, int value, int power) {
Node* new_node = (Node*)malloc(sizeof(Node));
new_node->value = value;
new_node->power = power;
new_node->next = NULL;

if (*head == NULL) {
*head = new_node;
} else {
Node* temp = *head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = new_node;
}
}

Node* addPolynomials(Node* poly1, Node* poly2) {
Node* result = NULL;

while (poly1 != NULL && poly2 != NULL) {
if (poly1->power > poly2->power) {
insert(&result, poly1->value, poly1->power);
poly1 = poly1->next;
} else if (poly1->power < poly2->power) {
insert(&result, poly2->value, poly2->power);
poly2 = poly2->next;
} else {
insert(&result, poly1->value + poly2->value, poly1->power);
poly1 = poly1->next;
poly2 = poly2->next;
}
}

while (poly1 != NULL) {
insert(&result, poly1->value, poly1->power);
poly1 = poly1->next;
}

while (poly2 != NULL) {
insert(&result, poly2->value, poly2->power);
poly2 = poly2->next;
}

return result;
}

// Function to print the polynomial linked list
void printPolynomial(Node* head) {
Node* temp = head;
while (temp != NULL) {
printf(""%d "", temp->value);
temp = temp->next;
}
printf(""\n"");
}

int main() {
int n, m;
scanf(""%d %d"", &n, &m);

Node* poly1 = NULL;
Node* poly2 = NULL;

for (int i = 0; i < n + m; i++) {
int value, power;
scanf(""%d %d"", &value, &power);
if (i < n) {
insert(&poly1, value, power);
} else {
insert(&poly2, value, power);
}
}

Node* result = addPolynomials(poly1, poly2);
printPolynomial(result);

return 0;
}

"
22742276,PES1UG22CS100,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct Node{
    int value;
    struct Node*next;
};
struct Node*reverseLinkedList(struct Node*head){
    struct Node*prev=NULL;
    struct Node*current=head;
    struct Node*nextNode;
    while (current!=NULL){
        nextNode=current->next;
        current->next=prev;
        prev=current;
        current=nextNode;
    }
    return prev;
}

void printList(struct Node*head){
    struct Node*current=head;
    while(current!=NULL){
        printf(""%d"",current->value);
        current=current->next;
    }
}
int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int numNode;
    scanf(""%d"",&numNode);
    struct Node*head=NULL;
    struct Node*current=NULL;
    for(int i=0;i<numNode;i++){
        int value;
        scanf(""%d"",&value);
        struct Node*newNode=(struct Node*)malloc(sizeof(struct Node));
        newNode->value=value;
        newNode->next=NULL;
        if(head==NULL){
            head=newNode;
            current=newNode;
        }else{
            current->next=newNode;
            current=newNode;
        }
    }
    head=reverseLinkedList(head);
    printList(head);
    current=head;
    while(current!=NULL){
        struct Node*temp=current;
        current=current->next;
        free(temp);
    }
    return 0;
}
"
22742281,pes1202203412,Polynomial Addition,15,"#include <stdio.h>

#include <stdlib.h>

struct Term {

    int coefficient;

    int exponent;

    struct Term* next;

};

void insertTerm(struct Term** poly, int coef, int exp) {

    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));

    newTerm->coefficient = coef;

    newTerm->exponent = exp;

    newTerm->next = NULL;

    if (*poly == NULL) {

        *poly = newTerm;

    } else {

        struct Term* temp = *poly;

        while (temp->next != NULL) {

            temp = temp->next;

        }

        temp->next = newTerm;

    }

}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {

    struct Term* result = NULL;

    while (poly1 != NULL || poly2 != NULL) {

        int coef = 0, exp = 0;

        if (poly1 != NULL && poly2 != NULL) {

            if (poly1->exponent > poly2->exponent) {

                coef = poly1->coefficient;

                exp = poly1->exponent;

                poly1 = poly1->next;

            } else if (poly1->exponent < poly2->exponent) {

                coef = poly2->coefficient;

                exp = poly2->exponent;

                poly2 = poly2->next;

            } else {

                coef = poly1->coefficient + poly2->coefficient;

                exp = poly1->exponent;

                poly1 = poly1->next;

                poly2 = poly2->next;

            }

        } else if (poly1 != NULL) {

            coef = poly1->coefficient;

            exp = poly1->exponent;

            poly1 = poly1->next;

        } else if (poly2 != NULL) {

            coef = poly2->coefficient;

            exp = poly2->exponent;

            poly2 = poly2->next;

        }

        insertTerm(&result, coef, exp);

    }

    return result;

}

void printPolynomial(struct Term* poly) {

    while (poly != NULL) {

        printf(""%d "", poly->coefficient);

        poly = poly->next;

    }

    printf(""\n"");

}

int main() {

    int n, m;

    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;

    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {

        int coef, exp;

        scanf(""%d %d"", &coef, &exp);

        if (i < n) {

            insertTerm(&poly1, coef, exp);

        } else {

            insertTerm(&poly2, coef, exp);

        }

    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;

}













    



   

    

    

 

    

        

       

  

    

   

        

    

    

    

  





  
    
    





   



 

 

  

   








 

     


    




            

          

  





         

      

        

        

        

        

    

    





    





  




















    

   





    
    

  

    

        



       

       

           

        

        

    





    



    



        

       

            

          

        

       

            

          

        

   

     

 

 

    















    





















    







   

    







"
22742281,pes1202203412,Reversing a Linked List,15,"#include<stdio.h>

#include<stdlib.h>

typedef struct node

{

int info;

struct node* next;

}NODE;

typedef struct llist

{

NODE* head;

NODE* cur;

}LLIST;

void printLinkedList(LLIST*pl) ;

void reverseLinkedList(LLIST*pl);

void initList(LLIST *pl)

{

pl->head=NULL;

pl->cur=NULL;

}

int main()

{

    LLIST *lobj = malloc(sizeof(LLIST));;

    initList(lobj);

    int n;

    if(n>=1000)

    {

    scanf(""%d"",&n);

    for (int i = 0; i < n; i++) {

    int value;

    scanf(""%d"", &value);

    NODE* temp=malloc(sizeof(NODE));

    temp->info=value;

    temp->next=NULL;

    if (lobj->head == NULL) {

            lobj->head = temp;

            lobj->cur = lobj->head;

        } else {

            lobj->cur->next = temp;

            lobj->cur = lobj->cur->next;

        }

    }

    reverseLinkedList(lobj);

    printLinkedList(lobj);

    }

    return 0;

    

}

void reverseLinkedList(LLIST*pl) {

    NODE* q = NULL;

    NODE* p = pl->head;

    NODE* temp = NULL;

    while (p != NULL) {

        temp = p->next;

        p->next = q;

        q = p;

        p = temp;

    }

    pl->head = q;

}

void printLinkedList(LLIST*pl) {

    NODE* p =pl->head;

    while (p != NULL) {

        printf(""%d"", p->info);

        p = p->next;

    }

}






   
    

"
22742283,PES1UG22CS082,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* res = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&res, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&res, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) 
            {
                insertTerm(&res, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&res, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&res, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return res;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* p1 = NULL;
    struct Term* p2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&p1, coeff, exp);
        } else 
        {
            insertTerm(&p2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(p1, p2);
    displayPolynomial(result);
    return 0;
}"
22742283,PES1UG22CS082,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct Node 
{
    int value;
    struct Node* next;
};
struct Node* createNode(int val) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = val;
    newNode->next = NULL;
    return newNode;
}
struct Node* reverseLinkedList(struct Node* head) 
{
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;
    while (current != NULL) 
    {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}
void printLinkedList(struct Node* head) 
{
    while (head != NULL) 
    {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}
int main() 
{
    int numNodes;
    scanf(""%d"", &numNodes);
    struct Node* head = NULL;
    struct Node* tail = NULL;
    for (int i = 0; i < numNodes; i++) 
    {
        int val;
        scanf(""%d"", &val);    
        struct Node* newNode = createNode(val);
        if (head == NULL) 
        {
            head = newNode;
            tail = newNode;
        } 
        else 
        {
            tail->next = newNode;
            tail = newNode;
        }
    }
    head = reverseLinkedList(head);
    printLinkedList(head);
    return 0;
}"
22742284,PES1UG22CS080,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coeff;
    int exp;
    struct Term *next;
};

typedef struct Term Term;

Term* createNode(int coeff, int exp) {
    Term *newTerm = (Term*)malloc(sizeof(Term));
    newTerm->coeff = coeff;
    newTerm->exp = exp;
    newTerm->next = NULL;
    return newTerm;
}

void insertTerm(Term **poly, int coeff, int exp) {
    Term *newTerm = createNode(coeff, exp);
    
    if (*poly == NULL) {
        *poly = newTerm;
        return;
    }
    
    Term *current = *poly;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newTerm;
}

void addPolynomials(Term *poly1, Term *poly2, Term **result) {
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertTerm(result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertTerm(result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            insertTerm(result, poly1->coeff + poly2->coeff, poly1->exp);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertTerm(result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertTerm(result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }
}

void printPolynomial(Term *poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Term *poly1 = NULL;
    Term *poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }
    
    Term *result = NULL;
    addPolynomials(poly1, poly2, &result);
    
    printPolynomial(result);
    
    return 0;
}
"
22742284,PES1UG22CS080,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

// Define the structure of a Node
struct Node {
    int value;
    struct Node* next;
};


struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev; 
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n); 

    
    struct Node* head = NULL;
    struct Node* current = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    
    head = reverseLinkedList(head);

    
    printLinkedList(head);

    return 0;
}
"
22742291,PES1202202169,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term
{
    int coeff;
    int exp;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp)
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coeff = coeff;
    newTerm->exp = exp;
    newTerm->next = NULL;

    if (*poly == NULL)
    {
        *poly = newTerm;
    } else
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2)
{
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL)
    {
        if (poly1->exp > poly2->exp)
        {
            insertTerm(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        }
        else if (poly1->exp < poly2->exp)
        {
            insertTerm(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        }
        else 
        {
            insertTerm(&result, poly1->coeff + poly2->coeff, poly1->exp);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL)
    {
        insertTerm(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }

    while (poly2 != NULL)
    {
        insertTerm(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }

    return result;
}
void printPolynomial(struct Term* poly)
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}
int main()
{
    int numTerms1, numTerms2;
    scanf(""%d %d"", &numTerms1, &numTerms2);

    struct Term* polynomial1 = NULL;
    struct Term* polynomial2 = NULL;

    for (int i = 0; i < numTerms1 + numTerms2; i++)
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < numTerms1) 
        {
            insertTerm(&polynomial1, coeff, exp);
        }
        else
        {
            insertTerm(&polynomial2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(polynomial1, polynomial2);
    printPolynomial(result);
    return 0;
}

"
22742291,PES1202202169,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct Node
{
    int value;
    struct Node* next;
};
struct Node* reverseLinkedList(struct Node* head)
{
    if (!head || !(head->next))
    {
        return head;
    }
    struct Node* prev = NULL;
    struct Node* current = head;
    while (current)
    {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    return prev;
}

void printLinkedList(struct Node* head)
{
    struct Node* current = head;
    while (current)
    {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (!head)
        {
            head = newNode;
            current = head;
        } else 
        {
            current->next = newNode;
            current = current->next;
        }
    }
    struct Node* reversedHead = reverseLinkedList(head);
    printLinkedList(reversedHead);
    while (reversedHead)
    {
        struct Node* temp = reversedHead;
        reversedHead = reversedHead->next;
        free(temp);
    }
    return 0;
}
"
22742296,PES1UG22CS112,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    
    if (*poly == NULL || exp > (*poly)->exponent) {
        newNode->next = *poly;
        *poly = newNode;
    } else {
        struct Node* current = *poly;
        while (current->next != NULL && current->next->exponent >= exp) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int coeffSum = poly1->coefficient + poly2->coefficient;
            if (coeffSum != 0) {
                insertTerm(&result, coeffSum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    
    return result;
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }
    
    struct Node* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22742296,PES1UG22CS112,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *link;
};
struct node *add(struct node *head, int key)
{
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    newnode->data = key;
    newnode->link = NULL;

    if (head == NULL)
    {
        head = newnode;
        return head;
    }
    newnode->link = head;
    head = newnode;
    return head;
}

void display(struct node *head)
{
    struct node *current = head;
    while (current != NULL)
    {
        printf(""%d"", current->data);
        current = current->link;
    }
}

int main()
{

    struct node *head = (struct node *)malloc(sizeof(struct node));
    head = NULL;
    int n;
    scanf(""%d"", &n);
    int a[n];
    for (int i = 0; i < n; i++)
    {
        scanf(""%d"", &a[i]);
    }
    for (int i = 0; i < n; i++)
    {
        head = add(head, a[i]);
    }

    display(head);
    return 0;
}"
22742298,PES1UG22CS068,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

typedef struct Term Term;

Term* createTerm(int coef, int expo) {
    Term* newTerm = (Term*)malloc(sizeof(Term));
    newTerm->coefficient = coef;
    newTerm->exponent = expo;
    newTerm->next = NULL;
    return newTerm;
}

Term* addPolynomials(Term* poly1, Term* poly2) {
    Term* result = NULL;
    Term* tail = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            if (tail == NULL) {
                result = tail = createTerm(poly1->coefficient, poly1->exponent);
            } else {
                tail->next = createTerm(poly1->coefficient, poly1->exponent);
                tail = tail->next;
            }
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            if (tail == NULL) {
                result = tail = createTerm(poly2->coefficient, poly2->exponent);
            } else {
                tail->next = createTerm(poly2->coefficient, poly2->exponent);
                tail = tail->next;
            }
            poly2 = poly2->next;
        } else {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) {
                if (tail == NULL) {
                    result = tail = createTerm(sumCoeff, poly1->exponent);
                } else {
                    tail->next = createTerm(sumCoeff, poly1->exponent);
                    tail = tail->next;
                }
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        if (tail == NULL) {
            result = tail = createTerm(poly1->coefficient, poly1->exponent);
        } else {
            tail->next = createTerm(poly1->coefficient, poly1->exponent);
            tail = tail->next;
        }
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        if (tail == NULL) {
            result = tail = createTerm(poly2->coefficient, poly2->exponent);
        } else {
            tail->next = createTerm(poly2->coefficient, poly2->exponent);
            tail = tail->next;
        }
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term* poly1 = NULL;
    Term* poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coef, expo;
        scanf(""%d %d"", &coef, &expo);
        if (poly1 == NULL) {
            poly1 = createTerm(coef, expo);
        } else {
            Term* temp = poly1;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = createTerm(coef, expo);
        }
    }

    for (int i = 0; i < m; i++) {
        int coef, expo;
        scanf(""%d %d"", &coef, &expo);
        if (poly2 == NULL) {
            poly2 = createTerm(coef, expo);
        } else {
            Term* temp = poly2;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = createTerm(coef, expo);
        }
    }

    Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22742298,PES1UG22CS068,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < n; ++i) {
        int value;
        scanf(""%d"", &value);
        struct Node* newNode = createNode(value);
        if (head == NULL) {
            head = newNode;
            current = head;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }
    struct Node* reversedHead = reverseLinkedList(head);
    printLinkedList(reversedHead);
    
    while (reversedHead != NULL) {
        struct Node* temp = reversedHead;
        reversedHead = reversedHead->next;
        free(temp);
    }

    return 0;
}
"
22742299,aritro_maiti04,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;
    return newNode;
}

void insert(struct Node** p, int coeff, int exp) 
{
    struct Node* newNode = createNode(coeff, exp);
    
    if (*p == NULL || exp > (*p)->exponent) {
        newNode->next = *p;
        *p = newNode;
    } 
    else 
    {
        struct Node* current = *p;
        while (current->next != NULL && current->next->exponent >= exp)
            current = current->next;
        newNode->next = current->next;
        current->next = newNode;
    }
}

struct Node* addPolynomials(struct Node* p1, struct Node* p2) 
{
    struct Node* result = NULL;
    
    while (p1 != NULL && p2 != NULL) {
        if (p1->exponent > p2->exponent) {
            insert(&result, p1->coefficient, p1->exponent);
            p1 = p1->next;
        } 
        else if (p1->exponent < p2->exponent) 
        {
            insert(&result, p2->coefficient, p2->exponent);
            p2 = p2->next;
        } 
        else 
        {
            int coeffSum = p1->coefficient + p2->coefficient;
            if (coeffSum != 0) {
                insert(&result, coeffSum, p1->exponent);
            }
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    
    while (p1 != NULL) 
    {
        insert(&result, p1->coefficient, p1->exponent);
        p1 = p1->next;
    }
    
    while (p2 != NULL) 
    {
        insert(&result, p2->coefficient, p2->exponent);
        p2 = p2->next;
    }
    
    return result;
}

void printPolynomial(struct Node* p) {
    while (p != NULL) {
        printf(""%d "", p->coefficient);
        p = p->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Node* p1 = NULL;
    struct Node* p2 = NULL;
    
    for (int i = 0; i < n + m; i++) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
            insert(&p1, coeff, exp);
        else
            insert(&p2, coeff, exp);
    }
    
    struct Node* result = addPolynomials(p1, p2);
    printPolynomial(result);
    
    return 0;
}

"
22742299,aritro_maiti04,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node 
{
    int data;
    struct Node* next;
};

struct Node* createNode(int data) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) 
{
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) 
{
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() 
{
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
"
22742304,PES1UG22CS120,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}"
22742304,PES1UG22CS120,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node 
{
    int value;
    struct Node* next;
};
void insertNode(struct Node** head, int value) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    
    if (*head == NULL) 
    {
        *head = newNode;
    } 
    else 
    {
        struct Node* current = *head;
        while (current->next != NULL) 
        {
            current = current->next;
        }
        current->next = newNode;
    }
}
void reverseLinkedList(struct Node** head) 
{
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* next = NULL;
    
    while (current != NULL) 
    {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    
    *head = prev;
}
void displayLinkedList(struct Node* head) 
{
    while (head != NULL) 
    {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}

int main() 
{
    int numNodes;
    scanf(""%d"", &numNodes);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < numNodes; ++i) 
    {
        int value;
        scanf(""%d"", &value);
        insertNode(&head, value);
    }
    
    reverseLinkedList(&head);
    displayLinkedList(head);
    
    return 0;
}"
22742307,pes1202201161,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
} NODE;

NODE* createNode(int coef, int expo) {
    NODE* newNode = (NODE*)malloc(sizeof(NODE));
    newNode->coefficient = coef;
    newNode->exponent = expo;
    newNode->next = NULL;
    return newNode;
}

NODE* addPolynomials(NODE* poly1, NODE* poly2) {
    NODE* result = NULL;
    NODE* tail = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            if (tail == NULL) {
                result = tail = createNode(poly1->coefficient, poly1->exponent);
            } 
            else {
                tail->next = createNode(poly1->coefficient, poly1->exponent);
                tail = tail->next;
            }
            poly1 = poly1->next;
        } 
        else if (poly1->exponent < poly2->exponent) {
            if (tail == NULL) {
                result = tail = createNode(poly2->coefficient, poly2->exponent);
            } 
            else {
                tail->next = createNode(poly2->coefficient, poly2->exponent);
                tail = tail->next;
            }
            poly2 = poly2->next;
        } 
        else {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) {
                if (tail == NULL) {
                    result = tail = createNode(sumCoeff, poly1->exponent);
                } 
                else {
                    tail->next = createNode(sumCoeff, poly1->exponent);
                    tail = tail->next;
                }
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        if (tail == NULL) {
            result = tail = createNode(poly1->coefficient, poly1->exponent);
        } else {
            tail->next = createNode(poly1->coefficient, poly1->exponent);
            tail = tail->next;
        }
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        if (tail == NULL) {
            result = tail = createNode(poly2->coefficient, poly2->exponent);
        } else {
            tail->next = createNode(poly2->coefficient, poly2->exponent);
            tail = tail->next;
        }
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(NODE* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    NODE* poly1 = NULL;
    NODE* poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coef, expo;
        scanf(""%d %d"", &coef, &expo);
        if (poly1 == NULL) {
            poly1 = createNode(coef, expo);
        } else {
            NODE* temp = poly1;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = createNode(coef, expo);
        }
    }

    for (int i = 0; i < m; i++) {
        int coef, expo;
        scanf(""%d %d"", &coef, &expo);
        if (poly2 == NULL) {
            poly2 = createNode(coef, expo);
        } else {
            NODE* temp = poly2;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = createNode(coef, expo);
        }
    }

    NODE* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}


"
22742307,pes1202201161,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct Node {
    int value;
    struct Node* next;
} NODE;

NODE* reverseLinkedList(NODE* head) {
    NODE* prev = NULL;
    NODE* current = head;
    
    while (current != NULL) {
        NODE* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    
    return prev;
}



int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    NODE* head = NULL;
    NODE* current = NULL;
    
    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);
        
        NODE* newNode = (NODE*)malloc(sizeof(NODE));
        newNode->value = value;
        newNode->next = NULL;
        
        if (head == NULL) {
            head = newNode;
            current = head;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    NODE* newHead = reverseLinkedList(head);
    
    NODE* print = newHead;
    while (print != NULL) {
        printf(""%d"", print->value);
        print= print->next;
    }


    return 0;
}"
22742310,PES1UG22CS107,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}"
22742310,PES1UG22CS107,Reversing a Linked List,15,undefined
22742314,PES1UG22CS088,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

typedef struct Term Term;

Term* createTerm(int coef, int expo) {
    Term* newTerm = (Term*)malloc(sizeof(Term));
    newTerm->coefficient = coef;
    newTerm->exponent = expo;
    newTerm->next = NULL;
    return newTerm;
}

Term* addPolynomials(Term* poly1, Term* poly2) {
    Term* result = NULL;
    Term* tail = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            if (tail == NULL) {
                result = tail = createTerm(poly1->coefficient, poly1->exponent);
            } else {
                tail->next = createTerm(poly1->coefficient, poly1->exponent);
                tail = tail->next;
            }
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            if (tail == NULL) {
                result = tail = createTerm(poly2->coefficient, poly2->exponent);
            } else {
                tail->next = createTerm(poly2->coefficient, poly2->exponent);
                tail = tail->next;
            }
            poly2 = poly2->next;
        } else {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) {
                if (tail == NULL) {
                    result = tail = createTerm(sumCoeff, poly1->exponent);
                } else {
                    tail->next = createTerm(sumCoeff, poly1->exponent);
                    tail = tail->next;
                }
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        if (tail == NULL) {
            result = tail = createTerm(poly1->coefficient, poly1->exponent);
        } else {
            tail->next = createTerm(poly1->coefficient, poly1->exponent);
            tail = tail->next;
        }
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        if (tail == NULL) {
            result = tail = createTerm(poly2->coefficient, poly2->exponent);
        } else {
            tail->next = createTerm(poly2->coefficient, poly2->exponent);
            tail = tail->next;
        }
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term* poly1 = NULL;
    Term* poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coef, expo;
        scanf(""%d %d"", &coef, &expo);
        if (poly1 == NULL) {
            poly1 = createTerm(coef, expo);
        } else {
            Term* temp = poly1;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = createTerm(coef, expo);
        }
    }

    for (int i = 0; i < m; i++) {
        int coef, expo;
        scanf(""%d %d"", &coef, &expo);
        if (poly2 == NULL) {
            poly2 = createTerm(coef, expo);
        } else {
            Term* temp = poly2;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = createTerm(coef, expo);
        }
    }

    Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22742314,PES1UG22CS088,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};

void insertNode(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void reverseLinkedList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* next = NULL;
    
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    
    *head = prev;
}


void displayLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < numNodes; ++i) {
        int data;
        scanf(""%d"", &data);
        insertNode(&head, data);
    }
    
    reverseLinkedList(&head);
    displayLinkedList(head);
    
    return 0;
}"
22742321,PES1UG22CS121,Polynomial Addition,15,"
#include <stdio.h>

#include <stdlib.h>

struct Term {

    int coefficient;

    int exponent;

    struct Term* next;

};

void insertTerm(struct Term** poly, int coef, int exp) {

    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));

    newTerm->coefficient = coef;

    newTerm->exponent = exp;

    newTerm->next = NULL;

    if (*poly == NULL) {

        *poly = newTerm;

    } else {

        struct Term* temp = *poly;

        while (temp->next != NULL) {

            temp = temp->next;

        }

        temp->next = newTerm;

    }

}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {

    struct Term* result = NULL;

    while (poly1 != NULL || poly2 != NULL) {

        int coef = 0, exp = 0;

        if (poly1 != NULL && poly2 != NULL) {

            if (poly1->exponent > poly2->exponent) {

                coef = poly1->coefficient;

                exp = poly1->exponent;

                poly1 = poly1->next;

            } else if (poly1->exponent < poly2->exponent) {

                coef = poly2->coefficient;

                exp = poly2->exponent;

                poly2 = poly2->next;

            } else {

                coef = poly1->coefficient + poly2->coefficient;

                exp = poly1->exponent;

                poly1 = poly1->next;

                poly2 = poly2->next;

            }

        } else if (poly1 != NULL) {

            coef = poly1->coefficient;

            exp = poly1->exponent;

            poly1 = poly1->next;

        } else if (poly2 != NULL) {

            coef = poly2->coefficient;

            exp = poly2->exponent;

            poly2 = poly2->next;

        }

        insertTerm(&result, coef, exp);

    }

    return result;

}

void printPolynomial(struct Term* poly) {

    while (poly != NULL) {

        printf(""%d "", poly->coefficient);

        poly = poly->next;

    }

    printf(""\n"");

}

int main() {

    int n, m;

    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;

    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {

        int coef, exp;

        scanf(""%d %d"", &coef, &exp);

        if (i < n) {

            insertTerm(&poly1, coef, exp);

        } else {

            insertTerm(&poly2, coef, exp);

        }

    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;

}"
22742321,PES1UG22CS121,Reversing a Linked List,15,"#include<stdio.h>

#include<stdlib.h>

typedef struct node

{

int info;

struct node* next;

}NODE;

typedef struct llist

{

NODE* head;

NODE* cur;

}LLIST;

void printLinkedList(LLIST*pl) ;

void reverseLinkedList(LLIST*pl);

void initList(LLIST *pl)

{

pl->head=NULL;

pl->cur=NULL;

}

int main()

{

    LLIST *lobj = malloc(sizeof(LLIST));;

    initList(lobj);

    int n;

    if(n>=1000)

    {

    scanf(""%d"",&n);

    for (int i = 0; i < n; i++) {

    int value;

    scanf(""%d"", &value);

    NODE* temp=malloc(sizeof(NODE));

    temp->info=value;

    temp->next=NULL;

    if (lobj->head == NULL) {

            lobj->head = temp;

            lobj->cur = lobj->head;

        } else {

            lobj->cur->next = temp;

            lobj->cur = lobj->cur->next;

        }

    }

    reverseLinkedList(lobj);

    printLinkedList(lobj);

    }

    return 0;

    

}

void reverseLinkedList(LLIST*pl) {

    NODE* q = NULL;

    NODE* p = pl->head;

    NODE* temp = NULL;

    while (p != NULL) {

        temp = p->next;

        p->next = q;

        q = p;

        p = temp;

    }

    pl->head = q;

}

void printLinkedList(LLIST*pl) {

    NODE* p =pl->head;

    while (p != NULL) {

        printf(""%d"", p->info);

        p = p->next;

    }

}"
22742326,PES1UG22CS078,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}
"
22742326,PES1UG22CS078,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

void insertNode(struct Node** head, int val) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = val;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void reverseLinkedList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* nextNode = NULL;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    *head = prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; ++i) {
        int val;
        scanf(""%d"", &val);
        insertNode(&head, val);
    }

    reverseLinkedList(&head);
    printLinkedList(head);

    return 0;
}"
22742328,PES1UG22CS075,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}"
22742328,PES1UG22CS075,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {
    int value;
    struct Node* next;
};
void insertNode(struct Node** head, int val) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = val;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}
void reverseLinkedList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* nextNode = NULL;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    *head = prev;
}
void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; ++i) {
        int val;
        scanf(""%d"", &val);
        insertNode(&head, val);
    }

    reverseLinkedList(&head);
    printLinkedList(head);

    return 0;
}"
22742338,PES1202202179,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int c;
    int e;
    struct node *next;
}NODE;


NODE* create_node(int c,int e){
    NODE* temp=(NODE*)malloc(sizeof(NODE));
    temp->c=c;
    temp->e=e;
    temp->next=NULL;
    return temp;
}

NODE* append(NODE* node,int c,int e){
    NODE* temp=node;
    while(node->next!=NULL){
        node=node->next;
    }
    node->next=create_node(c,e);
    return temp;
}

void display(NODE *node){
    while(node!=NULL){
        printf(""%d "",node->c);
        node=node->next;
    }
}


void my_create_poly(NODE**);
void my_show_poly(NODE*);
void add(NODE**,NODE*,NODE*);


int main(){
    NODE* p1;
    NODE* p2;
    int m,n;
    scanf(""%d %d"",&m,&n);
    
    for(int i=0;i<m;i++){
        int c_temp;
        int e_temp;
        scanf(""%d %d"", &c_temp,&e_temp);
        if(i==0){
            p1=create_node(c_temp,e_temp);
        }else{
            p1=append(p1,c_temp,e_temp);
        }
    }
    
    for(int i=0;i<n;i++){
        int c_temp;
        int e_temp;
        scanf(""%d %d"", &c_temp,&e_temp);
        if(i==0){
            p2=create_node(c_temp,e_temp);
        }else{
            p2=append(p2,c_temp,e_temp);
        }
    }

    NODE* result;
    add(&result,p1,p2);
    display(result);

    return 0;
}

void my_show_poly(NODE*node){
    while(node!=NULL){
        printf(""%dx^%d"",node->c,node->e);
        node=node->next;
        if(node!=NULL)
            printf(""+"");
    }
}

void add(NODE**result,NODE*poly1,NODE*poly2){
    NODE*tmp_node;
    tmp_node=(NODE*)malloc(sizeof(NODE));
    tmp_node->next=NULL;
    *result=tmp_node;

    while(poly1&&poly2){
        if(poly1->e > poly2->e){
            tmp_node->e=poly1->e;
            tmp_node->c=poly1->c;
            poly1=poly1->next;
        }
        else if(poly1->e<poly2->e){
            tmp_node->e=poly2->e;
            tmp_node->c=poly2->c;
            poly2=poly2->next;
        }
        else{
            tmp_node->e=poly1->e;
            tmp_node->c=poly1->c+poly2->c;

            poly1=poly1->next;
            poly2=poly2->next;
        }

        if(poly1&&poly2){
            tmp_node->next=(NODE*)malloc(sizeof(NODE));
            tmp_node=tmp_node->next;
            tmp_node->next=NULL;
        }
    }

    while(poly1||poly2){
        tmp_node->next=(NODE*)malloc(sizeof(NODE));
        tmp_node=tmp_node->next;
        tmp_node->next=NULL;
        if(poly1){
            tmp_node->e=poly1->e;
            tmp_node->c=poly1->c;
            poly1=poly1->next;
        }
        if(poly2){
            tmp_node->e=poly2->e;
            tmp_node->c=poly2->c;
            poly2=poly2->next;
        }
    }
}"
22742338,PES1202202179,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node* next;
}NODE;

NODE* create_node(int n){
    NODE* p=(NODE*)malloc(sizeof(NODE));
    p->data=n;
    p->next=NULL;
    return p;
}

NODE* insert_end(NODE* head,int n){
    NODE* p=head;
    while(head->next!=NULL){
        head=head->next;
    }
    head->next=create_node(n);
    return p;
}

void print(NODE *head){
    NODE* p=head;
    if(head==NULL){
        printf(""The list is empty\n"");
    }
    else{
        while(p!=NULL){
            printf(""%d"",p->data);
            p=p->next;
        }
    }
    printf(""\n\n\n"");
}

NODE* reverse(NODE* head){
    NODE* previous_node = NULL;
    NODE* current_node = head;
    NODE* next = NULL;
    while (current_node != NULL) {
        next = current_node->next;
        current_node->next = previous_node;
        previous_node = current_node;
        current_node = next;
    }
    return previous_node;
}

int main() {
    int length;
    scanf(""%d"",&length);
    if(length!=0){
        int n;
        scanf(""%d"",&n);
        NODE* head=create_node(n);

        for(int i=0;i<(length-1);i++){
            scanf(""%d"",&n);
            head=insert_end(head,n);
        }

        head=reverse(head);
        print(head);
    }
    return 0;
}"
22742339,PES1UG22CS122_AR,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}"
22742339,PES1UG22CS122_AR,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct Node 
{
    int value;
    struct Node* next;
};
struct Node* createNode(int val) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = val;
    newNode->next = NULL;
    return newNode;
}
struct Node* reverseLinkedList(struct Node* head) 
{
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;
    while (current != NULL) 
    {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}
void printLinkedList(struct Node* head) 
{
    while (head != NULL) 
    {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}
int main() 
{
    int numNodes;
    scanf(""%d"", &numNodes);
    struct Node* head = NULL;
    struct Node* tail = NULL;
    for (int i = 0; i < numNodes; i++) 
    {
        int val;
        scanf(""%d"", &val);    
        struct Node* newNode = createNode(val);
        if (head == NULL) 
        {
            head = newNode;
            tail = newNode;
        } 
        else 
        {
            tail->next = newNode;
            tail = newNode;
        }
    }
    head = reverseLinkedList(head);
    printLinkedList(head);
    return 0;
}"
22742344,PES1UG22CS083,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>


struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}
"
22742344,PES1UG22CS083,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>


struct Node {
    int value;
    struct Node* next;
};


void insertNode(struct Node** head, int val) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = val;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}


void reverseLinkedList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* nextNode = NULL;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    *head = prev;
}


void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; ++i) {
        int val;
        scanf(""%d"", &val);
        insertNode(&head, val);
    }

    reverseLinkedList(&head);
    printLinkedList(head);

    return 0;
}
"
22742355,PES1UG22CS090,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



// Structure for a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to create a new term
struct Term* createTerm(int coefficient, int exponent) {
    struct Term* term = (struct Term*)malloc(sizeof(struct Term));
    term->coefficient = coefficient;
    term->exponent = exponent;
    term->next = NULL;
    return term;
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    struct Term* current = NULL;

    while (poly1 != NULL || poly2 != NULL) {
        if (poly1 == NULL || (poly2 != NULL && poly2->exponent > poly1->exponent)) {
            if (result == NULL) {
                result = createTerm(poly2->coefficient, poly2->exponent);
                current = result;
            } else {
                current->next = createTerm(poly2->coefficient, poly2->exponent);
                current = current->next;
            }
            poly2 = poly2->next;
        } else if (poly2 == NULL || poly1->exponent > poly2->exponent) {
            if (result == NULL) {
                result = createTerm(poly1->coefficient, poly1->exponent);
                current = result;
            } else {
                current->next = createTerm(poly1->coefficient, poly1->exponent);
                current = current->next;
            }
            poly1 = poly1->next;
        } else {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) {
                if (result == NULL) {
                    result = createTerm(sumCoeff, poly1->exponent);
                    current = result;
                } else {
                    current->next = createTerm(sumCoeff, poly1->exponent);
                    current = current->next;
                }
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    return result;
}

// Function to print a polynomial
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);

        if (i < n) {
            if (poly1 == NULL) {
                poly1 = createTerm(coefficient, exponent);
            } else {
                struct Term* temp = poly1;
                while (temp->next != NULL) {
                    temp = temp->next;
                }
                temp->next = createTerm(coefficient, exponent);
            }
        } else {
            if (poly2 == NULL) {
                poly2 = createTerm(coefficient, exponent);
            } else {
                struct Term* temp = poly2;
                while (temp->next != NULL) {
                    temp = temp->next;
                }
                temp->next = createTerm(coefficient, exponent);
            }
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22742355,PES1UG22CS090,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



// Structure for a node in the linked list
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to reverse the linked list
struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode = NULL;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

// Function to print the linked list
void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        
        if (head == NULL) {
            head = createNode(data);
        } else {
            struct Node* temp = head;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = createNode(data);
        }
    }

    // Reverse the linked list
    head = reverseLinkedList(head);

    // Print the reversed linked list
    printLinkedList(head);

    return 0;
}"
22742362,PES1UG22CS093,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}"
22742362,PES1UG22CS093,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct Node 
{
    int value;
    struct Node* next;
};
struct Node* createNode(int val) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = val;
    newNode->next = NULL;
    return newNode;
}
struct Node* reverseLinkedList(struct Node* head) 
{
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;
    while (current != NULL) 
    {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}
void printLinkedList(struct Node* head) 
{
    while (head != NULL) 
    {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}
int main() 
{
    int numNodes;
    scanf(""%d"", &numNodes);
    struct Node* head = NULL;
    struct Node* tail = NULL;
    for (int i = 0; i < numNodes; i++) 
    {
        int val;
        scanf(""%d"", &val);    
        struct Node* newNode = createNode(val);
        if (head == NULL) 
        {
            head = newNode;
            tail = newNode;
        } 
        else 
        {
            tail->next = newNode;
            tail = newNode;
        }
    }
    head = reverseLinkedList(head);
    printLinkedList(head);
    return 0;
}"
22742385,PES1UG22CS089,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int coeff;
    int power;
    struct node* next;
} NODE;

NODE* createNode(int coeff, int exp) {
    NODE* newNode = (NODE*)malloc(sizeof(NODE));
    newNode->coeff = coeff;
    newNode->power = exp;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(NODE** poly, int coeff, int exp) {
    NODE* newNode = createNode(coeff, exp);
    
    if (*poly == NULL || exp > (*poly)->power) {
        newNode->next = *poly;
        *poly = newNode;
    } else {
        NODE* current = *poly;
        while (current->next != NULL && current->next->power >= exp) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

NODE* addPolynomials(NODE* poly1, NODE* poly2) {
    NODE* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->power > poly2->power) {
            insertTerm(&result, poly1->coeff, poly1->power);
            poly1 = poly1->next;
        } else if (poly1->power < poly2->power) {
            insertTerm(&result, poly2->coeff, poly2->power);
            poly2 = poly2->next;
        } else {
            int coeffSum = poly1->coeff + poly2->coeff;
            if (coeffSum != 0) {
                insertTerm(&result, coeffSum, poly1->power);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coeff, poly1->power);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coeff, poly2->power);
        poly2 = poly2->next;
    }
    
    return result;
}

void printPolynomial(NODE* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    NODE* poly1 = NULL;
    NODE* poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } 
        else {
            insertTerm(&poly2, coeff, exp);
        }
    }
    
    NODE* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;

}
"
22742385,PES1UG22CS089,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node* next;
} NODE;

void print_sll(NODE* head) {
    
    while(head) {
        printf(""%d"", head->data);
        head = head->next;
    }
}

void push_back_sll(NODE** head, int data) {
    NODE* temp = (NODE*) malloc(sizeof(NODE));
    temp -> data = data;
    temp -> next = NULL;
    
    NODE* p = *head;
    
    if (!p) {
        *head = temp;
        return;
    }
    
    while (p->next) {
        p = p->next;
    }
    p -> next = temp;
}

void reverse_ll(NODE** head) {
    NODE* prev, *curr, *next;
    prev = NULL;
    curr = *head;
    next = NULL;
    
    while(curr) {
        next = curr -> next;
        curr-> next = prev;
        prev = curr;
        curr = next;
    }
    *head = prev;
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    int n;
    scanf(""%d"", &n);
    NODE* head;
    
    for(int i = 0; i < n; i++) {
        int data;
        scanf(""%d "", &data);
        push_back_sll(&head, data);
    }
    
    reverse_ll(&head);
    print_sll(head);
    return 0;
}
"
22742386,PES1202201060,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newNode = (struct Term*)malloc(sizeof(struct Term));
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;

    if (*poly == NULL) {
        *poly = newNode;
    } else {
        struct Term* current = *poly;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
"
22742386,PES1202201060,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;           
    struct Node* next;  
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* previous = NULL;
    struct Node* current = head;
    
    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = previous;
        previous = current;
        current = nextNode;
    }
    
    return previous;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    
    while (current != NULL) {
        printf(""%d"", current->data);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);  
    
    struct Node* head = NULL;
    struct Node* tail = NULL;
    
   
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);  
        
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = value;
        newNode->next = NULL;
        
        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }
    
  
    struct Node* reversedHead = reverseLinkedList(head);
    
    
    printLinkedList(reversedHead);
    
   
    while (reversedHead != NULL) {
        struct Node* temp = reversedHead;
        reversedHead = reversedHead->next;
        free(temp);
    }

    return 0;
}

"
22742390,PES1UG22CS069,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct node 
{
    int coefficient;
    int exponent;
    struct node* next;
};
void insertnode(struct node** node, int coeff, int exp) 
{
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->coefficient = coeff;
    newnode->exponent = exp;
    newnode->next = NULL;
    
    if (*node == NULL)
    {
        *node = newnode;
    } else 
    {
        struct node* current = *node;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newnode;
    }
}
struct node* addPolynomials(struct node* poly1, struct node* poly2) 
{
    struct node* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertnode(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertnode(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertnode(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertnode(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertnode(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct node* node) 
{
    while (node != NULL) 
    {
        printf(""%d "", node->coefficient);
        node = node->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct node* poly1 = NULL;
    struct node* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertnode(&poly1, coeff, exp);
        } else 
        {
            insertnode(&poly2, coeff, exp);
        }
    }
    struct node* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}
"
22742390,PES1UG22CS069,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct node 
{
    int info;
    struct node* next;
};
struct node* createNode(int val) 
{
    struct node* newNode = (struct node*)malloc(sizeof(struct node));
    newNode->info = val;
    newNode->next = NULL;
    return newNode;
}
struct node* reverseLinkedList(struct node* head) 
{
    struct node* prev = NULL;
    struct node* current = head;
    struct node* next = NULL;
    while (current != NULL) 
    {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}
void printLinkedList(struct node* head) 
{
    while (head != NULL) 
    {
        printf(""%d"", head->info);
        head = head->next;
    }
    printf(""\n"");
}
int main() 
{
    int number_of_nodes;
    scanf(""%d"", &number_of_nodes);
    struct node* head = NULL;
    struct node* tail = NULL;
    for (int i = 0; i < number_of_nodes; i++) 
    {
        int val;
        scanf(""%d"", &val);    
        struct node* newNode = createNode(val);
        if (head == NULL) 
        {
            head = newNode;
            tail = newNode;
        } 
        else 
        {
            tail->next = newNode;
            tail = newNode;
        }
    }
    head = reverseLinkedList(head);
    printLinkedList(head);
    return 0;
}"
22742399,PES1UG22CS076,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct list {
    int co_eff;
    int exp;
    struct list* next;
}NODE;

void insert_node(NODE** head, int coeff, int exp) {
    NODE* p = (NODE*)malloc(sizeof(NODE));
    p->co_eff = coeff;
    p->exp = exp;
    p->next = NULL;

    if (*head == NULL) {
        *head = p;
    } else {
         NODE* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = p;
    }
}

NODE* add_lists(NODE* current1, NODE* current2) {
    NODE* sum = NULL;

    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            insert_node(&sum, current1->co_eff, current1->exp);
            current1 = current1->next;
        } else if (current1->exp < current2->exp) {
            insert_node(&sum, current2->co_eff, current2->exp);
            current2 = current2->next;
        } else {
            insert_node(&sum, current1->co_eff + current2->co_eff, current1->exp);
            current1 = current1->next;
            current2 = current2->next;
        }
    }

    while (current1 != NULL) {
        insert_node(&sum, current1->co_eff, current1->exp);
        current1 = current1->next;
    }
    while (current2 != NULL) {
        insert_node(&sum, current2->co_eff, current2->exp);
        current2 = current2->next;
    }

    return sum;
}

void display_list(NODE* head) 
{
    while (head != NULL) 
    {
        printf(""%d "", head->co_eff);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    NODE* head1 = NULL;
    NODE* head2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
            insert_node(&head1, coeff, exp);
        else 
            insert_node(&head2, coeff, exp);
    }

    NODE* sum = add_lists(head1, head2);

    display_list(sum);

    return 0;
}"
22742399,PES1UG22CS076,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct list 
{
    int data;
    struct list* next;
}NODE;

void insert_Node(NODE** head, int value) 
{
    NODE* p = (NODE*)malloc(sizeof(NODE));
    p->data = value;
    p->next = NULL;

    if (*head == NULL) 
        *head = p;
    else
    {
        NODE* p1 = *head;
        while (p1->next != NULL) 
            p1 = p1->next;
        p1->next = p;
    }
}

void reverse_list(NODE** head) 
{
    NODE* previous = NULL;
    NODE* current = *head;
    NODE* next = NULL;

    while (current != NULL) 
    {
        next = current->next;
        current->next = previous;
        previous = current;
        current = next;
    }

    *head = previous;
}

void print_List(NODE* head) 
{
    while (head != NULL) 
    {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() 
{
    int n;
    scanf(""%d"", &n);

    NODE* head = NULL;

    for (int i = 0; i < n; ++i) 
    {
        int value;
        scanf(""%d"", &value);
        insert_Node(&head, value);
    }

    reverse_list(&head);
    print_List(head);

    return 0;
}"
22742409,PES1UG22CS102_AG,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}"
22742409,PES1UG22CS102_AG,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct Node 
{
    int value;
    struct Node* next;
};
struct Node* createNode(int val) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = val;
    newNode->next = NULL;
    return newNode;
}
struct Node* reverseLinkedList(struct Node* head) 
{
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;
    while (current != NULL) 
    {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}
void printLinkedList(struct Node* head) 
{
    while (head != NULL) 
    {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}
int main() 
{
    int numNodes;
    scanf(""%d"", &numNodes);
    struct Node* head = NULL;
    struct Node* tail = NULL;
    for (int i = 0; i < numNodes; i++) 
    {
        int val;
        scanf(""%d"", &val);    
        struct Node* newNode = createNode(val);
        if (head == NULL) 
        {
            head = newNode;
            tail = newNode;
        } 
        else 
        {
            tail->next = newNode;
            tail = newNode;
        }
    }
    head = reverseLinkedList(head);
    printLinkedList(head);
    return 0;
}"
22742410,pes1202203406,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

typedef struct Term Term;

Term* createTerm(int coef, int expo) {
    Term* newTerm = (Term*)malloc(sizeof(Term));
    newTerm->coefficient = coef;
    newTerm->exponent = expo;
    newTerm->next = NULL;
    return newTerm;
}

Term* addPolynomials(Term* poly1, Term* poly2) {
    Term* result = NULL;
    Term* tail = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            if (tail == NULL) {
                result = tail = createTerm(poly1->coefficient, poly1->exponent);
            } else {
                tail->next = createTerm(poly1->coefficient, poly1->exponent);
                tail = tail->next;
            }
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            if (tail == NULL) {
                result = tail = createTerm(poly2->coefficient, poly2->exponent);
            } else {
                tail->next = createTerm(poly2->coefficient, poly2->exponent);
                tail = tail->next;
            }
            poly2 = poly2->next;
        } else {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) {
                if (tail == NULL) {
                    result = tail = createTerm(sumCoeff, poly1->exponent);
                } else {
                    tail->next = createTerm(sumCoeff, poly1->exponent);
                    tail = tail->next;
                }
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        if (tail == NULL) {
            result = tail = createTerm(poly1->coefficient, poly1->exponent);
        } else {
            tail->next = createTerm(poly1->coefficient, poly1->exponent);
            tail = tail->next;
        }
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        if (tail == NULL) {
            result = tail = createTerm(poly2->coefficient, poly2->exponent);
        } else {
            tail->next = createTerm(poly2->coefficient, poly2->exponent);
            tail = tail->next;
        }
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term* poly1 = NULL;
    Term* poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coef, expo;
        scanf(""%d %d"", &coef, &expo);
        if (poly1 == NULL) {
            poly1 = createTerm(coef, expo);
        } else {
            Term* temp = poly1;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = createTerm(coef, expo);
        }
    }

    for (int i = 0; i < m; i++) {
        int coef, expo;
        scanf(""%d %d"", &coef, &expo);
        if (poly2 == NULL) {
            poly2 = createTerm(coef, expo);
        } else {
            Term* temp = poly2;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = createTerm(coef, expo);
        }
    }

    Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}

"
22742410,pes1202203406,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf(""Memory allocation failed!\n"");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void makelist(struct Node** head,int n)
{
    if(n==0)
        return;
    for(int i=0;i<n;i++)
    {
    int data;
    scanf(""%d"",&data);
    struct Node* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
    }
}

void displayrev(struct Node* head) {
    if (head == NULL) {
        //printf(""Linked list is empty.\n"");
        return;
    }
    struct Node* temp = head;
    while (temp != NULL) {
        printf(""%d"", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}


int main()
{
    struct Node* head = NULL;
    int n;
    scanf(""%d"",&n);
    makelist(&head,n);
    displayrev(head);
}
"
22742414,pes1202202123,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}
"
22742414,pes1202202123,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct Node 
{
    int value;
    struct Node* next;
};
struct Node* createNode(int val) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = val;
    newNode->next = NULL;
    return newNode;
}
struct Node* reverseLinkedList(struct Node* head) 
{
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;
    while (current != NULL) 
    {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}
void printLinkedList(struct Node* head) 
{
    while (head != NULL) 
    {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}
int main() 
{
    int numNodes;
    scanf(""%d"", &numNodes);
    struct Node* head = NULL;
    struct Node* tail = NULL;
    for (int i = 0; i < numNodes; i++) 
    {
        int val;
        scanf(""%d"", &val);    
        struct Node* newNode = createNode(val);
        if (head == NULL) 
        {
            head = newNode;
            tail = newNode;
        } 
        else 
        {
            tail->next = newNode;
            tail = newNode;
        }
    }
    head = reverseLinkedList(head);
    printLinkedList(head);
    return 0;
}
"
22742416,PES1202201200,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
typedef struct term 
{
    int coeff;
    int exp;
    struct term* next;
}TERM;
void insert(TERM** poly, int c, int e) 
{
    TERM* newTerm = (TERM*)malloc(sizeof(TERM));
    newTerm->coeff = c;
    newTerm->exp = e;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        TERM* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
TERM* addPolynomials(TERM* poly1, TERM* poly2) 
{
    TERM* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exp > poly2->exp) 
        {
            insert(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        }
        else if (poly1->exp < poly2->exp) 
        {
            insert(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coeff + poly2->coeff;
            if (sumCoeff != 0) 
            {
                insert(&result, sumCoeff, poly1->exp);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insert(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insert(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(TERM* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    TERM* poly1 = NULL;
    TERM* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insert(&poly1, coeff, exp);
        } else 
        {
            insert(&poly2, coeff, exp);
        }
    }
    TERM* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}"
22742416,PES1202201200,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node* next;
}NODE;
NODE* createNode(int value) 
{
    NODE* newNode = (NODE*)malloc(sizeof(NODE));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}
NODE* reverse(NODE* head) 
{
    NODE* prev = NULL;
    NODE* current = head;
    NODE* next = NULL;
    while (current != NULL) 
    {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}
void printData(NODE* head) 
{
    while (head != NULL) 
    {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}
int main() 
{
    int num;
    scanf(""%d"", &num);
    NODE* head = NULL;
    NODE* tail = NULL;
    for (int i = 0; i < num; i++) 
    {
        int val;
        scanf(""%d"", &val);    
        NODE* newNode = createNode(val);
        if (head == NULL) 
        {
            head = newNode;
            tail = newNode;
        } 
        else 
        {
            tail->next = newNode;
            tail = newNode;
        }
    }
    head = reverse(head);
    printData(head);
    return 0;
}
"
22742422,PES1202201067,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int c;
    int exp;
    struct Term* n;
};

void insertTerm(struct Term** p, int c, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL) {
        *p = newTerm;
    } else {
        struct Term* current = *p;
        while (current->n != NULL) {
            current = current->n;
        }
        current->n = newTerm;
    }
}

struct Term* addPolynomials(struct Term* p1, struct Term* p2) {
    struct Term* result = NULL;
    struct Term* current1 = p1;
    struct Term* current2 = p2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            insertTerm(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp) {
            insertTerm(&result, current2->c, current2->exp);
            current2 = current2->n;
        } else {
            insertTerm(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }
    
    while (current1 != NULL) {
        insertTerm(&result, current1->c, current1->exp);
        current1 = current1->n;
    }
    
    while (current2 != NULL) {
        insertTerm(&result, current2->c, current2->exp);
        current2 = current2->n;
    }
    
    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22742422,PES1202201067,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = createNode(value);

        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    head = reverseLinkedList(head);

    printLinkedList(head);

    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}
"
22742427,PES1UG22CS116,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct term {
    int head;
    int exponent;
    struct term* next;
};

typedef struct term term;

term* createTerm(int coef, int expo) {
    term* newTerm = (term*)malloc(sizeof(term));
    newTerm->head = coef;
    newTerm->exponent = expo;
    newTerm->next = NULL;
    return newTerm;
}

term* addPolynomials(term* poly1, term* poly2) {
    term* result = NULL;
    term* tail = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            if (tail == NULL) {
                result = tail = createTerm(poly1->head, poly1->exponent);
            } else {
                tail->next = createTerm(poly1->head, poly1->exponent);
                tail = tail->next;
            }
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            if (tail == NULL) {
                result = tail = createTerm(poly2->head, poly2->exponent);
            } else {
                tail->next = createTerm(poly2->head, poly2->exponent);
                tail = tail->next;
            }
            poly2 = poly2->next;
        } else {
            int sumCoeff = poly1->head + poly2->head;
            if (sumCoeff != 0) {
                if (tail == NULL) {
                    result = tail = createTerm(sumCoeff, poly1->exponent);
                } else {
                    tail->next = createTerm(sumCoeff, poly1->exponent);
                    tail = tail->next;
                }
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        if (tail == NULL) {
            result = tail = createTerm(poly1->head, poly1->exponent);
        } else {
            tail->next = createTerm(poly1->head, poly1->exponent);
            tail = tail->next;
        }
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        if (tail == NULL) {
            result = tail = createTerm(poly2->head, poly2->exponent);
        } else {
            tail->next = createTerm(poly2->head, poly2->exponent);
            tail = tail->next;
        }
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->head);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    term* poly1 = NULL;
    term* poly2 = NULL;

    for (int i = 0; i < n; i++) {
        int coef, expo;
        scanf(""%d %d"", &coef, &expo);
        if (poly1 == NULL) {
            poly1 = createTerm(coef, expo);
        } else {
            term* temp = poly1;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = createTerm(coef, expo);
        }
    }

    for (int i = 0; i < m; i++) {
        int coef, expo;
        scanf(""%d %d"", &coef, &expo);
        if (poly2 == NULL) {
            poly2 = createTerm(coef, expo);
        } else {
            term* temp = poly2;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = createTerm(coef, expo);
        }
    }

    term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
"
22742427,PES1UG22CS116,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>


struct Node {
    int value;
    struct Node* next;
};

void insertNode(struct Node** head, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void reverseLinkedList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* next = NULL;
    
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    
    *head = prev;
}


void displayLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < numNodes; ++i) {
        int value;
        scanf(""%d"", &value);
        insertNode(&head, value);
    }
    
    reverseLinkedList(&head);
    displayLinkedList(head);
    
    return 0;
}"
22742434,PES1202202254,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int coefficient;
    int exponent;
    struct node* next;
} Node;

void insert_node(Node** head, int coeff, int exp) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

Node* add_lists(Node* list1, Node* list2) {
    Node* sum = NULL;
    
    while (list1 != NULL && list2 != NULL) {
        if (list1->exponent > list2->exponent) {
            insert_node(&sum, list1->coefficient, list1->exponent);
            list1 = list1->next;
        } else if (list1->exponent < list2->exponent) {
            insert_node(&sum, list2->coefficient, list2->exponent);
            list2 = list2->next;
        } else {
            insert_node(&sum, list1->coefficient + list2->coefficient, list1->exponent);
            list1 = list1->next;
            list2 = list2->next;
        }
    }
    
    while (list1 != NULL) {
        insert_node(&sum, list1->coefficient, list1->exponent);
        list1 = list1->next;
    }
    
    while (list2 != NULL) {
        insert_node(&sum, list2->coefficient, list2->exponent);
        list2 = list2->next;
    }
    
    return sum;
}

void display_list(Node* head) {
    while (head != NULL) {
        printf(""%d "", head->coefficient);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    Node* list1 = NULL;
    Node* list2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n)
            insert_node(&list1, coeff, exp);
        else
            insert_node(&list2, coeff, exp);
    }

    Node* sum = add_lists(list1, list2);
    display_list(sum);
    return 0;
}
"
22742434,PES1202202254,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a node in the linked list
struct ListNode {
    int data;
    struct ListNode* next;
};

// Function to insert a new node at the end of the linked list
void insertNode(struct ListNode** head, int num) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->data = num;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct ListNode* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to reverse the linked list by rearranging nodes
void reverseLinkedList(struct ListNode** head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = *head;
    struct ListNode* nextNode = NULL;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    *head = prev;
}

// Function to print the linked list without separation
void printLinkedList(struct ListNode* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct ListNode* head = NULL;

    for (int i = 0; i < n; ++i) {
        int num;
        scanf(""%d"", &num);
        insertNode(&head, num);
    }

    reverseLinkedList(&head);
    printLinkedList(head);

    return 0;
}
"
22742437,PES1UG22CS066,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int expo;
    struct Node* next;
};

struct Node* NodeCreate(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->expo = exp;
    newNode->next = NULL;
    return newNode;
}

void InsertTerm(struct Node** polynomial, int coeff, int exp) {
    struct Node* newNode = NodeCreate(coeff, exp);
    
    if (*polynomial == NULL || exp > (*polynomial)->expo) {
        newNode->next = *polynomial;
        *polynomial = newNode;
    } else {
        struct Node* current = *polynomial;
        while (current->next != NULL && current->next->expo >= exp) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

struct Node* AddPolynomial(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->expo > poly2->expo) {
            InsertTerm(&result, poly1->coeff, poly1->expo);
            poly1 = poly1->next;
        } else if (poly1->expo < poly2->expo) {
            InsertTerm(&result, poly2->coeff, poly2->expo);
            poly2 = poly2->next;
        } else {
            int coeffSum = poly1->coeff + poly2->coeff;
            if (coeffSum != 0) {
                InsertTerm(&result, coeffSum, poly1->expo);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        InsertTerm(&result, poly1->coeff, poly1->expo);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        InsertTerm(&result, poly2->coeff, poly2->expo);
        poly2 = poly2->next;
    }
    
    return result;
}

void PrintPolynomial(struct Node* polynomial) {
    while (polynomial != NULL) {
        printf(""%d "", polynomial->coeff);
        polynomial = polynomial->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            InsertTerm(&poly1, coeff, exp);
        } else {
            InsertTerm(&poly2, coeff, exp);
        }
    }
    
    struct Node* result = AddPolynomial(poly1, poly2);
    PrintPolynomial(result);
    
return 0;
}
"
22742437,PES1UG22CS066,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct NODE {
    int value;
    struct NODE* next;
};

struct NODE* reverselist(struct NODE* head) {
    struct NODE* prev = NULL;
    struct NODE* current = head;
    struct NODE* nextNode = NULL;
    
    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    
    return prev;
}

void NewList(struct NODE* head) {
    struct NODE* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    struct NODE* head = NULL;
    struct NODE* tail = NULL;
    int numNodes;
    scanf(""%d"", &numNodes);

    for (int i = 0; i < numNodes; i++) {
        int val;
        scanf(""%d"", &val);

        struct NODE* newNode = (struct NODE*)malloc(sizeof(struct NODE));
        newNode->value = val;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    struct NODE* reversedHead = reverselist(head);

    NewList(reversedHead);
    struct NODE* current = reversedHead;
    while (current != NULL) {
        struct NODE* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
"
22742439,PES1UG22CS081,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}"
22742439,PES1UG22CS081,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node *next;
};
typedef struct Node Node;
Node *createNode(int data) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    return node;
}
Node *reverseLinkedList(Node *head) {
    Node *prev = NULL;
    Node *current = head;
    Node *next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}
void printLinkedList(Node *head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
}
int main() {
    int n;
    scanf(""%d"", &n);
    Node *head = NULL;
    Node *current = NULL;
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        Node *node = createNode(data);
        if (head == NULL) {
            head = node;
            current = node;
        } else {
            current->next = node;
            current = node;
        }
    }
    head = reverseLinkedList(head);
    printLinkedList(head);
    return 0;
}"
22742443,Ashmit_Sh4rma,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

typedef struct Term Term;
Term* createTerm(int coef, int exp) {
    Term* term = (Term*)malloc(sizeof(Term));
    term->coefficient = coef;
    term->exponent = exp;
    term->next = NULL;
    return term;
}
void insertTerm(Term** poly, int coef, int exp) {
    Term* term = createTerm(coef, exp);

    if (*poly == NULL) {
        *poly = term;
    } else {
        Term* curr = *poly;
        while (curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = term;
    }
}
Term* addPolynomials(Term* poly1, Term* poly2) {
    Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sumCoef = poly1->coefficient + poly2->coefficient;
            if (sumCoef != 0) {
                insertTerm(&result, sumCoef, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}
void printPolynomial(Term* poly) {
    if (poly == NULL) {
        printf(""0"");
        return;
    }

    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        if (poly->next != NULL) {
        }
        poly = poly->next;
    }
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term* poly1 = NULL;
    Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }

    Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    return 0;
}"
22742443,Ashmit_Sh4rma,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
typedef struct Node Node;
Node* createNode(int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}
Node* insertAtEnd(Node* head, int value) {
    Node* newNode = createNode(value);

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }

    return head;
}
Node* reverseLinkedList(Node* head) {
    Node* prev = NULL;
    Node* current = head;
    Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}
void printLinkedList(Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
}
int main() {
    int n;
    scanf(""%d"", &n);

    Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertAtEnd(head, value);
    }
    head = reverseLinkedList(head);
    printLinkedList(head);
    return 0;
}"
22742444,PES1202202272,Polynomial Addition,15,"#include<stdio.h>
#include<stdlib.h>

typedef struct link{
    int c;
    int e;
    struct link *next;
}NODE;


NODE* new_node(int c,int e){
    NODE* temp=(NODE*)malloc(sizeof(NODE));
    temp->c=c;
    temp->e=e;
    temp->next=NULL;
    return temp;
}

NODE* append(NODE* node,int c,int e){
    NODE* temp=node;
    while(node->next!=NULL){
        node=node->next;
    }
    node->next=new_node(c,e);
    return temp;
}

void display(NODE *node){
    while(node!=NULL){
        printf(""%d "",node->c);
        node=node->next;
    }
}

void add(NODE**,NODE*,NODE*);

int main(){
    NODE* polym;
    NODE* polyn;
    int m,n;
    scanf(""%d %d"",&m,&n);
    
    for(int i=0;i<m;i++){
        int c_temp;
        int e_temp;
        scanf(""%d %d"", &c_temp,&e_temp);
        if(i==0){
            polym=new_node(c_temp,e_temp);
        }else{
            polym=append(polym,c_temp,e_temp);
        }
    }
    
    for(int i=0;i<n;i++){
        int c_temp;
        int e_temp;
        scanf(""%d %d"", &c_temp,&e_temp);
        if(i==0){
            polyn=new_node(c_temp,e_temp);
        }else{
            polyn=append(polyn,c_temp,e_temp);
        }
    }

    NODE* result;
    add(&result,polym,polyn);
    display(result);

    return 0;
}

void add(NODE**result,NODE*poly1,NODE*poly2){
    NODE*tmp_node;
    tmp_node=(NODE*)malloc(sizeof(NODE));
    tmp_node->next=NULL;
    *result=tmp_node;

    while(poly1&&poly2){
        if(poly1->e > poly2->e){
            tmp_node->e=poly1->e;
            tmp_node->c=poly1->c;
            poly1=poly1->next;
        }
        else if(poly1->e<poly2->e){
            tmp_node->e=poly2->e;
            tmp_node->c=poly2->c;
            poly2=poly2->next;
        }
        else{
            tmp_node->e=poly1->e;
            tmp_node->c=poly1->c+poly2->c;

            poly1=poly1->next;
            poly2=poly2->next;
        }

        if(poly1&&poly2){
            tmp_node->next=(NODE*)malloc(sizeof(NODE));
            tmp_node=tmp_node->next;
            tmp_node->next=NULL;
        }
    }

    while(poly1||poly2){
        tmp_node->next=(NODE*)malloc(sizeof(NODE));
        tmp_node=tmp_node->next;
        tmp_node->next=NULL;
        if(poly1){
            tmp_node->e=poly1->e;
            tmp_node->c=poly1->c;
            poly1=poly1->next;
        }
        if(poly2){
            tmp_node->e=poly2->e;
            tmp_node->c=poly2->c;
            poly2=poly2->next;
        }
    }
}
"
22742444,PES1202202272,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node* next;
}NODE;

NODE* new_node(int n){
    NODE* temp=(NODE*)malloc(sizeof(NODE));
    temp->data=n;
    temp->next=NULL;
    return temp;
}

NODE* append(NODE* node,int n){
    NODE* temp=node;
    while(node->next!=NULL){
        node=node->next;
    }
    node->next=new_node(n);
    return temp;
}

void print(NODE *head){
    NODE* temp=head;
    if(head==NULL){
        printf(""empty\n"");
    }
    else{
        while(temp!=NULL){
            printf(""%d"",temp->data);
            temp=temp->next;
        }
    }
    printf(""\n"");
}

NODE* reverse(NODE* node){
    NODE* prev = NULL;
    NODE* current = node;
    NODE* next = NULL;
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}

int main() {
    int len;
    scanf(""%d"",&len);
    int n;
    if(len!=0){
        scanf(""%d"",&n);
        NODE* head=new_node(n);
    
        for(int i=0;i<(len-1);i++){
            scanf(""%d"",&n);
            head=append(head,n);
        }
        head=reverse(head);
        print(head);
    }
    
    return 0;
}"
22742445,PES1UG22CS092,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;
    return newNode;
}

void terminsert(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    
    if (*poly == NULL || exp > (*poly)->exponent) {
        newNode->next = *poly;
        *poly = newNode;
    } else {
        struct Node* current = *poly;
        while (current->next != NULL && current->next->exponent >= exp) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
        terminsert(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
        terminsert(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int coeffSum = poly1->coefficient + poly2->coefficient;
            if (coeffSum != 0) {
            terminsert(&result, coeffSum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
    terminsert(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
    terminsert(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    
    return result;
}

void displayoply(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
        terminsert(&poly1, coeff, exp);
        } else {
        terminsert(&poly2, coeff, exp);
        }
    }
    
    struct Node* result = addPolynomials(poly1, poly2);
    displayoply(result);
    
    return 0;
}"
22742445,PES1UG22CS092,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node* next;
} NODE;
void print_sll(NODE* head){
    
    while(head){
        printf(""%d"", head->data);
        head = head->next;
    }
}

void push_back_sll(NODE** head, int data) {
    NODE* temp = (NODE*) malloc(sizeof(NODE));
    temp -> data = data;
    temp -> next = NULL;
    
    NODE* p = *head;
    
    if (!p) {
        *head = temp;
        return;
    }
    
    while (p->next){
        p = p->next;
    }
    p -> next = temp;
}
void reverse_ll(NODE** head){
    NODE* prev, *curr, *next;
    prev = NULL;
    curr = *head;
    next = NULL;
    
    while(curr) {
        next = curr -> next;
        curr-> next = prev;
        prev = curr;
        curr = next;
    }
    *head = prev;
}

int main() {    
    int n;
    scanf(""%d"", &n);
    NODE* head;
        for(int i = 0; i < n; i++){
        int data;
        scanf(""%d "", &data);
        push_back_sll(&head, data);
    }    
    reverse_ll(&head);
    print_sll(head);
    return 0;
}"
22742472,PES1202202166,Polynomial Addition,15,"#include<stdio.h>
#include<stdlib.h>

typedef struct link{
    int c;
    int e;
    struct link *next;
}NODE;



void add(NODE**result,NODE*poly1,NODE*poly2){
    NODE*tmp_node;
    tmp_node=(NODE*)malloc(sizeof(NODE));
    tmp_node->next=NULL;
    *result=tmp_node;

    while(poly1&&poly2){
        if(poly1->e > poly2->e){
            tmp_node->e=poly1->e;
            tmp_node->c=poly1->c;
            poly1=poly1->next;
        }
        else if(poly1->e<poly2->e){
            tmp_node->e=poly2->e;
            tmp_node->c=poly2->c;
            poly2=poly2->next;
        }
        else{
            tmp_node->e=poly1->e;
            tmp_node->c=poly1->c+poly2->c;

            poly1=poly1->next;
            poly2=poly2->next;
        }

        if(poly1&&poly2){
            tmp_node->next=(NODE*)malloc(sizeof(NODE));
            tmp_node=tmp_node->next;
            tmp_node->next=NULL;
        }
    }

    while(poly1||poly2){
        tmp_node->next=(NODE*)malloc(sizeof(NODE));
        tmp_node=tmp_node->next;
        tmp_node->next=NULL;
        if(poly1){
            tmp_node->e=poly1->e;
            tmp_node->c=poly1->c;
            poly1=poly1->next;
        }
        if(poly2){
            tmp_node->e=poly2->e;
            tmp_node->c=poly2->c;
            poly2=poly2->next;
        }
    }
}


NODE* new_node(int c,int e){
    NODE* temp=(NODE*)malloc(sizeof(NODE));
    temp->c=c;
    temp->e=e;
    temp->next=NULL;
    return temp;
}

NODE* append(NODE* node,int c,int e){
    NODE* temp=node;
    while(node->next!=NULL){
        node=node->next;
    }
    node->next=new_node(c,e);
    return temp;
}

void display(NODE *node){
    while(node!=NULL){
        printf(""%d "",node->c);
        node=node->next;
    }
}


void add(NODE**,NODE*,NODE*);


int main(){
    NODE* polym;
    NODE* polyn;
    int m,n;
    scanf(""%d %d"",&m,&n);
    if(m == 0 ){
        return 0;    
    } 
    for(int i=0;i<m;i++){
        int c_temp;
        int e_temp;
        scanf(""%d %d"", &c_temp,&e_temp);
        if(i==0){
            polym=new_node(c_temp,e_temp);
        }else{
            polym=append(polym,c_temp,e_temp);
        }
    }
    
    for(int i=0;i<n;i++){
        int c_temp;
        int e_temp;
        scanf(""%d %d"", &c_temp,&e_temp);
        if(i==0){
            polyn=new_node(c_temp,e_temp);
        }else{
            polyn=append(polyn,c_temp,e_temp);
        }
    }

    NODE* result;
    add(&result,polym,polyn);
    display(result);

    return 0;
}
"
22742472,PES1202202166,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node* next;
}NODE;


NODE* reverse(NODE* node){
    NODE* prev = NULL;
    NODE* current = node;
    NODE* next = NULL;
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}

NODE* new(int n){
    NODE* temp=(NODE*)malloc(sizeof(NODE));
    temp->data=n;
    temp->next=NULL;
    return temp;
}

NODE* append(NODE* node,int n){
    NODE* temp=node;
    while(node->next!=NULL){
        node=node->next;
    }
    node->next=new(n);
    return temp;
}

void print(NODE *head){
    NODE* temp=head;
    if(head==NULL){
        printf(""empty\n"");
    }
    else{
        while(temp!=NULL){
            printf(""%d"",temp->data);
            temp=temp->next;
        }
    }
    printf(""\n"");
}


int main() {
    int x;
    scanf(""%d"",&x);
    if(x==0){
        return 0;
    }
    int n;
    scanf(""%d"",&n);
    NODE* head=new(n);

    for(int i=0;i<(x-1);i++){
        scanf(""%d"",&n);
        head=append(head,n);
    } 
    head=reverse(head);
    print(head);
    return 0;
}
"
22742489,Aryansinhab204,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct T {
    int coefficient;
    int exponent;
    struct T* next;
};

typedef struct T T;
T* createTerm(int coef, int exp) {
    T* term = (T*)malloc(sizeof(T));
    term->coefficient = coef;
    term->exponent = exp;
    term->next = NULL;
    return term;
}
void insertTerm(T** poly, int coef, int exp) {
    T* term = createTerm(coef, exp);

    if (*poly == NULL) {
        *poly = term;
    } else {
        T* curr = *poly;
        while (curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = term;
    }
}
T* addPolynomials(T* poly1, T* poly2) {
    T* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sumCoef = poly1->coefficient + poly2->coefficient;
            if (sumCoef != 0) {
                insertTerm(&result, sumCoef, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}
void printPolynomial(T* poly) {
    if (poly == NULL) {
        printf(""0"");
        return;
    }

    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        if (poly->next != NULL) {
        }
        poly = poly->next;
    }
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    T* poly1 = NULL;
    T* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }

    T* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    return 0;
}

"
22742489,Aryansinhab204,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct N {
    int data;
    struct N* next;
};
typedef struct N N;
N* createNode(int value) {
    N* newNode = (N*)malloc(sizeof(N));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}
N* insertAtEnd(N* head, int value) {
    N* newNode = createNode(value);

    if (head == NULL) {
        head = newNode;
    } else {
        N* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }

    return head;
}
N* reverseLinkedList(N* head) {
    N* prev = NULL;
    N* current = head;
    N* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}
void printLinkedList(N* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
}
int main() {
    int n;
    scanf(""%d"", &n);

    N* head = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertAtEnd(head, value);
    }
    head = reverseLinkedList(head);
    printLinkedList(head);
    return 0;
}
    


"
22742502,PES1UG22CS085,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newT = (struct Term*)malloc(sizeof(struct Term));
    newT->coefficient = coeff;
    newT->exponent = exp;
    newT->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newT;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newT;
    }
}

struct Term* addpoly(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}


void displaypoly(struct Term* p) 
{
    while (p != NULL) 
    {
        printf(""%d "", p->coefficient);
        p = p->next;
    }
    printf(""\n"");
}
    
int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
     int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* p1 = NULL;
    struct Term* p2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&p1, coeff, exp);
        } else 
        {
            insertTerm(&p2, coeff, exp);
        }
    }
    struct Term* result = addpoly(p1, p2);
    displaypoly(result);
    return 0;
}

"
22742502,PES1UG22CS085,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int value;
    struct Node* next;
};


void insertNode(struct Node** head, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void revlist(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* next = NULL;
    
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    
    *head = prev;
}


void displist(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
     int numNodes;
    scanf(""%d"", &numNodes);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < numNodes; ++i) {
        int value;
        scanf(""%d"", &value);
        insertNode(&head, value);
    }
    
    revlist(&head);
    displist(head);
    
    return 0;
}

"
22742558,PES1UG22CS095,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    if (*poly == NULL) {
        *poly = newNode;
    } else {
        struct Node* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node** resultPoly) {
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(resultPoly, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(resultPoly, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(resultPoly, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertTerm(resultPoly, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertTerm(resultPoly, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }
    
    struct Node* resultPoly = NULL;
    addPolynomials(poly1, poly2, &resultPoly);
    
    printPolynomial(resultPoly);
    
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
"
22742558,PES1UG22CS095,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node** head, int value) {
    struct Node* newNode = createNode(value);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void reverseLinkedList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    *head = prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
     int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);
        insertNode(&head, value);
    }

    reverseLinkedList(&head);
    printLinkedList(head);
    return 0;
}
"
22830821,PES1UG22CS097,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        }
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else 
        {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}"
22830821,PES1UG22CS097,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct Node 
{
    int value;
    struct Node* next;
};
struct Node* createNode(int val) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = val;
    newNode->next = NULL;
    return newNode;
}
struct Node* reverseLinkedList(struct Node* head) 
{
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;
    while (current != NULL) 
    {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}
void printLinkedList(struct Node* head) 
{
    while (head != NULL) 
    {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}
int main() 
{
    int numNodes;
    scanf(""%d"", &numNodes);
    struct Node* head = NULL;
    struct Node* tail = NULL;
    for (int i = 0; i < numNodes; i++) 
    {
        int val;
        scanf(""%d"", &val);    
        struct Node* newNode = createNode(val);
        if (head == NULL) 
        {
            head = newNode;
            tail = newNode;
        } 
        else 
        {
            tail->next = newNode;
            tail = newNode;
        }
    }
    head = reverseLinkedList(head);
    printLinkedList(head);
    return 0;
}"
22835692,PES1UG22CS111_,Polynomial Addition,6,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *link;
};
struct node *add(struct node *head, int key)
{
    struct node *current = head;
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    newnode->data = key;
    newnode->link = NULL;

    if (head == NULL)
    {
        head = newnode;
        return head;
    }
    while (current->link != NULL)
    {
        current = current->link;
    }
    current->link = newnode;
    newnode = NULL;
    return head;
}

void display(struct node *head)
{
    struct node *current = head;
    while (current != NULL)
    {
        printf(""%d\n"", current->data);
        current = current->link;
    }
}

void compare(struct node *head, struct node *head1, int a)
{

    struct node *l1 = head;
    struct node *l2 = head1;
    int d = l2->data;
    struct node *temp = head1;
    struct node *temp1 = head1;

    int count[a];
    for (int i = 0; i < a; i++)
    {
        int c = 0;
        for (int j = 0; j < a; j++)
        {
            if (temp->data == temp1->data)
            {
                c++;
            }
            temp1 = temp1->link;
        }
        temp = temp->link;
        temp1 = head1;

        count[i] = c;
    }

    struct node *t1 = head1;
    struct node *t2 = head1->link;
    for (int i = 0; i < a - 1; i++)
    {
        if (t2->data == t1->data)
        {
            count[i + 1] = -1;
        }
        t1 = t1->link;
        t2 = t2->link;
    }
    for (int i = 0; i < a; i++)
    {
        if (count[i] != -1)
        {
            int ans = 0;
            for (int j = 0; j < count[i]; j++)
            {
                ans = ans + l1->data;
                l1 = l1->link;
            }
            printf(""%d "", ans);
        }
    }
}

int main()
{

    struct node *head = (struct node *)malloc(sizeof(struct node));
    struct node *head1 = (struct node *)malloc(sizeof(struct node));
    head = NULL;
    head1 = NULL;
    int n, m;

    scanf(""%d %d"", &n, &m);
    int a[n + m];
    int b[n + m];
    int c = n + m;
    for (int i = 0; i < (n + m); i++)
    {
        scanf(""%d %d"", &a[i], &b[i]);
    }
    for (int i = 0; i < (n + m); i++)
    {
        head = add(head, a[i]);
    }
    for (int i = 0; i < (n + m); i++)
    {
        head1 = add(head1, b[i]);
    }

    compare(head, head1, c);
    return 0;
}"
22835692,PES1UG22CS111_,Reversing a Linked List,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *link;
};
struct node *add(struct node *head, int key)
{
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    newnode->data = key;
    newnode->link = NULL;

    if (head == NULL)
    {
        head = newnode;
        return head;
    }
    newnode->link = head;
    head = newnode;
    return head;
}

void display(struct node *head)
{
    struct node *current = head;
    while (current != NULL)
    {
        printf(""%d"", current->data);
        current = current->link;
    }
}

int main()
{

    struct node *head = (struct node *)malloc(sizeof(struct node));
    head = NULL;
    int n;
    scanf(""%d"", &n);
    int a[n];
    for (int i = 0; i < n; i++)
    {
        scanf(""%d"", &a[i]);
    }
    for (int i = 0; i < n; i++)
    {
        head = add(head, a[i]);
    }

    display(head);
    return 0;
}
"
22835785,atulvikram04,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>


struct Term {
    int coeffi;
    int expo;
    struct Term* next;
};

typedef struct Term Term;
Term* createTerm(int coef, int exp) {
    Term* term = (Term*)malloc(sizeof(Term));
    term->coeffi = coef;
    term->expo = exp;
    term->next = NULL;
    return term;
}
void insertTerm(Term** poly, int coef, int exp) {
    Term* term = createTerm(coef, exp);

    if (*poly == NULL) {
        *poly = term;
    } else {
        Term* curr = *poly;
        while (curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = term;
    }
}
Term* AddPolynomials(Term* poly1, Term* poly2) {
    Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->expo > poly2->expo) {
            insertTerm(&result, poly1->coeffi, poly1->expo);
            poly1 = poly1->next;
        } else if (poly1->expo < poly2->expo) {
            insertTerm(&result, poly2->coeffi, poly2->expo);
            poly2 = poly2->next;
        } else {
            int sumCoef = poly1->coeffi + poly2->coeffi;
            if (sumCoef != 0) {
                insertTerm(&result, sumCoef, poly1->expo);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coeffi, poly1->expo);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coeffi, poly2->expo);
        poly2 = poly2->next;
    }

    return result;
}
void printPolynomial(Term* poly) {
    if (poly == NULL) {
        printf(""0"");
        return;
    }

    while (poly != NULL) {
        printf(""%d "", poly->coeffi);
        if (poly->next != NULL) {
        }
        poly = poly->next;
    }
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term* poly1 = NULL;
    Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }

    Term* result = AddPolynomials(poly1, poly2);
    printPolynomial(result);
    return 0;
}

"
22835785,atulvikram04,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
typedef struct Node Node;
Node* createNode(int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}
Node* insertEnd(Node* head, int value) {
    Node* newNode = createNode(value);

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }

    return head;
}
Node* ReverseList(Node* head) {
    Node* prev = NULL;
    Node* current = head;
    Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}
void printList(Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
}
int main() {
    int n;
    scanf(""%d"", &n);

    Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }
    head = ReverseList(head);
    printList(head);
    return 0;
}

"
22835834,ojaswini2004,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term 
{
    int COEFFICIENT;
    int EXPONENT;
    struct Term* next;
};
void insert_Term(struct Term** poly, int coeff, int exp) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->COEFFICIENT = coeff;
    newTerm->EXPONENT = exp;
    newTerm->next = NULL;
    
    if (*poly == NULL)
    {
        *poly = newTerm;
    } else 
    {
        struct Term* current = *poly;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) 
{
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->EXPONENT > poly2->EXPONENT) 
        {
            insert_Term(&result, poly1->COEFFICIENT, poly1->EXPONENT);
            poly1 = poly1->next;
        }
        else if (poly1->EXPONENT < poly2->EXPONENT) 
        {
            insert_Term(&result, poly2->COEFFICIENT, poly2->EXPONENT);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->COEFFICIENT + poly2->COEFFICIENT;
            if (sumCoeff != 0) 
            {
                insert_Term(&result, sumCoeff, poly1->EXPONENT);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insert_Term(&result, poly1->COEFFICIENT, poly1->EXPONENT);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insert_Term(&result, poly2->COEFFICIENT, poly2->EXPONENT);
        poly2 = poly2->next;
    }
    return result;
}
void displayPolynomial(struct Term* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->COEFFICIENT);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; ++i) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insert_Term(&poly1, coeff, exp);
        } else 
        {
           insert_Term(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);
    return 0;
}"
22835834,ojaswini2004,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>
struct Node 
{
    int data;
    struct Node *next;
};
typedef struct Node Node;
Node *createNode(int data) 
{
    Node *node = (Node *)malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    return node;
}
Node *reverse_LL(Node *head) 
{
    Node *prev = NULL;
    Node *curr = head;
    Node *next = NULL;

    while (curr != NULL) 
    {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    return prev;
}
void print_LL(Node *head) 
{
    while (head != NULL) 
    {
        printf(""%d"", head->data);
        head = head->next;
    }
}
int main() 
{
    int n;
    scanf(""%d"", &n);
    Node *head = NULL;
    Node *curr = NULL;
    for (int i = 0; i < n; i++) 
    {
        int data;
        scanf(""%d"", &data);
        Node *node = createNode(data);
        if (head == NULL) 
        {
            head = node;
            curr= node;
        } 
        else 
        {
            curr->next = node;
            curr = node;
        }
    }
    head = reverse_LL(head);
    print_LL(head);
    return 0;
}

 

"
22835857,PES1UG22CS077,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

void insertTerm(struct Term** poly, int coef, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coef;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    while (poly1 != NULL || poly2 != NULL) {
        int coef = 0, exp = 0;

        if (poly1 != NULL && poly2 != NULL) {
            if (poly1->exponent > poly2->exponent) {
                coef = poly1->coefficient;
                exp = poly1->exponent;
                poly1 = poly1->next;
            } else if (poly1->exponent < poly2->exponent) {
                coef = poly2->coefficient;
                exp = poly2->exponent;
                poly2 = poly2->next;
            } else {
                coef = poly1->coefficient + poly2->coefficient;
                exp = poly1->exponent;
                poly1 = poly1->next;
                poly2 = poly2->next;
            }
        } else if (poly1 != NULL) {
            coef = poly1->coefficient;
            exp = poly1->exponent;
            poly1 = poly1->next;
        } else if (poly2 != NULL) {
            coef = poly2->coefficient;
            exp = poly2->exponent;
            poly2 = poly2->next;
        }

        insertTerm(&result, coef, exp);
    }
    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
"
22835857,PES1UG22CS077,Reversing a Linked List,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node** head, int value) {
    struct Node* newNode = createNode(value);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertNode(&head, value);
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    return 0;
}

"
22836655,ankit_avinash,Polynomial Addition,15,"#include<stdio.h>
#include<stdlib.h>

typedef struct link{
    int c;
    int e;
    struct link *next;
}NODE;


NODE* new_node(int c,int e){
    NODE* temp=(NODE*)malloc(sizeof(NODE));
    temp->c=c;
    temp->e=e;
    temp->next=NULL;
    return temp;
}

NODE* append(NODE* node,int c,int e){
    NODE* temp=node;
    while(node->next!=NULL){
        node=node->next;
    }
    node->next=new_node(c,e);
    return temp;
}

void display(NODE *node){
    while(node!=NULL){
        printf(""%d "",node->c);
        node=node->next;
    }
}


void my_create_poly(NODE**);
void my_show_poly(NODE*);
void add(NODE**,NODE*,NODE*);


int main(){
    NODE* polym;
    NODE* polyn;
    int m,n;
    scanf(""%d %d"",&m,&n);
    
    for(int i=0;i<m;i++){
        int c_temp;
        int e_temp;
        scanf(""%d %d"", &c_temp,&e_temp);
        if(i==0){
            polym=new_node(c_temp,e_temp);
        }else{
            polym=append(polym,c_temp,e_temp);
        }
    }
    
    for(int i=0;i<n;i++){
        int c_temp;
        int e_temp;
        scanf(""%d %d"", &c_temp,&e_temp);
        if(i==0){
            polyn=new_node(c_temp,e_temp);
        }else{
            polyn=append(polyn,c_temp,e_temp);
        }
    }

    NODE* result;
    add(&result,polym,polyn);
    display(result);

    return 0;
}

void my_show_poly(NODE*node){
    while(node!=NULL){
        printf(""%dx^%d"",node->c,node->e);
        node=node->next;
        if(node!=NULL)
            printf(""+"");
    }
}

void add(NODE**result,NODE*poly1,NODE*poly2){
    NODE*tmp_node;
    tmp_node=(NODE*)malloc(sizeof(NODE));
    tmp_node->next=NULL;
    *result=tmp_node;

    while(poly1&&poly2){
        if(poly1->e > poly2->e){
            tmp_node->e=poly1->e;
            tmp_node->c=poly1->c;
            poly1=poly1->next;
        }
        else if(poly1->e<poly2->e){
            tmp_node->e=poly2->e;
            tmp_node->c=poly2->c;
            poly2=poly2->next;
        }
        else{
            tmp_node->e=poly1->e;
            tmp_node->c=poly1->c+poly2->c;

            poly1=poly1->next;
            poly2=poly2->next;
        }

        if(poly1&&poly2){
            tmp_node->next=(NODE*)malloc(sizeof(NODE));
            tmp_node=tmp_node->next;
            tmp_node->next=NULL;
        }
    }

    while(poly1||poly2){
        tmp_node->next=(NODE*)malloc(sizeof(NODE));
        tmp_node=tmp_node->next;
        tmp_node->next=NULL;
        if(poly1){
            tmp_node->e=poly1->e;
            tmp_node->c=poly1->c;
            poly1=poly1->next;
        }
        if(poly2){
            tmp_node->e=poly2->e;
            tmp_node->c=poly2->c;
            poly2=poly2->next;
        }
    }
}"
22836655,ankit_avinash,Reversing a Linked List,12,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int value;
    struct Node* next_node;
} ListNode;

ListNode* create_new_node(int n) {
    ListNode* temp = malloc(sizeof(ListNode));
    temp->value = n;
    temp->next_node = NULL;
    return temp;
}

ListNode* append_node(ListNode* current_node, int n) {
    ListNode* temp = current_node;
    while (current_node->next_node)
        current_node = current_node->next_node;
    current_node->next_node = create_new_node(n);
    return temp;
}

void print_list(ListNode* head) {
    ListNode* temp = head;
    while (temp) {
        printf(""%d"", temp->value);
        temp = temp->next_node;
    }
    printf(""\n"");
}

ListNode* reverse_list(ListNode* current_node) {
    ListNode* previous = NULL;
    ListNode* current = current_node;
    ListNode* next = NULL;
    while (current) {
        next = current->next_node;
        current->next_node = previous;
        previous = current;
        current = next;
    }
    return previous;
}

int main() {
    int length, value;
    scanf(""%d"", &length);
    scanf(""%d"", &value);
    ListNode* head = create_new_node(value);
    
    for (int i = 0; i < length - 1; i++) {
        scanf(""%d"", &value);
        head = append_node(head, value);
    }
    
    head = reverse_list(head);
    print_list(head);
    return 0;
}
"