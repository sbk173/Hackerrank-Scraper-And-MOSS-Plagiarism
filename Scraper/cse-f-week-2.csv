studentId,studentUserName,challenge,score,code
19849109,PES1UG22CS314_MS,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *link;
};

struct node *reverseList(struct node *head)
{
    struct node *ptr1 = NULL;
    struct node *ptr2 = head;

    while (ptr2 != NULL)
    {
        struct node *nextnode = ptr2->link;
        ptr2->link = ptr1;
        ptr1 = ptr2;
        ptr2 = nextnode;
    }

    return ptr1;
}

void printList(struct node *head)
{
    struct node *ptr2 = head;
    while (ptr2 != NULL)
    {
        printf(""%d"", ptr2->data);
        ptr2 = ptr2->link;
    }
}

int main()
{
    int n;
    scanf(""%d"", &n);

    struct node *head = NULL;
    struct node *ptr2 = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);

        if (head == NULL)
        {
            head = (struct node *)malloc(sizeof(struct node));
            head->data = value;
            head->link = NULL;
            ptr2 = head;
        }
        else
        {
            ptr2->link = (struct node *)malloc(sizeof(struct node));
            ptr2 = ptr2->link;
            ptr2->data = value;
            ptr2->link = NULL;
        }
    }

    struct node *newHead = reverseList(head);
    printList(newHead);

    ptr2 = newHead;
    while (ptr2 != NULL)
    {
        struct node *temp = ptr2;
        ptr2 = ptr2->link;
        free(temp);
    }

    return 0;
}"
19849109,PES1UG22CS314_MS,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *link;
};

struct node *reverse(struct node *head)
{
    struct node *prev = NULL;
    struct node *current = head;

    while (current != NULL)
    {
        struct node *linknode = current->link;
        current->link = prev;
        prev = current;
        current = linknode;
    }

    return prev;
}

void display(struct node *head)
{
    struct node *current = head;
    while (current != NULL)
    {
        printf(""%d"", current->data);
        if (current->link != NULL)
        {
            printf("" ""); // Print space if there's a link node
        }
        current = current->link;
    }
}

struct node *add(struct node *l1, struct node *l2)
{
    struct node *ll = (struct node *)malloc(sizeof(struct node));
    ll->data = 0;
    ll->link = NULL;
    struct node *current = ll;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0)
    {
        int sum = carry;
        if (l1 != NULL)
        {
            sum += l1->data;
            l1 = l1->link;
        }
        if (l2 != NULL)
        {
            sum += l2->data;
            l2 = l2->link;
        }

        carry = sum / 10;
        sum %= 10;

        current->link = (struct node *)malloc(sizeof(struct node));
        current = current->link;
        current->data = sum;
        current->link = NULL;
    }

    struct node *result = ll->link;
    free(ll);
    return result;
}

int main()
{
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct node *list1 = NULL;
    struct node *list2 = NULL;

    for (int i = 0; i < n1; i++)
    {
        int digit;
        scanf(""%d"", &digit);
        struct node *newnode = (struct node *)malloc(sizeof(struct node));
        newnode->data = digit;
        newnode->link = list1;
        list1 = newnode;
    }

    for (int i = 0; i < n2; i++)
    {
        int digit;
        scanf(""%d"", &digit);
        struct node *newnode = (struct node *)malloc(sizeof(struct node));
        newnode->data = digit;
        newnode->link = list2;
        list2 = newnode;
    }

    list1 = reverse(list1);
    list2 = reverse(list2);

    struct node *sumList = add(list1, list2);
    display(sumList);
    printf(""\n"");

    struct node *temp = sumList;
    while (temp != NULL)
    {
        struct node *linkTemp = temp->link;
        free(temp);
        temp = linkTemp;
    }

    return 0;
}"
22631275,PES1UG22CS311,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
"
22631275,PES1UG22CS311,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode {
    int value;
    struct ListNode* next;
} NODE;

NODE* addReversedDigitLists(NODE* list1, NODE* list2) {
    NODE* result = NULL;
    NODE* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry != 0) {
        int sum = carry;
        
        if (list1 != NULL) {
            sum += list1->value;
            list1 = list1->next;
        }
        
        if (list2 != NULL) {
            sum += list2->value;
            list2 = list2->next;
        }
        
        carry = sum / 10;
        sum %= 10;

        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = sum;
        new_node->next = NULL;

        if (result == NULL) {
            result = new_node;
            current = result;
        } else {
            current->next = new_node;
            current = current->next;
        }
    }

    return result;
}

void printLinkedList(NODE* head) {
    NODE* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

void freeLinkedList(NODE* head) {
    while (head != NULL) {
        NODE* temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    int num_digits_list1, num_digits_list2;
    scanf(""%d %d"", &num_digits_list1, &num_digits_list2);

    NODE* list1 = NULL;
    NODE* current1 = NULL;
    int value;

    for (int i = 0; i < num_digits_list1; i++) {
        scanf(""%d"", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;

        if (list1 == NULL) {
            list1 = new_node;
            current1 = list1;
        } else {
            current1->next = new_node;
            current1 = current1->next;
        }
    }

    NODE* list2 = NULL;
    NODE* current2 = NULL;

    for (int i = 0; i < num_digits_list2; i++) {
        scanf(""%d"", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;

        if (list2 == NULL) {
            list2 = new_node;
            current2 = list2;
        } else {
            current2->next = new_node;
            current2 = current2->next;
        }
    }

    NODE* result = addReversedDigitLists(list1, list2);
    printLinkedList(result);
    freeLinkedList(result);

    return 0;
}
"
22657305,PES1UG22CS350,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node{
    int value;
    struct node *next;
};

struct node *reverse(struct node *head){
    struct node *perv = NULL;
    struct node *current = head;
    while(current != NULL){
        struct node *nextnode = current ->next;
        current ->next = perv;
        perv = current;
        current = nextnode;
    }
    return perv;
}

void printlist(struct node *head){
    struct node *current = head;
    while(current != NULL){
        printf(""%d"",current->value);
        current = current->next;
    }
}

int main() {

    int n;
    scanf(""%d"",&n);
    struct node *head = NULL;
    struct node *current = NULL;
    for (int i=0;i<n; ++i){
        int value;
        scanf(""%d"",&value);
        struct node *newNode = malloc(sizeof(struct node));
        newNode->value = value;
        newNode->next = NULL;
        if(head == NULL){
            head = newNode;
            current = newNode;
            
        }
        else{
            current->next = newNode;
            current = newNode;
        }
    }
    head = reverse(head);
    printlist(head);
    return 0;
}
"
22657305,PES1UG22CS350,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* mergeLists(struct ListNode* firstList, struct ListNode* secondList) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    int carry = 0;
    
    while (firstList || secondList || carry) {
        int valueFromFirst = firstList ? firstList->value : 0;
        int valueFromSecond = secondList ? secondList->value : 0;
        
        int sum = valueFromFirst + valueFromSecond + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = sum % 10;
        current->next = NULL;
        
        if (firstList) {
            firstList = firstList->next;
        }
        if (secondList) {
            secondList = secondList->next;
        }
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

struct ListNode* generateList(int* digits, int numDigits) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    
    for (int i = 0; i < numDigits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = digits[i];
        current->next = NULL;
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

void displayList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    int numDigitsFirst, numDigitsSecond;
    scanf(""%d %d"", &numDigitsFirst, &numDigitsSecond);
    
    int* digitsFirst = (int*)malloc(numDigitsFirst * sizeof(int));
    int* digitsSecond = (int*)malloc(numDigitsSecond * sizeof(int));
    
    for (int i = 0; i < numDigitsFirst; i++) {
        scanf(""%d"", &digitsFirst[i]);
    }
    
    for (int i = 0; i < numDigitsSecond; i++) {
        scanf(""%d"", &digitsSecond[i]);
    }
    
    struct ListNode* firstList = generateList(digitsFirst, numDigitsFirst);
    struct ListNode* secondList = generateList(digitsSecond, numDigitsSecond);
    
    struct ListNode* mergedList = mergeLists(firstList, secondList);
    
    displayList(mergedList);
    
    return 0;
}"
22742308,PES1UG22CS328,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        if(-1000<value<1000)
        {

        if (head == NULL) {
            head = createNode(value);
            tail = head;
        } else {
            tail->next = createNode(value);
            tail = tail->next;
        }
    }
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22742308,PES1UG22CS328,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = createNode(sum);
        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;

    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num1 == NULL) {
            num1 = createNode(digit);
        } else {
            struct Node* current = num1;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num2 == NULL) {
            num2 = createNode(digit);
        } else {
            struct Node* current = num2;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);
    printLinkedList(sum);

    // Free allocated memory
    while (num1 != NULL) {
        struct Node* temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        struct Node* temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        struct Node* temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}"
22781254,PES1UG22CS324,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node{
    int value;
    struct node *next;
};

struct node *reverse(struct node *head){
    struct node *perv = NULL;
    struct node *current = head;
    while(current != NULL){
        struct node *nextnode = current ->next;
        current ->next = perv;
        perv = current;
        current = nextnode;
    }
    return perv;
}

void printlist(struct node *head){
    struct node *current = head;
    while(current != NULL){
        printf(""%d"",current->value);
        current = current->next;
    }
}

int main() {

    int n;
    scanf(""%d"",&n);
    struct node *head = NULL;
    struct node *current = NULL;
    for (int i=0;i<n; ++i){
        int value;
        scanf(""%d"",&value);
        struct node *newNode = malloc(sizeof(struct node));
        newNode->value = value;
        newNode->next = NULL;
        if(head == NULL){
            head = newNode;
            current = newNode;
            
        }
        else{
            current->next = newNode;
            current = newNode;
        }
    }
    head = reverse(head);
    printlist(head);
    return 0;
}"
22781254,PES1UG22CS324,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* mergeLists(struct ListNode* firstList, struct ListNode* secondList) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    int carry = 0;
    
    while (firstList || secondList || carry) {
        int valueFromFirst = firstList ? firstList->value : 0;
        int valueFromSecond = secondList ? secondList->value : 0;
        
        int sum = valueFromFirst + valueFromSecond + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = sum % 10;
        current->next = NULL;
        
        if (firstList) {
            firstList = firstList->next;
        }
        if (secondList) {
            secondList = secondList->next;
        }
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

struct ListNode* generateList(int* digits, int numDigits) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    
    for (int i = 0; i < numDigits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = digits[i];
        current->next = NULL;
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

void displayList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    int numDigitsFirst, numDigitsSecond;
    scanf(""%d %d"", &numDigitsFirst, &numDigitsSecond);
    
    int* digitsFirst = (int*)malloc(numDigitsFirst * sizeof(int));
    int* digitsSecond = (int*)malloc(numDigitsSecond * sizeof(int));
    
    for (int i = 0; i < numDigitsFirst; i++) {
        scanf(""%d"", &digitsFirst[i]);
    }
    
    for (int i = 0; i < numDigitsSecond; i++) {
        scanf(""%d"", &digitsSecond[i]);
    }
    
    struct ListNode* firstList = generateList(digitsFirst, numDigitsFirst);
    struct ListNode* secondList = generateList(digitsSecond, numDigitsSecond);
    
    struct ListNode* mergedList = mergeLists(firstList, secondList);
    
    displayList(mergedList);
    
    return 0;
}"
22806213,PES1UG22CS364,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}


"
22806213,PES1UG22CS364,ADD TWO NUMBERS 104,15,"
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = createNode(sum);
        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;

    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num1 == NULL) {
            num1 = createNode(digit);
        } else {
            struct Node* current = num1;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num2 == NULL) {
            num2 = createNode(digit);
        } else {
            struct Node* current = num2;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);
    printLinkedList(sum);

    // Free allocated memory
    while (num1 != NULL) {
        struct Node* temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        struct Node* temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        struct Node* temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}"
22806252,PES1UG22CS366,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* next;
};

struct node* createnode(int data) {
    struct node* newnode =malloc(sizeof(struct node));
    newnode->data = data;
    newnode->next = NULL;
    return newnode;
}

struct node* reverselinkedlist(struct node* head) {
    struct node* prev = NULL;
    struct node* current = head;
    struct node* next = NULL;
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}
void printlinkedlist(struct node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);
    struct node* head = NULL;
    struct node* tail = NULL;
    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createnode(value);
            tail = head;
        }
            else
            {
            tail->next = createnode(value);
            tail = tail->next;
        }
        }
    }
    head = reverselinkedlist(head);
    printlinkedlist(head);
    struct node* current = head;
    while (current != NULL) {
        struct node* temp = current;
        current = current->next;
        free(temp);
    }
    return 0;
}"
22806252,PES1UG22CS366,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>
struct node {
    int value;
    struct node* next;
};
struct node* mergelists(struct node* firstList, struct node* secondList) {
    struct node* dummyHead =malloc(sizeof(struct node));
    struct node* current = dummyHead;
    int carry = 0;
    
    while (firstList || secondList || carry) {
        int valueFromFirst = firstList ? firstList->value : 0;
        int valueFromSecond = secondList ? secondList->value : 0;
        
        int sum = valueFromFirst + valueFromSecond + carry;
        carry = sum / 10;
        
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->value = sum % 10;
        current->next = NULL;
        
        if (firstList) {
            firstList = firstList->next;
        }
        if (secondList) {
            secondList = secondList->next;
        }
    }
    
    struct node* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

struct node* generateList(int* digits, int numDigits) {
    struct node* dummyHead = (struct node*)malloc(sizeof(struct node));
    struct node* current = dummyHead;
    
    for (int i = 0; i < numDigits; i++) {
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->value = digits[i];
        current->next = NULL;
    }
    
    struct node* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

void displayList(struct node* head) {
    struct node* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    int numDigitsFirst, numDigitsSecond;
    scanf(""%d %d"", &numDigitsFirst, &numDigitsSecond);
    
    int* digitsFirst = (int*)malloc(numDigitsFirst * sizeof(int));
    int* digitsSecond = (int*)malloc(numDigitsSecond * sizeof(int));
    
    for (int i = 0; i < numDigitsFirst; i++) {
        scanf(""%d"", &digitsFirst[i]);
    }
    
    for (int i = 0; i < numDigitsSecond; i++) {
        scanf(""%d"", &digitsSecond[i]);
    }
    
    struct node* firstList = generateList(digitsFirst, numDigitsFirst);
    struct node* secondList = generateList(digitsSecond, numDigitsSecond);
    
    struct node* mergedList = mergelists(firstList, secondList);
    
    displayList(mergedList);
    
    return 0;
}"
22806262,PES1UG22CS365,Reversing a Linked List 1,7.5,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct  ListNode {
    int value;
    struct  ListNode* next;
};
struct ListNode* reverseLinkedList(struct ListNode* head)
{
      struct ListNode* prev=NULL;
    struct ListNode* current=head;
    while (current!=NULL){
        struct ListNode* nextNode=current->next;
        current->next=prev;
        prev=current;
        current=nextNode;
    
}
  
    return prev;
} 
void printLinkedList(struct ListNode*head)
{
    struct ListNode* current=head;
    while(current!= NULL){
        printf(""%d"",current->value);
        current = current->next;
    }
}
int main() {
    int n;
    scanf(""%d"",&n);
    struct ListNode* head=NULL;
    struct ListNode* current=NULL;
    for(int i=0; i<n;i++){
        int value;
        scanf(""%d"",&value);
        
        if(head==NULL){
            head=(struct ListNode*)malloc(sizeof(struct ListNode));
            head->value=value;
            head->next=NULL;
            current =head;
        }
        else {
             current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
            current=current->next;
            current->value=value;
            current->next=NULL;
        }
    }
    struct ListNode* newHead=reverseLinkedList(head);
    printLinkedList(newHead);
    
    current = newHead;
    while(current!= NULL){
        struct ListNode* temp=current;
        current= current->next;
        free(temp);
    }
    
    return 0;
}
"
22806262,PES1UG22CS365,ADD TWO NUMBERS 104,15,"


#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}
"
22806271,PES1UG22CS344,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct List_node 
{
    int value;
    struct List_node* next;
};

struct List_node* reverseList(struct List_node* head) 
{
    struct List_node* prev = NULL;
    struct List_node* current = head;

    while (current != NULL) 
    {
        struct List_node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct List_node* head) 
{
    struct List_node* current = head;
    while (current != NULL) 
    {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() 
{
    int n;
    scanf(""%d"", &n);

    struct List_node* head = NULL;
    struct List_node* current = NULL;

    for (int i = 0; i < n; i++) 
    {
        int val;
        scanf(""%d"", &val);

        if (head == NULL) 
        {
            head = (struct List_node*)malloc(sizeof(struct List_node));
            head->value = val;
            head->next = NULL;
            current = head;
        } 
        else 
        {
            current->next = (struct List_node*)malloc(sizeof(struct List_node));
            current = current->next;
            current->value = val;
            current->next = NULL;
        }
    }

    struct List_node* newHead = reverseList(head);
    printList(newHead);

    current = newHead;
    while (current != NULL) 
    {
        struct List_node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22806271,PES1UG22CS344,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node 
{
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) 
{
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) 
    {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) 
{
    struct Node* current = head;
    while (current != NULL) 
    {
        printf(""%d"", current->val);
        if (current->next != NULL) 
        {
            printf("" ""); 
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) 
{
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) 
    {
        int sum = carry;
        if (l1 != NULL) 
        {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) 
        {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() 
{
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) 
    {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) 
    {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) 
    {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}"
22806311,PES1UG22CS322,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        if (head == NULL) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->val = value;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->val = value;
            current->next = NULL;
        }
    }

    struct Node* newHead = reverseList(head);
    printList(newHead);

    current = newHead;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22806311,PES1UG22CS322,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}
"
22807317,PES1UG22CS353,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22807317,PES1UG22CS353,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* mergeLists(struct ListNode* firstList, struct ListNode* secondList) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    int carry = 0;
    
    while (firstList || secondList || carry) {
        int valueFromFirst = firstList ? firstList->value : 0;
        int valueFromSecond = secondList ? secondList->value : 0;
        
        int sum = valueFromFirst + valueFromSecond + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = sum % 10;
        current->next = NULL;
        
        if (firstList) {
            firstList = firstList->next;
        }
        if (secondList) {
            secondList = secondList->next;
        }
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

struct ListNode* generateList(int* digits, int numDigits) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    
    for (int i = 0; i < numDigits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = digits[i];
        current->next = NULL;
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

void displayList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    int numDigitsFirst, numDigitsSecond;
    scanf(""%d %d"", &numDigitsFirst, &numDigitsSecond);
    
    int* digitsFirst = (int*)malloc(numDigitsFirst * sizeof(int));
    int* digitsSecond = (int*)malloc(numDigitsSecond * sizeof(int));
    
    for (int i = 0; i < numDigitsFirst; i++) {
        scanf(""%d"", &digitsFirst[i]);
    }
    
    for (int i = 0; i < numDigitsSecond; i++) {
        scanf(""%d"", &digitsSecond[i]);
    }
    
    struct ListNode* firstList = generateList(digitsFirst, numDigitsFirst);
    struct ListNode* secondList = generateList(digitsSecond, numDigitsSecond);
    
    struct ListNode* mergedList = mergeLists(firstList, secondList);
    
    displayList(mergedList);
    
    return 0;
}"
22807350,PES1UG22CS325,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node* next;
};

struct node* create(int data)
{
    struct node* new = (struct node*)malloc(sizeof(struct node));
    new->data = data;
    new->next = NULL;
    return new;
}

struct node* reverse(struct node* head)
{
    struct node* prev=NULL;
    struct node* current = head;
    struct node* next = NULL;
    while(current!=NULL)
    {
        next = current->next;
        current->next = prev;
        prev=current;
        current = next;
    }
    return prev;
}

void print(struct node* head)
{
    while(head!=NULL)
    {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main()
{
    int n;
    scanf(""%d"",&n);
    
    struct node* head = NULL;
    struct node* tail =NULL;
    
    for(int i=0;i<n;i++)
    {
        int value;
        scanf(""%d"",&value);
        if(value<=1000 && value>=-1000)
        {
            if(head==NULL)
            {
            head = create(value);
            tail = head;
            }
            else
            {
                tail->next = create(value);
                tail = tail->next;
            }
        }
    }

head = reverse(head);
print(head);

struct node* current = head;
    while(current!=NULL)
    {
        struct node* temp = current;
        current = current->next;
        free(temp);
    }
    return 0;
}

"
22807350,PES1UG22CS325,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node {
    int value;
    struct node* next;
};

struct node* merge(struct node* first, struct node* second) {
    struct node* dummyHead = (struct node*)malloc(sizeof(struct node));
    struct node* current = dummyHead;
    int carry = 0;
    
    while (first || second || carry) {
        int valueFromFirst = first ? first->value : 0;
        int valueFromSecond = second ? second->value : 0;
        
        int sum = valueFromFirst + valueFromSecond + carry;
        carry = sum / 10;
        
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->value = sum % 10;
        current->next = NULL;
        
        if (first) {
            first = first->next;
        }
        if (second) {
            second = second->next;
        }
    }
    
    struct node* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

struct node* gen(int* digits, int n) {
    struct node* dummyHead = (struct node*)malloc(sizeof(struct node));
    struct node* current = dummyHead;
    
    for (int i = 0; i < n; i++) {
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->value = digits[i];
        current->next = NULL;
    }
    
    struct node* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

void display(struct node* head) {
    struct node* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    int num1, num2;
    scanf(""%d %d"", &num1, &num2);
    
    int* digitsFirst = (int*)malloc(num1 * sizeof(int));
    int* digitsSecond = (int*)malloc(num2 * sizeof(int));
    
    for (int i = 0; i < num1; i++) {
        scanf(""%d"", &digitsFirst[i]);
    }
    
    for (int i = 0; i < num2; i++) {
        scanf(""%d"", &digitsSecond[i]);
    }
    
    struct node* first = gen(digitsFirst, num1);
    struct node* second = gen(digitsSecond, num2);
    
    struct node* third = merge(first, second);
    
    display(third);
    
    return 0;
}
"
22807360,[deleted],Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
"
22807360,[deleted],ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode {
    int value;
    struct ListNode* next;
} NODE;

NODE* addReversedDigitLists(NODE* list1, NODE* list2) {
    NODE* result = NULL;
    NODE* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry != 0) {
        int sum = carry;
        
        if (list1 != NULL) {
            sum += list1->value;
            list1 = list1->next;
        }
        
        if (list2 != NULL) {
            sum += list2->value;
            list2 = list2->next;
        }
        
        carry = sum / 10;
        sum %= 10;

        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = sum;
        new_node->next = NULL;

        if (result == NULL) {
            result = new_node;
            current = result;
        } else {
            current->next = new_node;
            current = current->next;
        }
    }

    return result;
}

void printLinkedList(NODE* head) {
    NODE* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

void freeLinkedList(NODE* head) {
    while (head != NULL) {
        NODE* temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    int num_digits_list1, num_digits_list2;
    scanf(""%d %d"", &num_digits_list1, &num_digits_list2);

    NODE* list1 = NULL;
    NODE* current1 = NULL;
    int value;

    for (int i = 0; i < num_digits_list1; i++) {
        scanf(""%d"", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;

        if (list1 == NULL) {
            list1 = new_node;
            current1 = list1;
        } else {
            current1->next = new_node;
            current1 = current1->next;
        }
    }

    NODE* list2 = NULL;
    NODE* current2 = NULL;

    for (int i = 0; i < num_digits_list2; i++) {
        scanf(""%d"", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;

        if (list2 == NULL) {
            list2 = new_node;
            current2 = list2;
        } else {
            current2->next = new_node;
            current2 = current2->next;
        }
    }

    NODE* result = addReversedDigitLists(list1, list2);
    printLinkedList(result);
    freeLinkedList(result);

    return 0;
}"
22807375,PES1UG22CS340,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22807375,PES1UG22CS340,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* mergeLists(struct ListNode* firstList, struct ListNode* secondList) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    int carry = 0;
    
    while (firstList || secondList || carry) {
        int valueFromFirst = firstList ? firstList->value : 0;
        int valueFromSecond = secondList ? secondList->value : 0;
        
        int sum = valueFromFirst + valueFromSecond + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = sum % 10;
        current->next = NULL;
        
        if (firstList) {
            firstList = firstList->next;
        }
        if (secondList) {
            secondList = secondList->next;
        }
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

struct ListNode* generateList(int* digits, int numDigits) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    
    for (int i = 0; i < numDigits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = digits[i];
        current->next = NULL;
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

void displayList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    int numDigitsFirst, numDigitsSecond;
    scanf(""%d %d"", &numDigitsFirst, &numDigitsSecond);
    
    int* digitsFirst = (int*)malloc(numDigitsFirst * sizeof(int));
    int* digitsSecond = (int*)malloc(numDigitsSecond * sizeof(int));
    
    for (int i = 0; i < numDigitsFirst; i++) {
        scanf(""%d"", &digitsFirst[i]);
    }
    
    for (int i = 0; i < numDigitsSecond; i++) {
        scanf(""%d"", &digitsSecond[i]);
    }
    
    struct ListNode* firstList = generateList(digitsFirst, numDigitsFirst);
    struct ListNode* secondList = generateList(digitsSecond, numDigitsSecond);
    
    struct ListNode* mergedList = mergeLists(firstList, secondList);
    
    displayList(mergedList);
    
    return 0;
}"
22807638,PES1UG22CS346,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        if (head == NULL) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->val = value;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->val = value;
            current->next = NULL;
        }
    }

    struct Node* newHead = reverseList(head);
    printList(newHead);

    current = newHead;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
"
22807638,PES1UG22CS346,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}
"
22807784,PES1UG22CS349,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* reverseLinkedList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;

    while (current != NULL) {
        struct ListNode* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct ListNode* head = NULL;
    struct ListNode* current = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        if (head == NULL) {
            head = (struct ListNode*)malloc(sizeof(struct ListNode));
            head->value = value;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
            current = current->next;
            current->value = value;
            current->next = NULL;
        }
    }

    struct ListNode* newHead = reverseLinkedList(head);
    printLinkedList(newHead);

    // Free the allocated memory for the LinkedList nodes
    current = newHead;
    while (current != NULL) {
        struct ListNode* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
"
22807784,PES1UG22CS349,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}"
22807814,PES1UG22CS342,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        if (head == NULL) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->val = value;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->val = value;
            current->next = NULL;
        }
    }

    struct Node* newHead = reverseList(head);
    printList(newHead);

    current = newHead;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22807814,PES1UG22CS342,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}"
22807893,PES1UG22CS321,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22807893,PES1UG22CS321,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = createNode(sum);
        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;

    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num1 == NULL) {
            num1 = createNode(digit);
        } else {
            struct Node* current = num1;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num2 == NULL) {
            num2 = createNode(digit);
        } else {
            struct Node* current = num2;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);
    printLinkedList(sum);

    // Free allocated memory
    while (num1 != NULL) {
        struct Node* temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        struct Node* temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        struct Node* temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}"
22807897,PES1UG22CS345,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        if (head == NULL) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->val = value;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->val = value;
            current->next = NULL;
        }
    }

    struct Node* newHead = reverseList(head);
    printList(newHead);

    current = newHead;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}

   

"
22807897,PES1UG22CS345,ADD TWO NUMBERS 104,15,"

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}"
22807916,PES1UG22CS320,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNod = (struct Node*)malloc(sizeof(struct Node));
    newNod->data = data;
    newNod->next = NULL;
    return newNod;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* pre = NULL;
    struct Node* curr = head;
    struct Node* nex = NULL;

    while (curr != NULL) {
        nex = curr->next;
        curr->next = pre;
        pre = curr;
        curr = nex;
    }

    return pre;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int t;
    scanf(""%d"", &t);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < t; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}








"
22807916,PES1UG22CS320,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* create(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = create(sum);
        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;

    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num1 == NULL) {
            num1 = create(digit);
        } else {
            struct Node* current = num1;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = create(digit);
        }
    }

    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num2 == NULL) {
            num2 = create(digit);
        } else {
            struct Node* current = num2;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = create(digit);
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);
    printList(sum);

    
    while (num1 != NULL) {
        struct Node* temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        struct Node* temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        struct Node* temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}
"
22807986,PES1UG22CS326,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22807986,PES1UG22CS326,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* mergeLists(struct ListNode* firstList, struct ListNode* secondList) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    int carry = 0;
    
    while (firstList || secondList || carry) {
        int valueFromFirst = firstList ? firstList->value : 0;
        int valueFromSecond = secondList ? secondList->value : 0;
        
        int sum = valueFromFirst + valueFromSecond + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = sum % 10;
        current->next = NULL;
        
        if (firstList) {
            firstList = firstList->next;
        }
        if (secondList) {
            secondList = secondList->next;
        }
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

struct ListNode* generateList(int* digits, int numDigits) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    
    for (int i = 0; i < numDigits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = digits[i];
        current->next = NULL;
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

void displayList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    int numDigitsFirst, numDigitsSecond;
    scanf(""%d %d"", &numDigitsFirst, &numDigitsSecond);
    
    int* digitsFirst = (int*)malloc(numDigitsFirst * sizeof(int));
    int* digitsSecond = (int*)malloc(numDigitsSecond * sizeof(int));
    
    for (int i = 0; i < numDigitsFirst; i++) {
        scanf(""%d"", &digitsFirst[i]);
    }
    
    for (int i = 0; i < numDigitsSecond; i++) {
        scanf(""%d"", &digitsSecond[i]);
    }
    
    struct ListNode* firstList = generateList(digitsFirst, numDigitsFirst);
    struct ListNode* secondList = generateList(digitsSecond, numDigitsSecond);
    
    struct ListNode* mergedList = mergeLists(firstList, secondList);
    
    displayList(mergedList);
    
    return 0;
}"
22808051,PES1UG22CS315,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* link;
};

struct node* reverseLL(struct node* head) {
    struct node* prev = NULL;
    struct node* ptr = head;
    struct node* next = NULL;
    while (ptr != NULL) {
        next = ptr->link;
        ptr->link = prev;
        prev = ptr;
        ptr = next;
    }
    
    return prev;
}

void printLinkedList(struct node* head) {
    struct node* ptr = head;
    while (ptr != NULL) {
        printf(""%d"", ptr->data);
        ptr = ptr->link;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct node* head = NULL;
    struct node* ptr = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        
        struct node* new_node = (struct node*)malloc(sizeof(struct node));
        new_node->data = data;
        new_node->link = NULL;
        
        if (head == NULL) {
            head = new_node;
            ptr = new_node;
        } else {
            ptr->link = new_node;
            ptr = new_node;
        }
    }
    
    struct node* reversed_head = reverseLL(head);
    printLinkedList(reversed_head);
    
    return 0;
}"
22808051,PES1UG22CS315,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>
#include<math.h>
#include<string.h>
// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};
// insert a new node at the end of the linked list
void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to add two reversed-digit linked lists
struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }

    return result;
}
// Function to print the elements of a linked list
void printList(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&list1, value);
    }

    for (int i = 0; i < n2; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);

    printList(sumList);

    return 0;
}"
22808093,PES1UG22CS370,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#include <stdio.h>
#include <stdlib.h>

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22808093,PES1UG22CS370,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}"
22808101,PES1UG22CS351,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}






   

"
22808101,PES1UG22CS351,ADD TWO NUMBERS 104,15,"//include <stdio.h>




    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
   
#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* mergeLists(struct ListNode* firstList, struct ListNode* secondList) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    int carry = 0;
    
    while (firstList || secondList || carry) {
        int valueFromFirst = firstList ? firstList->value : 0;
        int valueFromSecond = secondList ? secondList->value : 0;
        
        int sum = valueFromFirst + valueFromSecond + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = sum % 10;
        current->next = NULL;
        
        if (firstList) {
            firstList = firstList->next;
        }
        if (secondList) {
            secondList = secondList->next;
        }
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

struct ListNode* generateList(int* digits, int numDigits) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    
    for (int i = 0; i < numDigits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = digits[i];
        current->next = NULL;
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

void displayList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    int numDigitsFirst, numDigitsSecond;
    scanf(""%d %d"", &numDigitsFirst, &numDigitsSecond);
    
    int* digitsFirst = (int*)malloc(numDigitsFirst * sizeof(int));
    int* digitsSecond = (int*)malloc(numDigitsSecond * sizeof(int));
    
    for (int i = 0; i < numDigitsFirst; i++) {
        scanf(""%d"", &digitsFirst[i]);
    }
    
    for (int i = 0; i < numDigitsSecond; i++) {
        scanf(""%d"", &digitsSecond[i]);
    }
    
    struct ListNode* firstList = generateList(digitsFirst, numDigitsFirst);
    struct ListNode* secondList = generateList(digitsSecond, numDigitsSecond);
    
    struct ListNode* mergedList = mergeLists(firstList, secondList);
    
    displayList(mergedList);
    
    return 0;
}
"
22808134,PES1UG22CS341,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22808134,PES1UG22CS341,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = createNode(sum);
        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;

    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num1 == NULL) {
            num1 = createNode(digit);
        } else {
            struct Node* current = num1;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num2 == NULL) {
            num2 = createNode(digit);
        } else {
            struct Node* current = num2;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);
    printLinkedList(sum);

    // Free allocated memory
    while (num1 != NULL) {
        struct Node* temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        struct Node* temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        struct Node* temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}"
22808187,PES1UG22CS308,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* link;
};

struct node* reverseLL(struct node* head) {
    struct node* prev = NULL;
    struct node* ptr = head;
    struct node* next = NULL;
    while (ptr != NULL) {
        next = ptr->link;
        ptr->link = prev;
        prev = ptr;
        ptr = next;
    }
    
    return prev;
}

void printLinkedList(struct node* head) {
    struct node* ptr = head;
    while (ptr != NULL) {
        printf(""%d"", ptr->data);
        ptr = ptr->link;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct node* head = NULL;
    struct node* ptr = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        
        struct node* new_node = (struct node*)malloc(sizeof(struct node));
        new_node->data = data;
        new_node->link = NULL;
        
        if (head == NULL) {
            head = new_node;
            ptr = new_node;
        } else {
            ptr->link = new_node;
            ptr = new_node;
        }
    }
    
    struct node* reversed_head = reverseLL(head);
    printLinkedList(reversed_head);
    
    return 0;
}

"
22808187,PES1UG22CS308,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};
void insertEnd(struct ListNode** head, int value) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->val = value;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct ListNode* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}
struct ListNode* addLists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode dummy = {0};
    struct ListNode* current = &dummy;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        insertEnd(&(current->next), sum);
        current = current->next;
    }

    return dummy.next;
}
void printList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d "", current->val);
        current = current->next;
    }
}
int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct ListNode* num1 = NULL;
    struct ListNode* num2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        insertEnd(&num1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        insertEnd(&num2, digit);
    }

    struct ListNode* result = addLists(num1, num2);
    printList(result);


    return 0;
}
"
22808203,PES1UG22CS357,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22808203,PES1UG22CS357,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = createNode(sum);
        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;

    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num1 == NULL) {
            num1 = createNode(digit);
        } else {
            struct Node* current = num1;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num2 == NULL) {
            num2 = createNode(digit);
        } else {
            struct Node* current = num2;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);
    printLinkedList(sum);

    // Free allocated memory
    while (num1 != NULL) {
        struct Node* temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        struct Node* temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        struct Node* temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}"
22808211,PES1UG22CS354,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
"
22808211,PES1UG22CS354,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}
"
22808212,PES1UG22CS331,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
"
22808212,PES1UG22CS331,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = createNode(sum);
        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;

    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num1 == NULL) {
            num1 = createNode(digit);
        } else {
            struct Node* current = num1;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num2 == NULL) {
            num2 = createNode(digit);
        } else {
            struct Node* current = num2;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);
    printLinkedList(sum);

    // Free allocated memory
    while (num1 != NULL) {
        struct Node* temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        struct Node* temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        struct Node* temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}"
22808218,PES1UG22CS313,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Node 
{

    int data;

    struct Node* link;

};

struct Node* createNode(int data) 
{

    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

    newNode->data = data;

    newNode->link = NULL;

    return newNode;

}

struct Node* reverseLinkedList(struct Node* head)
{

    struct Node* prev = NULL;

    struct Node* current = head;

    struct Node* next = NULL;

    while (current != NULL) 
    {

        next = current->link;

        current->link = prev;

        prev = current;

        current = next;

    }

    return prev;

}

void printLinkedList(struct Node* head)
{

    while (head != NULL)
    {

        printf(""%d"", head->data);

        head = head->link;

    }

    printf(""\n"");

}

int main()
{

    int n;

    scanf(""%d"", &n);

    struct Node* head = NULL;

    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)

    {

        int value;

        scanf(""%d"", &value);

        if(value<=1000 && value >= -1000 )

        {

            if (head == NULL)
            {

            head = createNode(value);

            tail = head;

        }

            else

            {

            tail->link = createNode(value);

            tail = tail->link;

        }

        }

        

    }

    head = reverseLinkedList(head);

    printLinkedList(head);

    // Free allocated memory

    struct Node* current = head;

    while (current != NULL)
    {

        struct Node* temp = current;

        current = current->link;

        free(temp);

    }

    return 0;

}"
22808218,PES1UG22CS313,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node 
{

    int data;

    struct ListNode* link;

};

struct Node* mergeLists(struct Node* firstList, struct Node* secondList) 
{

    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));

    struct Node* current = dummyHead;

    int carry = 0;

    

    while (firstList || secondList || carry) 
    {

        int valueFromFirst = firstList ? firstList->data : 0;

        int valueFromSecond = secondList ? secondList->data : 0;

        

        int sum = valueFromFirst + valueFromSecond + carry;

        carry = sum / 10;

        

        current->link = (struct Node*)malloc(sizeof(struct Node));

        current = current->link;

        current->data = sum % 10;

        current->link = NULL;

        

        if (firstList) {

            firstList = firstList->link;

        }

        if (secondList) {

            secondList = secondList->link;

        }

    }

    

    struct Node* resultHead = dummyHead->link;

    free(dummyHead);

    

    return resultHead;

}

struct Node* generateList(int* digits, int numDigits)
{

    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));

    struct Node* current = dummyHead;

    

    for (int i = 0; i < numDigits; i++) 
    {

        current->link = (struct Node*)malloc(sizeof(struct Node));

        current = current->link;

        current->data = digits[i];

        current->link = NULL;

    }

    

    struct Node* resultHead = dummyHead->link;

    free(dummyHead);

    

    return resultHead;

}

void displayList(struct Node* head)
{

    struct Node* current = head;

    while (current) {

        printf(""%d "", current->data);

        current = current->link;

    }

}

int main() 
{

    int numDigitsFirst, numDigitsSecond;

    scanf(""%d %d"", &numDigitsFirst, &numDigitsSecond);

    

    int* digitsFirst = (int*)malloc(numDigitsFirst * sizeof(int));

    int* digitsSecond = (int*)malloc(numDigitsSecond * sizeof(int));

    

    for (int i = 0; i < numDigitsFirst; i++)
    {

        scanf(""%d"", &digitsFirst[i]);

    }

    

    for (int i = 0; i < numDigitsSecond; i++) 
    {

        scanf(""%d"", &digitsSecond[i]);

    }

    

    struct Node* firstList = generateList(digitsFirst, numDigitsFirst);

    struct Node* secondList = generateList(digitsSecond, numDigitsSecond);

    

    struct Node* mergedList = mergeLists(firstList, secondList);

    

    displayList(mergedList);

    

    return 0;

}"
22808235,PES1UG22CS369,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22808235,PES1UG22CS369,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* mergeLists(struct ListNode* firstList, struct ListNode* secondList) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    int carry = 0;
    
    while (firstList || secondList || carry) {
        int valueFromFirst = firstList ? firstList->value : 0;
        int valueFromSecond = secondList ? secondList->value : 0;
        
        int sum = valueFromFirst + valueFromSecond + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = sum % 10;
        current->next = NULL;
        
        if (firstList) {
            firstList = firstList->next;
        }
        if (secondList) {
            secondList = secondList->next;
        }
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

struct ListNode* generateList(int* digits, int numDigits) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    
    for (int i = 0; i < numDigits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = digits[i];
        current->next = NULL;
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

void displayList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    int numDigitsFirst, numDigitsSecond;
    scanf(""%d %d"", &numDigitsFirst, &numDigitsSecond);
    
    int* digitsFirst = (int*)malloc(numDigitsFirst * sizeof(int));
    int* digitsSecond = (int*)malloc(numDigitsSecond * sizeof(int));
    
    for (int i = 0; i < numDigitsFirst; i++) {
        scanf(""%d"", &digitsFirst[i]);
    }
    
    for (int i = 0; i < numDigitsSecond; i++) {
        scanf(""%d"", &digitsSecond[i]);
    }
    
    struct ListNode* firstList = generateList(digitsFirst, numDigitsFirst);
    struct ListNode* secondList = generateList(digitsSecond, numDigitsSecond);
    
    struct ListNode* mergedList = mergeLists(firstList, secondList);
    
    displayList(mergedList);
    
    return 0;
}"
22808246,PES1UG22CS334,Reversing a Linked List 1,15,"
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        current=current->next;

       
        }

        
    
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        if (head == NULL) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->val = value;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->val = value;
            current->next = NULL;
        }
    }

    struct Node* newHead = reverseList(head);
    printList(newHead);

    current = newHead;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
"
22808246,PES1UG22CS334,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}"
22808253,PES1UG22CS329,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22808253,PES1UG22CS329,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = createNode(sum);
        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;

    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num1 == NULL) {
            num1 = createNode(digit);
        } else {
            struct Node* current = num1;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num2 == NULL) {
            num2 = createNode(digit);
        } else {
            struct Node* current = num2;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);
    printLinkedList(sum);

    while (num1 != NULL) {
        struct Node* temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        struct Node* temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        struct Node* temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}"
22808281,PES1UG22CS317,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insert(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next) {
        temp = temp->next;
    }
    temp->next = newNode;
}

void reverse(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* nextNode;
    while (current) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    *head = prev;
}

void display(struct Node* head) {
    while (head) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n, value;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &value);
        insert(&head, value);
    }
    reverse(&head);
    display(head);

    return 0;
}"
22808281,PES1UG22CS317,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Node
{
    int value;
    struct Node* next;
};

typedef struct Node Node;

void insert(Node** head,int value)
{
    Node* new_node=(Node*)malloc(sizeof(Node));
    new_node->value=value;
    new_node->next=NULL;
    if(*head==NULL)
        *head=new_node;
    else
    {
        Node* current=*head;
        while(current->next!=NULL)
        {
            current=current->next;
        }
        current->next=new_node;
    }
}
Node* addlists(Node* list1,Node* list2)
{
    Node* sum_head=NULL;
    int car=0;
    while(list1!=NULL||list2!=NULL||car>0)
    {
        int val1=(list1!=NULL)?list1->value:0;
        int val2=(list2!=NULL)?list2->value:0;
        int current_sum=val1+val2+car;
        car=current_sum/10;
        int digit=current_sum%10;
        insert(&sum_head,digit);
        if(list1!=NULL)list1=list1->next;
        if(list2!=NULL)list2=list2->next;
    }
    return sum_head;
}
void printlist(Node* head)
{
    while(head!=NULL)
    {
        printf(""%d "",head->value);
        head=head->next;
    }
}
int main() {

    int n1,n2;
    scanf(""%d %d"",&n1,&n2);
    Node* l1=NULL;
    Node* l2=NULL;
    for(int i=0;i<n1;i++)
    {
        int value;
        scanf(""%d"",&value);
        insert(&l1,value);
    }
    for(int j=0;j<n2;j++)
    {
        int value;
        scanf(""%d"",&value);
        insert(&l2,value);
    }
    Node* sum=addlists(l1,l2);
    printlist(sum);
    return 0;
}"
22808299,PES1UG22CS347,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int info;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->info);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        if (head == NULL) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->info = value;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->info = value;
            current->next = NULL;
        }
    }

    struct Node* newHead = reverseList(head);
    printList(newHead);

    current = newHead;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
    "
22808299,PES1UG22CS347,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); 
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}"
22808328,PES1202202252,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insert(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next) {
        temp = temp->next;
    }
    temp->next = newNode;
}

void reverse(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* nextNode;
    while (current) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    *head = prev;
}

void display(struct Node* head) {
    while (head) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n, value;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &value);
        insert(&head, value);
    }
    reverse(&head);
    display(head);

    return 0;
}
"
22808328,PES1202202252,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Node
{
    int value;
    struct Node* next;
};

typedef struct Node Node;

void insert(Node** head,int value)
{
    Node* new_node=(Node*)malloc(sizeof(Node));
    new_node->value=value;
    new_node->next=NULL;
    if(*head==NULL)
        *head=new_node;
    else
    {
        Node* current=*head;
        while(current->next!=NULL)
        {
            current=current->next;
        }
        current->next=new_node;
    }
}
Node* addlists(Node* list1,Node* list2)
{
    Node* sum_head=NULL;
    int car=0;
    while(list1!=NULL||list2!=NULL||car>0)
    {
        int val1=(list1!=NULL)?list1->value:0;
        int val2=(list2!=NULL)?list2->value:0;
        int current_sum=val1+val2+car;
        car=current_sum/10;
        int digit=current_sum%10;
        insert(&sum_head,digit);
        if(list1!=NULL)list1=list1->next;
        if(list2!=NULL)list2=list2->next;
    }
    return sum_head;
}
void printlist(Node* head)
{
    while(head!=NULL)
    {
        printf(""%d "",head->value);
        head=head->next;
    }
}
int main() {

    int n1,n2;
    scanf(""%d %d"",&n1,&n2);
    Node* l1=NULL;
    Node* l2=NULL;
    for(int i=0;i<n1;i++)
    {
        int value;
        scanf(""%d"",&value);
        insert(&l1,value);
    }
    for(int j=0;j<n2;j++)
    {
        int value;
        scanf(""%d"",&value);
        insert(&l2,value);
    }
    Node* sum=addlists(l1,l2);
    printlist(sum);
    return 0;
}"
22808398,PES1UG22CS355,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22808398,PES1UG22CS355,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* mergeLists(struct ListNode* firstList, struct ListNode* secondList) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    int carry = 0;
    
    while (firstList || secondList || carry) {
        int valueFromFirst = firstList ? firstList->value : 0;
        int valueFromSecond = secondList ? secondList->value : 0;
        
        int sum = valueFromFirst + valueFromSecond + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = sum % 10;
        current->next = NULL;
        
        if (firstList) {
            firstList = firstList->next;
        }
        if (secondList) {
            secondList = secondList->next;
        }
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

struct ListNode* generateList(int* digits, int numDigits) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    
    for (int i = 0; i < numDigits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = digits[i];
        current->next = NULL;
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

void displayList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    int numDigitsFirst, numDigitsSecond;
    scanf(""%d %d"", &numDigitsFirst, &numDigitsSecond);
    
    int* digitsFirst = (int*)malloc(numDigitsFirst * sizeof(int));
    int* digitsSecond = (int*)malloc(numDigitsSecond * sizeof(int));
    
    for (int i = 0; i < numDigitsFirst; i++) {
        scanf(""%d"", &digitsFirst[i]);
    }
    
    for (int i = 0; i < numDigitsSecond; i++) {
        scanf(""%d"", &digitsSecond[i]);
    }
    
    struct ListNode* firstList = generateList(digitsFirst, numDigitsFirst);
    struct ListNode* secondList = generateList(digitsSecond, numDigitsSecond);
    
    struct ListNode* mergedList = mergeLists(firstList, secondList);
    
    displayList(mergedList);
    
    return 0;
}
"
22811194,PES1UG22CS335,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
"
22811194,PES1UG22CS335,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Node {
    int value;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = createNode(sum);
        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;

    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num1 == NULL) {
            num1 = createNode(digit);
        } else {
            struct Node* current = num1;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num2 == NULL) {
            num2 = createNode(digit);
        } else {
            struct Node* current = num2;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);
    printLinkedList(sum);

    // Free allocated memory
    while (num1 != NULL) {
        struct Node* temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        struct Node* temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        struct Node* temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}"
22811868,PES1UG22CS363,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct node {
    int data;
    struct node* link;
};

struct node* reverseLL(struct node* head) {
    struct node* prev = NULL;
    struct node* ptr = head;
    struct node* next = NULL;
    while (ptr != NULL) {
        next = ptr->link;
        ptr->link = prev;
        prev = ptr;
        ptr = next;
    }
    
    return prev;
}

void printLinkedList(struct node* head) {
    struct node* ptr = head;
    while (ptr != NULL) {
        printf(""%d"", ptr->data);
        ptr = ptr->link;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct node* head = NULL;
    struct node* ptr = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        
        struct node* new_node = (struct node*)malloc(sizeof(struct node));
        new_node->data = data;
        new_node->link = NULL;
        
        if (head == NULL) {
            head = new_node;
            ptr = new_node;
        } else {
            ptr->link = new_node;
            ptr = new_node;
        }
    }
    
    struct node* reversed_head = reverseLL(head);
    printLinkedList(reversed_head);
    
    return 0;
}

"
22811868,PES1UG22CS363,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};
// insert a new node at the end of the linked list
void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to add two reversed-digit linked lists
struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }

    return result;
}
// Function to print the elements of a linked list
void printList(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&list1, value);
    }

    for (int i = 0; i < n2; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);

    printList(sumList);

    return 0;
}    
    
"
22813069,PES1UG22CS327,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int info;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->info);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < n; i++) {
        int infoue;
        scanf(""%d"", &infoue);

        if (head == NULL) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->info = infoue;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->info = infoue;
            current->next = NULL;
        }
    }

    struct Node* newHead = reverseList(head);
    printList(newHead);

    current = newHead;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
"
22813069,PES1UG22CS327,ADD TWO NUMBERS 104,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

typedef struct node{
    int info;
    struct node* link;
}NODE;

int number(NODE* head){
    int num = 0;
    while(head){
        num = num*10 + head->info;
        head = head->link;
    }
    return num;
}

NODE* create_node(){
    NODE* new_node = (NODE*)malloc(sizeof(NODE*));
    new_node->link = NULL;
    new_node->info = 0;
    return new_node;
}

void display(NODE* reversed_list){
    while(reversed_list){
        printf(""%i"", reversed_list->info);
        reversed_list = reversed_list->link;
    }
}

NODE* reverse_list(NODE* head){
    NODE* reversed_list = create_node();
    reversed_list->info = head->info;
    head = head->link;
    while(head){
        NODE* new_node = create_node();
        new_node->info = head->info;
        new_node->link = reversed_list;
        reversed_list = new_node;
        head = head->link;
    }
    return reversed_list;
}

int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    int num_ele1;
    int num_ele2;
    scanf(""%d "", &num_ele1);
    scanf(""%d\n"", &num_ele2);

    NODE* head1 = (NODE*)malloc(sizeof(NODE*));
    scanf(""%d "", &(head1->info));
    for(int i=1; i < num_ele1; i++){
        NODE* new_node = create_node();
        while(1){
            scanf(""%d"", &(new_node->info));
            if(-1000<=new_node->info && new_node->info<=1000){
                break;
            }
        }
        NODE* tmp = head1;
        while(tmp->link){
            tmp = tmp->link;
        }
        tmp->link = new_node;
    }
    NODE* head2 = (NODE*)malloc(sizeof(NODE*));
    scanf(""%d "", &(head2->info));
    for(int i=1; i < num_ele2; i++){
        NODE* new_node = create_node();
        while(1){
            scanf(""%d"", &(new_node->info));
            if(-1000<=new_node->info && new_node->info<=1000){
                break;
            }
        }
        NODE* tmp = head2;
        while(tmp->link){
            tmp = tmp->link;
        }
        tmp->link = new_node;
    }


    NODE* reversed_list1 = reverse_list(head1);
    NODE* reversed_list2 = reverse_list(head2);

    int num1 = number(reversed_list1); 
    int num2 = number(reversed_list2);

    int sum = num1+num2;

    while(sum){
        int ele = sum%10;
        sum = sum/10;
        printf(""%d "", ele);
    }

    return 0;
}
"
22814129,PES1UG22CS309,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverse(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void display(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* end = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            end = head;
        }
            else
            {
            end->next = createNode(value);
            end = end->next;
        }
        }

        
    }

    head = reverse(head);
    display(head);

    
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

}


"
22814129,PES1UG22CS309,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

struct Node* add(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = createNode(sum);
        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

void display(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;

    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num1 == NULL) {
            num1 = createNode(digit);
        } else {
            struct Node* current = num1;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num2 == NULL) {
            num2 = createNode(digit);
        } else {
            struct Node* current = num2;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    struct Node* sum = add(num1, num2);
    display(sum);

    while (num1 != NULL) {
        struct Node* temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        struct Node* temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        struct Node* temp = sum;
        sum = sum->next;
        free(temp);
    }
}
"
22814285,PES1UG22CS319,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* rev = NULL;
    struct Node* current = head;
    
    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = rev;
        rev = current;
        current = nextNode;
    }
    
    return rev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    struct Node* current = NULL;
    
    for (int i = 0; i < n; ++i) {
        int value;
        scanf(""%d"", &value);
        
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;
        
        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }
    
    head = reverseLinkedList(head);
    printLinkedList(head);
    
  return 0;
}
"
22814285,PES1UG22CS319,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* mergeLists(struct ListNode* firstList, struct ListNode* secondList) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    int carry = 0;
    
    while (firstList || secondList || carry) {
        int valueFromFirst = firstList ? firstList->value : 0;
        int valueFromSecond = secondList ? secondList->value : 0;
        
        int sum = valueFromFirst + valueFromSecond + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = sum % 10;
        current->next = NULL;
        
        if (firstList) {
            firstList = firstList->next;
        }
        if (secondList) {
            secondList = secondList->next;
        }
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

struct ListNode* generateList(int* digits, int numDigits) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    
    for (int i = 0; i < numDigits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = digits[i];
        current->next = NULL;
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

void displayList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    int numDigitsFirst, numDigitsSecond;
    scanf(""%d %d"", &numDigitsFirst, &numDigitsSecond);
    
    int* digitsFirst = (int*)malloc(numDigitsFirst * sizeof(int));
    int* digitsSecond = (int*)malloc(numDigitsSecond * sizeof(int));
    
    for (int i = 0; i < numDigitsFirst; i++) {
        scanf(""%d"", &digitsFirst[i]);
    }
    
    for (int i = 0; i < numDigitsSecond; i++) {
        scanf(""%d"", &digitsSecond[i]);
    }
    
    struct ListNode* firstList = generateList(digitsFirst, numDigitsFirst);
    struct ListNode* secondList = generateList(digitsSecond, numDigitsSecond);
    
    struct ListNode* mergedList = mergeLists(firstList, secondList);
    
    displayList(mergedList);
    
    return 0;
}
"
22814673,PES1UG22CS356,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22814673,PES1UG22CS356,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertEnd(Node* head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

Node* addReversedLists(Node* list1, Node* list2) {
    Node* result = NULL;
    Node* tail = NULL;
    int carry = 0;

   while (list1 != NULL || list2 != NULL || carry != 0) {
    int sum = carry;

    if (list1 != NULL) {
        sum += list1->data;
        list1 = list1->next;
    }

    if (list2 != NULL) {
        sum += list2->data;
        list2 = list2->next;
    }

    carry = sum / 10;  // Divide and update carry first
    sum = sum % 10;

    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = sum;
    newNode->next = NULL;

    if (result == NULL) {
        result = newNode;
        tail = newNode;
    } else {
        tail->next = newNode;
        tail = newNode;
    }
}

    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void freeList(Node* head) {
    while (head != NULL) {
        Node* temp = head;
        head = head->next;
        free(temp);
    }
}


int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    Node* list1 = NULL;
    Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        list1 = insertEnd(list1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        list2 = insertEnd(list2, digit);
    }

    Node* result = addReversedLists(list1, list2);
    printList(result);
    freeList(list1);
    freeList(list2);
    freeList(result);


    return 0;
}"
22814853,PES1UG22CS337,Reversing a Linked List 1,15,"#include<stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < numNodes; i++) {
        int nodeValue;
        scanf(""%d"", &nodeValue);

        if (head == NULL) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->value = nodeValue;
            head->next = NULL;
            tail = head;
        } else {
            tail->next = (struct Node*)malloc(sizeof(struct Node));
            tail = tail->next;
            tail->value = nodeValue;
            tail->next = NULL;
        }
    }

    struct Node* newHead = reverseList(head);
    printList(newHead);

    struct Node* currentNode = newHead;
    while (currentNode != NULL) {
        struct Node* temp = currentNode;
        currentNode = currentNode->next;
        free(temp);
    }

    return 0;
}"
22814853,PES1UG22CS337,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}"
22815737,PES1UG22CS368,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>







struct node {
    int data;
    struct node* link;
};

struct node* reverseLL(struct node* head) {
    struct node* prev = NULL;
    struct node* ptr = head;
    struct node* next = NULL;
    while (ptr != NULL) {
        next = ptr->link;
        ptr->link = prev;
        prev = ptr;
        ptr = next;
    }
    
    return prev;
}

void printLinkedList(struct node* head) {
    struct node* ptr = head;
    while (ptr != NULL) {
        printf(""%d"", ptr->data);
        ptr = ptr->link;
    }
}

int main() {
    
     /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    int n;
    scanf(""%d"", &n);
    
    struct node* head = NULL;
    struct node* ptr = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        
        struct node* new_node = (struct node*)malloc(sizeof(struct node));
        new_node->data = data;
        new_node->link = NULL;
        
        if (head == NULL) {
            head = new_node;
            ptr = new_node;
        } else {
            ptr->link = new_node;
            ptr = new_node;
        }
    }
    
    struct node* reversed_head = reverseLL(head);
    printLinkedList(reversed_head);
    
    return 0;
}
"
22815737,PES1UG22CS368,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>
#include<math.h>
#include<string.h>
// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};
// insert a new node at the end of the linked list
void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to add two reversed-digit linked lists
struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }

    return result;
}
// Function to print the elements of a linked list
void printList(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&list1, value);
    }

    for (int i = 0; i < n2; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);

    printList(sumList);

    return 0;
}"
22815781,PES1UG22CS358,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    
    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    
    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    struct Node* current = NULL;
    
    for (int i = 0; i < n; ++i) {
        int value;
        scanf(""%d"", &value);
        
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;
        
        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }
    
    head = reverseLinkedList(head);
    printLinkedList(head);
    
    return 0;
}"
22815781,PES1UG22CS358,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* mergeLists(struct ListNode* firstList, struct ListNode* secondList) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    int carry = 0;
    
    while (firstList || secondList || carry) {
        int valueFromFirst = firstList ? firstList->value : 0;
        int valueFromSecond = secondList ? secondList->value : 0;
        
        int sum = valueFromFirst + valueFromSecond + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = sum % 10;
        current->next = NULL;
        
        if (firstList) {
            firstList = firstList->next;
        }
        if (secondList) {
            secondList = secondList->next;
        }
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

struct ListNode* generateList(int* digits, int numDigits) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    
    for (int i = 0; i < numDigits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = digits[i];
        current->next = NULL;
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

void displayList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    int numDigitsFirst, numDigitsSecond;
    scanf(""%d %d"", &numDigitsFirst, &numDigitsSecond);
    
    int* digitsFirst = (int*)malloc(numDigitsFirst * sizeof(int));
    int* digitsSecond = (int*)malloc(numDigitsSecond * sizeof(int));
    
    for (int i = 0; i < numDigitsFirst; i++) {
        scanf(""%d"", &digitsFirst[i]);
    }
    
    for (int i = 0; i < numDigitsSecond; i++) {
        scanf(""%d"", &digitsSecond[i]);
    }
    
    struct ListNode* firstList = generateList(digitsFirst, numDigitsFirst);
    struct ListNode* secondList = generateList(digitsSecond, numDigitsSecond);
    
    struct ListNode* mergedList = mergeLists(firstList, secondList);
    
    displayList(mergedList);
    
    return 0;
}
"
22816380,PES1UG22CS330,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
"
22816380,PES1UG22CS330,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}"
22817030,PES1UG22CS343,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* link;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->link;
        current->link = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->link;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        if (head == NULL) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->value = value;
            head->link = NULL;
            current = head;
        } else {
            current->link = (struct Node*)malloc(sizeof(struct Node));
            current = current->link;
            current->value = value;
            current->link = NULL;
        }
    }

    struct Node* newHead = reverseList(head);
    printList(newHead);

    current = newHead;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->link;
        free(temp);
    }

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
"
22817030,PES1UG22CS343,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* link;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->link;
        current->link = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->link != NULL) {
            printf("" ""); 
        }
        current = current->link;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* List = (struct Node*)malloc(sizeof(struct Node));
    List->data = 0;
    List->link = NULL;
    struct Node* current = List;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->data;
            l1 = l1->link;
        }
        if (l2 != NULL) {
            sum += l2->data;
            l2 = l2->link;
        }

        carry = sum / 10;
        sum %= 10;

        current->link= (struct Node*)malloc(sizeof(struct Node));
        current = current->link;
        current->data = sum;
        current->link = NULL;
    }

    struct Node* result = List->link;
    free(List);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = digit;
        newNode->link = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = digit;
        newNode->link = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->link;
        free(temp);
        temp = nextTemp;
    }

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
"
22818185,PES1UG22CS352,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22818185,PES1UG22CS352,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = createNode(sum);
        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;

    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num1 == NULL) {
            num1 = createNode(digit);
        } else {
            struct Node* current = num1;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num2 == NULL) {
            num2 = createNode(digit);
        } else {
            struct Node* current = num2;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);
    printLinkedList(sum);

    // Free allocated memory
    while (num1 != NULL) {
        struct Node* temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        struct Node* temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        struct Node* temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}"
22819913,PES1UG22CS336,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        if (head == NULL) {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->val = value;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->val = value;
            current->next = NULL;
        }
    }

    struct Node* newHead = reverseList(head);
    printList(newHead);

    current = newHead;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22819913,PES1UG22CS336,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}
"
22821676,PES1UG22CS359,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node{
    int value;
    struct node *next;
};

struct node *reverse(struct node *head){
    struct node *perv = NULL;
    struct node *current = head;
    while(current != NULL){
        struct node *nextnode = current ->next;
        current ->next = perv;
        perv = current;
        current = nextnode;
    }
    return perv;
}

void printlist(struct node *head){
    struct node *current = head;

    while(current != NULL){
        printf(""%d"",current->value);
        current = current->next;
    }
}

int main() {

    int n;

    scanf(""%d"",&n);
    struct node *head = NULL;
    struct node *current = NULL;
    for (int i=0;i<n; ++i){
        int value;
        scanf(""%d"",&value);
        struct node *newNode = malloc(sizeof(struct node));
        newNode->value = value;
        newNode->next = NULL;
        if(head == NULL){
            head = newNode;
            current = newNode;
            
        }
        else{
            current->next = newNode;
            current = newNode;
        }
    }
    head = reverse(head);
    printlist(head);
    
    return 0;
}"
22821676,PES1UG22CS359,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

typedef struct ListNode ListNode;

ListNode* add_linked_lists(ListNode* list1, ListNode* list2) {
    int carry = 0;
    ListNode* dummy_head = (ListNode*)malloc(sizeof(ListNode));
    dummy_head->next = NULL;
    ListNode* current = dummy_head;
    
    while (list1 != NULL || list2 != NULL || carry != 0) {
        int value1 = (list1 != NULL) ? list1->value : 0;
        int value2 = (list2 != NULL) ? list2->value : 0;
        
        int total = value1 + value2 + carry;
        carry = total / 10;
        int digit = total % 10;
        
        current->next = (ListNode*)malloc(sizeof(ListNode));
        current = current->next;
        current->value = digit;
        current->next = NULL;
        
        if (list1 != NULL) {
            list1 = list1->next;
        }
        if (list2 != NULL) {
            list2 = list2->next;
        }
    }
    
    ListNode* result = dummy_head->next;
    free(dummy_head);
    return result;
}

void print_linked_list(ListNode* node) {
    while (node != NULL) {
        printf(""%d"", node->value);
        if (node->next != NULL) {
            printf("" "");
        }
        node = node->next;
    }
    printf(""\n"");
}

int main() {
    int num_digits_list1, num_digits_list2;
    scanf(""%d %d"", &num_digits_list1, &num_digits_list2);
    
    int values_list1[num_digits_list1];
    int values_list2[num_digits_list2];
    
    for (int i = num_digits_list1 - 1; i >= 0; --i) {
        scanf(""%d"", &values_list1[i]);
    }
    for (int i = num_digits_list2 - 1; i >= 0; --i) {
        scanf(""%d"", &values_list2[i]);
    }
    
    ListNode* list1 = NULL;
    ListNode* list2 = NULL;
    
    for (int i = 0; i < num_digits_list1; ++i) {
        ListNode* newNode = (ListNode*)malloc(sizeof(ListNode));
        newNode->value = values_list1[i];
        newNode->next = list1;
        list1 = newNode;
    }
    
    for (int i = 0; i < num_digits_list2; ++i) {
        ListNode* newNode = (ListNode*)malloc(sizeof(ListNode));
        newNode->value = values_list2[i];
        newNode->next = list2;
        list2 = newNode;
    }
    
    ListNode* result_list = add_linked_lists(list1, list2);
    
    print_linked_list(result_list);
    
    while (result_list != NULL) {
        ListNode* temp = result_list;
        result_list = result_list->next;
        free(temp);
    }
    
   
    while (list1 != NULL) {
        ListNode* temp = list1;
        list1 = list1->next;
        free(temp);
    }
    while (list2 != NULL) {
        ListNode* temp = list2;
        list2 = list2->next;
        free(temp);
    }
    
    return 0;
}
"
22821904,PES1UG22CS361,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    
    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    
    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int num;
    scanf(""%d"", &num);
    
    struct Node* head = NULL;
    struct Node* current = NULL;
    
    for (int i = 0; i < num; ++i) {
        int val;
        scanf(""%d"", &val);
        
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = val;
        newNode->next = NULL;
        
        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }
    
    head = reverseList(head);
    printList(head);
    
    return 0;
}
"
22821904,PES1UG22CS361,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* mergeLists(struct ListNode* firstList, struct ListNode* secondList) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    int carry = 0;
    
    while (firstList || secondList || carry) {
        int valueFromFirst = firstList ? firstList->value : 0;
        int valueFromSecond = secondList ? secondList->value : 0;
        
        int sum = valueFromFirst + valueFromSecond + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = sum % 10;
        current->next = NULL;
        
        if (firstList) {
            firstList = firstList->next;
        }
        if (secondList) {
            secondList = secondList->next;
        }
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

struct ListNode* generateList(int* digits, int numDigits) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    
    for (int i = 0; i < numDigits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = digits[i];
        current->next = NULL;
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

void displayList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    int numDigitsFirst, numDigitsSecond;
    scanf(""%d %d"", &numDigitsFirst, &numDigitsSecond);
    
    int* digitsFirst = (int*)malloc(numDigitsFirst * sizeof(int));
    int* digitsSecond = (int*)malloc(numDigitsSecond * sizeof(int));
    
    for (int i = 0; i < numDigitsFirst; i++) {
        scanf(""%d"", &digitsFirst[i]);
    }
    
    for (int i = 0; i < numDigitsSecond; i++) {
        scanf(""%d"", &digitsSecond[i]);
    }
    
    struct ListNode* firstList = generateList(digitsFirst, numDigitsFirst);
    struct ListNode* secondList = generateList(digitsSecond, numDigitsSecond);
    
    struct ListNode* mergedList = mergeLists(firstList, secondList);
    
    displayList(mergedList);
    
    return 0;
}
"
22823386,PES1UG22CS316,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    
    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    
    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    struct Node* current = NULL;
    
    for (int i = 0; i < n; ++i) {
        int value;
        scanf(""%d"", &value);
        
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;
        
        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }
    
    head = reverseLinkedList(head);
    printLinkedList(head);
    
    return 0;
}"
22823386,PES1UG22CS316,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* mergeLists(struct ListNode* firstList, struct ListNode* secondList) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    int carry = 0;
    
    while (firstList || secondList || carry) {
        int valueFromFirst = firstList ? firstList->value : 0;
        int valueFromSecond = secondList ? secondList->value : 0;
        
        int sum = valueFromFirst + valueFromSecond + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = sum % 10;
        current->next = NULL;
        
        if (firstList) {
            firstList = firstList->next;
        }
        if (secondList) {
            secondList = secondList->next;
        }
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

struct ListNode* generateList(int* digits, int numDigits) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    
    for (int i = 0; i < numDigits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = digits[i];
        current->next = NULL;
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

void displayList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    int numDigitsFirst, numDigitsSecond;
    scanf(""%d %d"", &numDigitsFirst, &numDigitsSecond);
    
    int* digitsFirst = (int*)malloc(numDigitsFirst * sizeof(int));
    int* digitsSecond = (int*)malloc(numDigitsSecond * sizeof(int));
    
    for (int i = 0; i < numDigitsFirst; i++) {
        scanf(""%d"", &digitsFirst[i]);
    }
    
    for (int i = 0; i < numDigitsSecond; i++) {
        scanf(""%d"", &digitsSecond[i]);
    }
    
    struct ListNode* firstList = generateList(digitsFirst, numDigitsFirst);
    struct ListNode* secondList = generateList(digitsSecond, numDigitsSecond);
    
    struct ListNode* mergedList = mergeLists(firstList, secondList);
    
    displayList(mergedList);
    
    return 0;
}"
22825362,PES1UG22CS310,Reversing a Linked List 1,7.5,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node* link;
};
struct node* reverselist(struct node* head)
{
    struct node* prev=NULL;
    struct node* current= head;
    while(current!=NULL)
    {
        struct node* nextnode= current->link;
        current->link=prev;
        prev=current;
        current=nextnode;
    }
    return prev;
}
int main()
{
    int numNodes;
    scanf(""%d"", &numNodes);
    
    struct node* head = NULL;
    struct node* current = NULL;
    
    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);
        struct node* newNode = (struct node*)malloc(sizeof(struct node));
        newNode->data = value;
        newNode->link = NULL;
        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->link = newNode;
            current = newNode;
        }
    }
    struct node* reversehead=reverselist(head);
    struct node* reversecurrent=reversehead;
    while (reversecurrent!=NULL)
    {
        printf(""%d"",reversecurrent->data);
        reversecurrent=reversecurrent->link;
    }
    
    return 0;
}"
22825362,PES1UG22CS310,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node* link;
}Node;

void insert(Node** head,int value)
{
    Node* new_node=(Node*)malloc(sizeof(Node));
    new_node->data=value;
    new_node->link=NULL;
    if(*head==NULL)
        *head=new_node;
    else
    {
        Node* current=*head;
        while(current->link!=NULL)
        {
            current=current->link;
        }
        current->link=new_node;
    }
}
Node* addlists(Node* list1,Node* list2)
{
    Node* sum_head=NULL;
    int car=0;
    while(list1!=NULL||list2!=NULL||car>0)
    {
        int val1=(list1!=NULL)?list1->data:0;
        int val2=(list2!=NULL)?list2->data:0;
        int current_sum=val1+val2+car;
        car=current_sum/10;
        int digit=current_sum%10;
        insert(&sum_head,digit);
        if(list1!=NULL)list1=list1->link;
        if(list2!=NULL)list2=list2->link;
    }
    return sum_head;
}
int main() {

    int n1,n2;
    scanf(""%d %d"",&n1,&n2);
    Node* l1=NULL;
    Node* l2=NULL;
    for(int i=0;i<n1;i++)
    {
        int value;
        scanf(""%d"",&value);
        insert(&l1,value);
    }
    for(int j=0;j<n2;j++)
    {
        int value;
        scanf(""%d"",&value);
        insert(&l2,value);
    }
    Node* sum=addlists(l1,l2);
    Node* head=sum;
    while(head!=NULL)
    {
        printf(""%d "",head->data);
        head=head->link;
    }
    return 0;
}
"
22825407,PES1UG22CS333,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node 
{
    int val;
    struct Node* next;
};
struct Node* reverseList(struct Node* head) 
{
    struct Node* prev = NULL;
    struct Node* current = head;
    while (current != NULL) 
    {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    return prev;
}

void printList(struct Node* head) 
{
    struct Node* current = head;
    while (current != NULL) 
    {
        printf(""%d"", current->val);
        current = current->next;
    }
}

int main() 
{
    int n;
    scanf(""%d"", &n);
    struct Node* head = NULL;
    struct Node* current = NULL;
    for (int i = 0; i < n; i++) 
    {
        int value;
        scanf(""%d"", &value);

        if (head == NULL) 
        {
            head = (struct Node*)malloc(sizeof(struct Node));
            head->val = value;
            head->next = NULL;
            current = head;
        } 
        else 
        {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->val = value;
            current->next = NULL;
        }
    }
    struct Node* newHead = reverseList(head);
    printList(newHead);
    current = newHead;
    while (current != NULL) 
    {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }
    return 0;
}"
22825407,PES1UG22CS333,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}"
22825442,PES1UG22CS453,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Element {
    int val;
    struct Element *next;
};

struct Element *reverse(struct Element *start) {
    struct Element *previous = NULL;
    struct Element *current = start;
    while (current != NULL) {
        struct Element *nextElement = current->next;
        current->next = previous;
        previous = current;
        current = nextElement;
    }
    return previous;
}

void printList(struct Element *start) {
    struct Element *current = start;

    while (current != NULL) {
        printf(""%d"", current->val);
        current = current->next;
    }
}

int main() {
    int num;

    scanf(""%d"", &num);
    struct Element *start = NULL;
    struct Element *current = NULL;
    for (int i = 0; i < num; ++i) {
        int value;
        scanf(""%d"", &value);
        struct Element *newElement = malloc(sizeof(struct Element));
        newElement->val = value;
        newElement->next = NULL;
        if (start == NULL) {
            start = newElement;
            current = newElement;

        } else {
            current->next = newElement;
            current = newElement;
        }
    }
    start = reverse(start);
    printList(start);
    return 0;
}"
22825442,PES1UG22CS453,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode1 {
    int val1;
    struct ListNode1* next1;
};

struct ListNode1* add_linked_lists1(struct ListNode1* l1_1, struct ListNode1* l2_1) {
    struct ListNode1* dummy_head1 = (struct ListNode1*)malloc(sizeof(struct ListNode1));
    struct ListNode1* current1 = dummy_head1;
    int carry1 = 0;
    
    while (l1_1 || l2_1 || carry1) {
        int val1_1 = l1_1 ? l1_1->val1 : 0;
        int val2_1 = l2_1 ? l2_1->val1 : 0;
        
        int total1 = val1_1 + val2_1 + carry1;
        carry1 = total1 / 10;
        
        current1->next1 = (struct ListNode1*)malloc(sizeof(struct ListNode1));
        current1 = current1->next1;
        current1->val1 = total1 % 10;
        current1->next1 = NULL;
        
        if (l1_1) {
            l1_1 = l1_1->next1;
        }
        if (l2_1) {
            l2_1 = l2_1->next1;
        }
    }
    
    struct ListNode1* result_head1 = dummy_head1->next1;
    free(dummy_head1);
    
    return result_head1;
}

struct ListNode1* create_linked_list1(int* digits1, int num_digits1) {
    struct ListNode1* dummy_head1 = (struct ListNode1*)malloc(sizeof(struct ListNode1));
    struct ListNode1* current1 = dummy_head1;
    
    for (int i1 = 0; i1 < num_digits1; i1++) {
        current1->next1 = (struct ListNode1*)malloc(sizeof(struct ListNode1));
        current1 = current1->next1;
        current1->val1 = digits1[i1];
        current1->next1 = NULL;
    }
    
    struct ListNode1* result_head1 = dummy_head1->next1;
    free(dummy_head1);
    
    return result_head1;
}

void print_linked_list1(struct ListNode1* head1) {
    struct ListNode1* current1 = head1;
    while (current1) {
        printf(""%d "", current1->val1);
        current1 = current1->next1;
    }
}

int main() {
    int num_digits_l1_1, num_digits_l2_1;
    scanf(""%d %d"", &num_digits_l1_1, &num_digits_l2_1);
    
    int* digits_l1_1 = (int*)malloc(num_digits_l1_1 * sizeof(int));
    int* digits_l2_1 = (int*)malloc(num_digits_l2_1 * sizeof(int));
    
    for (int i1 = 0; i1 < num_digits_l1_1; i1++) {
        scanf(""%d"", &digits_l1_1[i1]);
    }
    
    for (int i1 = 0; i1 < num_digits_l2_1; i1++) {
        scanf(""%d"", &digits_l2_1[i1]);
    }
    
    struct ListNode1* l1_1 = create_linked_list1(digits_l1_1, num_digits_l1_1);
    struct ListNode1* l2_1 = create_linked_list1(digits_l2_1, num_digits_l2_1);
    
    struct ListNode1* sum_list_1 = add_linked_lists1(l1_1, l2_1);
    
    print_linked_list1(sum_list_1);
    
    return 0;
}
"
22825472,PES1UG22CS332,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createnewNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverse_LL(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* curr = head;
    struct Node* next = NULL;

    while (curr != NULL) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr= next;
    }

    return prev;
}

void print_LL(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* end = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createnewNode(value);
            end = head;
        }
            else
            {
            end->next = createnewNode(value);
            end = end->next;
        }
        }

        
    }

    head = reverse_LL(head);
    print_LL(head);

    
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22825472,PES1UG22CS332,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* createnewNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

struct Node* add_LL(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = createnewNode(sum);
        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

void print_LL(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;

    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num1 == NULL) {
            num1 = createnewNode(digit);
        } else {
            struct Node* current = num1;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createnewNode(digit);
        }
    }

    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num2 == NULL) {
            num2 = createnewNode(digit);
        } else {
            struct Node* current = num2;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createnewNode(digit);
        }
    }

    struct Node* sum = add_LL(num1, num2);
    print_LL(sum);

   
    while (num1 != NULL) {
        struct Node* temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        struct Node* temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        struct Node* temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}"
22825507,PES1UG22CS360,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* link;
};

struct node* reverseLL(struct node* head) {
    struct node* prev = NULL;
    struct node* ptr = head;
    struct node* next = NULL;
    while (ptr != NULL) {
        next = ptr->link;
        ptr->link = prev;
        prev = ptr;
        ptr = next;
    }
    
    return prev;
}

void printLinkedList(struct node* head) {
    struct node* ptr = head;
    while (ptr != NULL) {
        printf(""%d"", ptr->data);
        ptr = ptr->link;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct node* head = NULL;
    struct node* ptr = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        
        struct node* new_node = (struct node*)malloc(sizeof(struct node));
        new_node->data = data;
        new_node->link = NULL;
        
        if (head == NULL) {
            head = new_node;
            ptr = new_node;
        } else {
            ptr->link = new_node;
            ptr = new_node;
        }
    }
    
    struct node* reversed_head = reverseLL(head);
    printLinkedList(reversed_head);
    
    return 0;
}"
22825507,PES1UG22CS360,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode {
    int value;
    struct ListNode* next;
} NODE;

NODE* addReversedDigitLists(NODE* list1, NODE* list2) {
    NODE* result = NULL;
    NODE* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry != 0) {
        int sum = carry;
        
        if (list1 != NULL) {
            sum += list1->value;
            list1 = list1->next;
        }
        
        if (list2 != NULL) {
            sum += list2->value;
            list2 = list2->next;
        }
        
        carry = sum / 10;
        sum %= 10;

        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = sum;
        new_node->next = NULL;

        if (result == NULL) {
            result = new_node;
            current = result;
        } else {
            current->next = new_node;
            current = current->next;
        }
    }

    return result;
}

void printLinkedList(NODE* head) {
    NODE* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

void freeLinkedList(NODE* head) {
    while (head != NULL) {
        NODE* temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    int num_digits_list1, num_digits_list2;
    scanf(""%d %d"", &num_digits_list1, &num_digits_list2);

    NODE* list1 = NULL;
    NODE* current1 = NULL;
    int value;

    for (int i = 0; i < num_digits_list1; i++) {
        scanf(""%d"", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;

        if (list1 == NULL) {
            list1 = new_node;
            current1 = list1;
        } else {
            current1->next = new_node;
            current1 = current1->next;
        }
    }

    NODE* list2 = NULL;
    NODE* current2 = NULL;

    for (int i = 0; i < num_digits_list2; i++) {
        scanf(""%d"", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;

        if (list2 == NULL) {
            list2 = new_node;
            current2 = list2;
        } else {
            current2->next = new_node;
            current2 = current2->next;
        }
    }

    NODE* result = addReversedDigitLists(list1, list2);
    printLinkedList(result);
    freeLinkedList(result);

    return 0;
}"
22825532,PES1UG22CS362,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* link;
};

struct node *reverse_linked_list(struct node* head) {
    struct node* newnode= NULL;
    struct node* ptr = head;
    struct node* temp = NULL;
    while (ptr != NULL) {
        temp = ptr->link;
        ptr->link = newnode ;
        newnode= ptr;
        ptr = temp;
    }
    
    return newnode;
}

void Display_List(struct node* head) {
    struct node* ptr = head;
    while (ptr != NULL) {
        printf(""%d"", ptr->data);
        ptr = ptr->link;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct node* head = NULL;
    struct node* head2 = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        
        struct node* final_node = malloc(sizeof(struct node));
        final_node->data = data;
        final_node->link = NULL;
        
        if (head == NULL) {
            head = final_node;
            head2 = final_node;
        } else {
            head2->link = final_node;
            head2 = final_node;
        }
    }
    
    struct node* answer = reverse_linked_list(head);
    Display_List(answer);
    
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
"
22825532,PES1UG22CS362,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* link;
};

struct ListNode* mergeLists(struct ListNode* firstList, struct ListNode* secondList) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    int carry = 0;
    
    while (firstList || secondList || carry) {
        int valueFromFirst = firstList ? firstList->value : 0;
        int valueFromSecond = secondList ? secondList->value : 0;
        
        int sum = valueFromFirst + valueFromSecond + carry;
        carry = sum / 10;
        
        current->link = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->link;
        current->value = sum % 10;
        current->link = NULL;
        
        if (firstList) {
            firstList = firstList->link;
        }
        if (secondList) {
            secondList = secondList->link;
        }
    }
    
    struct ListNode* resultHead = dummyHead->link;
    free(dummyHead);
    
    return resultHead;
}

struct ListNode* generateList(int* digits, int numDigits) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    
    for (int i = 0; i < numDigits; i++) {
        current->link = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->link;
        current->value = digits[i];
        current->link = NULL;
    }
    
    struct ListNode* resultHead = dummyHead->link;
    free(dummyHead);
    
    return resultHead;
}

void displayList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->link;
    }
}

int main() {
    int numDigitsFirst, numDigitsSecond;
    scanf(""%d %d"", &numDigitsFirst, &numDigitsSecond);
    
    int* digitsFirst = (int*)malloc(numDigitsFirst * sizeof(int));
    int* digitsSecond = (int*)malloc(numDigitsSecond * sizeof(int));
    
    for (int i = 0; i < numDigitsFirst; i++) {
        scanf(""%d"", &digitsFirst[i]);
    }
    
    for (int i = 0; i < numDigitsSecond; i++) {
        scanf(""%d"", &digitsSecond[i]);
    }
    
    struct ListNode* firstList = generateList(digitsFirst, numDigitsFirst);
    struct ListNode* secondList = generateList(digitsSecond, numDigitsSecond);
    
    struct ListNode* final_list = mergeLists(firstList, secondList);
    
    displayList(final_list);
    
    return 0;
}"
22825541,PES1UG22CS312,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* link;
};

struct node* reverseLL(struct node* head) {
    struct node* prev = NULL;
    struct node* ptr = head;
    struct node* next = NULL;
    while (ptr != NULL) {
        next = ptr->link;
        ptr->link = prev;
        prev = ptr;
        ptr = next;
    }
    
    return prev;
}

void printLinkedList(struct node* head) {
    struct node* ptr = head;
    while (ptr != NULL) {
        printf(""%d"", ptr->data);
        ptr = ptr->link;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct node* head = NULL;
    struct node* ptr = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        
        struct node* new_node = (struct node*)malloc(sizeof(struct node));
        new_node->data = data;
        new_node->link = NULL;
        
        if (head == NULL) {
            head = new_node;
            ptr = new_node;
        } else {
            ptr->link = new_node;
            ptr = new_node;
        }
    }
    
    struct node* reversed_head = reverseLL(head);
    printLinkedList(reversed_head);
    
    return 0;
}
"
22825541,PES1UG22CS312,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* mergeLists(struct ListNode* firstList, struct ListNode* secondList) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    int carry = 0;
    
    while (firstList || secondList || carry) {
        int valueFromFirst = firstList ? firstList->value : 0;
        int valueFromSecond = secondList ? secondList->value : 0;
        
        int sum = valueFromFirst + valueFromSecond + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = sum % 10;
        current->next = NULL;
        
        if (firstList) {
            firstList = firstList->next;
        }
        if (secondList) {
            secondList = secondList->next;
        }
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

struct ListNode* generateList(int* digits, int numDigits) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    
    for (int i = 0; i < numDigits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = digits[i];
        current->next = NULL;
    }
    
    struct ListNode* resultHead = dummyHead->next;
    free(dummyHead);
    
    return resultHead;
}

void displayList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    int numDigitsFirst, numDigitsSecond;
    scanf(""%d %d"", &numDigitsFirst, &numDigitsSecond);
    
    int* digitsFirst = (int*)malloc(numDigitsFirst * sizeof(int));
    int* digitsSecond = (int*)malloc(numDigitsSecond * sizeof(int));
    
    for (int i = 0; i < numDigitsFirst; i++) {
        scanf(""%d"", &digitsFirst[i]);
    }
    
    for (int i = 0; i < numDigitsSecond; i++) {
        scanf(""%d"", &digitsSecond[i]);
    }
    
    struct ListNode* firstList = generateList(digitsFirst, numDigitsFirst);
    struct ListNode* secondList = generateList(digitsSecond, numDigitsSecond);
    
    struct ListNode* mergedList = mergeLists(firstList, secondList);
    
    displayList(mergedList);
    
    return 0;
}"
22825559,PES1UG22CS338,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22825559,PES1UG22CS338,ADD TWO NUMBERS 104,15,"#include <stdio.h>

#include <stdlib.h>

struct Node {

    int value;

    struct Node* next;

};

struct Node* createNode(int value) {

    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

    newNode->value = value;

    newNode->next = NULL;

    return newNode;

}

struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {

    struct Node* result = NULL;

    struct Node* current = NULL;

    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {

        int sum = carry;

        if (num1 != NULL) {

            sum += num1->value;

            num1 = num1->next;

        }

        if (num2 != NULL) {

            sum += num2->value;

            num2 = num2->next;

        }

        carry = sum / 10;

        sum %= 10;

        struct Node* newNode = createNode(sum);

        if (result == NULL) {

            result = newNode;

            current = result;

        } else {

            current->next = newNode;

            current = newNode;

        }

    }

    return result;

}

void printLinkedList(struct Node* head) {

    struct Node* current = head;

    while (current != NULL) {

        printf(""%d"", current->value);

        if (current->next != NULL) {

            printf("" "");

        }

        current = current->next;

    }

}

int main() {

    int num_digits1, num_digits2;

    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;

    struct Node* num2 = NULL;

    for (int i = 0; i < num_digits1; ++i) {

        int digit;

        scanf(""%d"", &digit);

        if (num1 == NULL) {

            num1 = createNode(digit);

        } else {

            struct Node* current = num1;

            while (current->next != NULL) {

                current = current->next;

            }

            current->next = createNode(digit);

        }

    }

    for (int i = 0; i < num_digits2; ++i) {

        int digit;

        scanf(""%d"", &digit);

        if (num2 == NULL) {

            num2 = createNode(digit);

        } else {

            struct Node* current = num2;

            while (current->next != NULL) {

                current = current->next;

            }

            current->next = createNode(digit);

        }

    }

    struct Node* sum = addLinkedLists(num1, num2);

    printLinkedList(sum);

    // Free allocated memory

    while (num1 != NULL) {

        struct Node* temp = num1;

        num1 = num1->next;

        free(temp);

    }

    while (num2 != NULL) {

        struct Node* temp = num2;

        num2 = num2->next;

        free(temp);

    }

    while (sum != NULL) {

        struct Node* temp = sum;

        sum = sum->next;

        free(temp);

    }

    return 0;

}"
22825561,PES1UG22CS323,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* link;
};

struct node* reverseLL(struct node* head) {
    struct node* prev = NULL;
    struct node* ptr = head;
    struct node* next = NULL;
    while (ptr != NULL) {
        next = ptr->link;
        ptr->link = prev;
        prev = ptr;
        ptr = next;
    }
   
    return prev;
}

void printLinkedList(struct node* head) {
    struct node* ptr = head;
    while (ptr != NULL) {
        printf(""%d"", ptr->data);
        ptr = ptr->link;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);
   
    struct node* head = NULL;
    struct node* ptr = NULL;
   
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
       
        struct node* new_node = (struct node*)malloc(sizeof(struct node));
        new_node->data = data;
        new_node->link = NULL;
       
        if (head == NULL) {
            head = new_node;
            ptr = new_node;
        } else {
            ptr->link = new_node;
            ptr = new_node;
        }
    }
   
    struct node* reversed_head = reverseLL(head);
    printLinkedList(reversed_head);
   
    return 0;
}
"
22825561,PES1UG22CS323,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode {
    int value;
    struct ListNode* next;
} NODE;

NODE* addReversedDigitLists(NODE* list1, NODE* list2) {
    NODE* result = NULL;
    NODE* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry != 0) {
        int sum = carry;
       
        if (list1 != NULL) {
            sum += list1->value;
            list1 = list1->next;
        }
       
        if (list2 != NULL) {
            sum += list2->value;
            list2 = list2->next;
        }
       
        carry = sum / 10;
        sum %= 10;

        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = sum;
        new_node->next = NULL;

        if (result == NULL) {
            result = new_node;
            current = result;
        } else {
            current->next = new_node;
            current = current->next;
        }
    }

    return result;
}

void printLinkedList(NODE* head) {
    NODE* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

void freeLinkedList(NODE* head) {
    while (head != NULL) {
        NODE* temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    int num_digits_list1, num_digits_list2;
    scanf(""%d %d"", &num_digits_list1, &num_digits_list2);

    NODE* list1 = NULL;
    NODE* current1 = NULL;
    int value;

    for (int i = 0; i < num_digits_list1; i++) {
        scanf(""%d"", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;

        if (list1 == NULL) {
            list1 = new_node;
            current1 = list1;
        } else {
            current1->next = new_node;
            current1 = current1->next;
        }
    }

    NODE* list2 = NULL;
    NODE* current2 = NULL;

    for (int i = 0; i < num_digits_list2; i++) {
        scanf(""%d"", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;

        if (list2 == NULL) {
            list2 = new_node;
            current2 = list2;
        } else {
            current2->next = new_node;
            current2 = current2->next;
        }
    }

    NODE* result = addReversedDigitLists(list1, list2);
    printLinkedList(result);
    freeLinkedList(result);

    return 0;
}

"
22825698,PES1UG22CS367,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* next;
};

struct node* createNode(int data) {
    struct node* newNode = (struct node*)malloc(sizeof(struct node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct node* reverseLinkedList(struct node* head) {
    struct node* prev = NULL;
    struct node* current = head;
    struct node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct node* head = NULL;
    struct node* tail = NULL;

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        if(value<=1000 && value >= -1000 )
        {
            if (head == NULL) {
            head = createNode(value);
            tail = head;
        }
            else
            {
            tail->next = createNode(value);
            tail = tail->next;
        }
        }

        
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    struct node* current = head;
    while (current != NULL) {
        struct node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22825698,PES1UG22CS367,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* link;
};

struct ListNode* mergeLists(struct ListNode* firstList, struct ListNode* secondList) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    int carry = 0;
    
    while (firstList || secondList || carry) {
        int valueFromFirst = firstList ? firstList->value : 0;
        int valueFromSecond = secondList ? secondList->value : 0;
        
        int sum = valueFromFirst + valueFromSecond + carry;
        carry = sum / 10;
        
        current->link = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->link;
        current->value = sum % 10;
        current->link = NULL;
        
        if (firstList) {
            firstList = firstList->link;
        }
        if (secondList) {
            secondList = secondList->link;
        }
    }
    
    struct ListNode* resultHead = dummyHead->link;
    free(dummyHead);
    
    return resultHead;
}

struct ListNode* generateList(int* digits, int numDigits) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    
    for (int i = 0; i < numDigits; i++) {
        current->link = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->link;
        current->value = digits[i];
        current->link = NULL;
    }
    
    struct ListNode* resultHead = dummyHead->link;
    free(dummyHead);
    
    return resultHead;
}

void displayList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->link;
    }
}

int main() {
    int numDigitsFirst, numDigitsSecond;
    scanf(""%d %d"", &numDigitsFirst, &numDigitsSecond);
    
    int* digitsFirst = (int*)malloc(numDigitsFirst * sizeof(int));
    int* digitsSecond = (int*)malloc(numDigitsSecond * sizeof(int));
    
    for (int i = 0; i < numDigitsFirst; i++) {
        scanf(""%d"", &digitsFirst[i]);
    }
    
    for (int i = 0; i < numDigitsSecond; i++) {
        scanf(""%d"", &digitsSecond[i]);
    }
    
    struct ListNode* firstList = generateList(digitsFirst, numDigitsFirst);
    struct ListNode* secondList = generateList(digitsSecond, numDigitsSecond);
    
    struct ListNode* mergedList = mergeLists(firstList, secondList);
    
    displayList(mergedList);
    
    return 0;
}"