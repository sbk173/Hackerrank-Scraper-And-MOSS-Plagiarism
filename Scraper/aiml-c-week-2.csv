studentId,studentUserName,challenge,score,code
11929000,PES1UG22AM143_SS,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}
"
11929000,PES1UG22AM143_SS,ADD TWO NUMBERS 104,7.5,"#include<stdio.h>
#include<stdlib.h>
#include<math.h>

typedef struct linkedList{
    int val;
    struct linkedList *next;
}LL;

LL* insert(LL *head, int val){
    LL* check = head;
    if(head == NULL){
        LL* new = malloc(sizeof(LL));
        new->val = val;
        new->next = NULL;
        head = new;
        return head;
    }
    else{
        LL* new = malloc(sizeof(LL));
        new->val = val;
        while(head->next != NULL){
            head = head->next;
        }
        new->next = NULL;
        head->next = new;
        return check;
    }
}

LL* addTwoNumbers(LL* l1, LL* l2){

    if(l1 == NULL){
        return l2;
    }
    else if(l2 == NULL){
        return l1;
    }
    else if(l1==NULL && l2==NULL){
        return NULL;
    }

    int sum1 = 0;
    int sum2 = 0;
    int i =0;
    while(l1 != NULL){
        sum1 += (l1->val)*pow(10,i);
        i++;
        l1 = l1->next;
    }
    i = 0;
    while(l2 != NULL){
        sum2 += (l2->val)*pow(10,i);
        i++;
        l2 = l2->next;
    }
    int sum;
    sum = sum1 + sum2;
    LL* ans = NULL;
    while(sum != 0){
        ans = insert(ans,sum%10);
        sum /= 10;
    }

    return ans;
    
}

void display(LL*head){
    if(head == NULL){
        printf(""0"");
    }else{
        while(head!= NULL){
            printf(""%d "",head->val);
            head = head->next;
        }

    }

}

int main(){
    int n,m;
    scanf("" %d %d"",&n,&m);

    LL* a = NULL;
    LL* b = NULL;
    for(int i = 0; i < n+m;i++){
        int x;
        scanf("" %d"",&x);
        if(i<n){
            a = insert(a,x);
        }
        else{
        b = insert(b,x);
        }
    }
    
    
    LL* c = NULL;
    c = addTwoNumbers(a,b);

    display(c);


}"
19596467,pes1ug22am168,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

int append(struct Node **head, int data) {
    struct Node *new_node = malloc(sizeof(struct Node));
    new_node->data = data;

    if(*head == NULL) {
        *head = new_node;
        return 0;
    }

    struct Node *traverse = *head;
    while(traverse->next != NULL) {
        traverse = traverse->next;
    }
    traverse->next = new_node;

    return 0;
}

int split(struct Node **head, int length, struct Node **list1, struct Node **list2) {
    if (*head == NULL || length <= 0) {
        return 1;
    }
    
    struct Node *slow = *head;
    struct Node *fast = *head;
    struct Node *prev = NULL;
    
    while (fast != NULL && fast->next != NULL) {
        prev = slow;
        slow = slow->next;
        fast = fast->next->next;
    }

    // Odd
    if(fast == NULL) {
        *list1 = *head;
        *list2 = slow;
        prev->next = NULL;
    } 
    // Even
    else if (fast->next == NULL) {
        *list1 = *head;
        *list2 = slow->next;
        slow->next = NULL;
    }
    return 0;
}

int print(struct Node **head) {
    if(*head == NULL) return 1;

    struct Node *traverse = *head;
    while(traverse != NULL) {
        printf(""%d "", traverse->data);
        traverse = traverse->next;
    }
    printf(""\n"");

    return 0;
}

int main() {
    struct Node *head = NULL;
    int n, x;
    scanf(""%d"", &n);
    int half = n;
    while(n--) {
        scanf(""%d"", &x);
        append(&head, x);
    }
    struct Node *list1, *list2 = NULL;
    split(&head, half, &list1, &list2);
    print(&list1);
    print(&list2);
    return 0;
}
"
19596467,pes1ug22am168,ADD TWO NUMBERS 104,15,"
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}"
21554166,pes1ug22am170,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



    
struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

 
/* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
"
21554166,pes1ug22am170,ADD TWO NUMBERS 104,15,"#include <stdio.h>

#include <stdlib.h>

struct Node {

    int data;

    struct Node* next;

};

void push(struct Node** top, int data) {

    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

    newNode->data = data;

    newNode->next = *top;

    *top = newNode;

}

int pop(struct Node** top) {

    if (*top == NULL) {

        return 0;

    }

    struct Node* temp = *top;

    *top = (*top)->next;

    int data = temp->data;

    free(temp);

    return data;

}

struct Node* addLists(struct Node* list1, struct Node* list2) {

    struct Node* result = NULL;

    struct Node* temp = NULL;

    int carry = 0;

    while (list1 || list2 || carry) {

        int sum = carry + pop(&list1) + pop(&list2);

        carry = sum / 10;

        int value = sum % 10;

        push(&result, value);

    }

    return result;

}

void printList(struct Node* head) {

    struct Node* current = head;

    while (current != NULL) {

        printf(""%d"", current->data);

        if (current->next) {

            printf("" "");

        }

        current = current->next;

    }

    printf(""\n"");

}

int main() {

    int n1, n2;

    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;

    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {

        int value;

        scanf(""%d"", &value);

        push(&list1, value);

    }

    for (int i = 0; i < n2; ++i) {

        int value;

        scanf(""%d"", &value);

        push(&list2, value);

    }

    struct Node* sumList = addLists(list1, list2);

    printList(sumList);

    return 0;

}

"
22713613,PES2UG22CS376,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

Node* insertBack(Node* head, int value) {
    Node* newNode = createNode(value);
    if (!head) {
        return newNode;
    }

    Node* current = head;
    while (current->next != NULL) {
        current = current->next;
    }

    current->next = newNode;
    return head;
}

Node* findMidpoint(Node* head) {
    if (head == NULL) {
        return NULL;
    }

    Node* slow = head;
    Node* fast = head;
    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

void printLinkedList(Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertBack(head, value);
    }

    Node* midpoint = findMidpoint(head);

    Node* secondHalf = midpoint->next;
    midpoint->next = NULL;

    printLinkedList(head);
    printLinkedList(secondHalf);

    return 0;
}
"
22713613,PES2UG22CS376,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int x) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = x;
    newNode->next = NULL;
    return newNode;
}

Node* insertBack(Node* head, int x) {
    Node* newNode = createNode(x);

    if (!head)
        return newNode;

    Node* cur = head;
    while (cur->next != NULL) {
        cur = cur->next;
    }

    cur->next = newNode;
    return head;
}

void printList(Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

Node* addReversedLists(Node* l1, Node* l2) {
    Node* dummy = createNode(0);
    Node* current = dummy;
    int carry = 0;

    while (l1 != NULL || l2 != NULL) {
        int x = (l1 != NULL) ? l1->data : 0;
        int y = (l2 != NULL) ? l2->data : 0;

        int sum = carry + x + y;
        carry = sum / 10;

        current->next = createNode(sum % 10);
        current = current->next;

        if (l1 != NULL) l1 = l1->next;
        if (l2 != NULL) l2 = l2->next;
    }

    if (carry > 0) {
        current->next = createNode(carry);
    }

    return dummy->next;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    if (n1 == 0 && n2 == 0) {
        printf(""0\n"");
        return 0;
    }

    Node* l1 = NULL;
    Node* l2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        if (digit < 0 || digit > 9) {
            printf(""Invalid input: Number out of range (0-9)\n"");
            return 1;
        }
        l1 = insertBack(l1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        if (digit < 0 || digit > 9) {
            printf(""Invalid input: Number out of range (0-9)\n"");
            return 1;
        }
        l2 = insertBack(l2, digit);
    }

    Node* sumList = addReversedLists(l1, l2);
    printList(sumList);

    return 0;
}
"
22722242,PES1UG22AM137,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}"
22722242,PES1UG22AM137,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}
"
22723677,PES1UG22AM160,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node
{
    int data;
    struct Node* next;
};

void insert(struct Node** head, int data)
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    if (*head == NULL)
    {
        *head = newNode;
    }
    else
    {
        struct Node* current = *head;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* findmidpoint(struct Node* head)
{
    if (head == NULL || head->next == NULL)
    {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;
    while (fast != NULL && fast->next != NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}

struct Node* splitlinked(struct Node** head, struct Node* midpoint)
{
    if (midpoint == NULL)
    {
        return NULL;
    }
    struct Node* secondhalf = midpoint->next;
    midpoint->next = NULL;
    return secondhalf;
}

void printlist(struct Node* head)
{
    struct Node* current = head;
    while (current != NULL)
    {
        printf(""%d "", current->data);  
        current = current->next;
    }
    printf(""\n"");
}

int main()
{
    int n;
    scanf(""%d"", &n);
    struct Node* head = NULL;
    for (int i = 0; i < n; i++)
    {
        int data;
        scanf(""%d"", &data);
        insert(&head, data);
    }
    struct Node* midpoint = findmidpoint(head);
    struct Node* secondhalf = splitlinked(&head, midpoint);
    printlist(head);
    printlist(secondhalf);
    return 0;
}
"
22723677,PES1UG22AM160,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}
"
22724521,PES1UG22AM166,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node 
{
    int data;
    struct Node* next;
};

void createnode(struct Node** head, int data) 
{
    struct Node* new = (struct Node*)malloc(sizeof(struct Node));
    new->data = data;
    new->next = NULL;

    if (*head == NULL) 
    {
        *head = new;
    } 
    else 
    {
        struct Node* a = *head;
        while (a->next != NULL) {
            a = a->next;
        }
        a->next = new;
    }
}

struct Node* findmidpoint(struct Node* head) 
{
    if(head==NULL||head->next==NULL)
    {
        return head;
    }
    struct Node* b = head;
    struct Node* c = head->next;

    while (c != NULL && c->next != NULL) {
        b = b->next;
        c = c->next->next;
    }

    return b;
}

void display(struct Node* head) {
    struct Node* a = head;
    while (a != NULL) {
        printf(""%d "", a->data);
        a = a->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        createnode(&head, data);
    }

    struct Node* midpoint = findmidpoint(head);
    struct Node* head1 = head;
    struct Node* head2 = midpoint->next;
    midpoint->next = NULL;

    display(head1);
    display(head2);

    return 0;
}"
22724521,PES1UG22AM166,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newnode = (struct Node*)malloc(sizeof(struct Node));
    newnode->data = data;
    newnode->next = *top;
    *top = newnode;
}

int change(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addlists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + change(&list1) + change(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void display(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sum = addlists(list1, list2);
    display(sum);

    return 0;
}"
22727896,PES1UG22AM172,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node
{
    int data;
    struct Node *next;
};

struct Node *createNode(int data)
{
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node **head, int data)
{
    struct Node *newNode = createNode(data);
    if (*head == NULL)
    {
        *head = newNode;
        return;
    }
    struct Node *current = *head;
    while (current->next != NULL)
    {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node *head)
{
    struct Node *current = head;
    while (current != NULL)
    {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node *source, struct Node **front, struct Node **back)
{
    struct Node *slow = source;
    struct Node *fast = source->next;

    while (fast != NULL)
    {
        fast = fast->next;
        if (fast != NULL)
        {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main()
{
    int n;
    scanf(""%d"", &n);

    struct Node *head = NULL;
    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node *frontList = NULL;
    struct Node *backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}"
22727896,PES1UG22AM172,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node
{
    int data;
    struct Node *next;
} node;

node* createNode(int data)
{
    node *newNode = (node *)malloc(sizeof(node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(node **head, int data)
{
    node *newNode = createNode(data);
    if (*head == NULL)
    {
        *head = newNode;
        return;
    }
    node *current = *head;
    while (current->next != NULL)
    {
        current = current->next;
    }
    current->next = newNode;
}

void printList(node *head)
{
    node *current = head;
    while (current != NULL)
    {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void add(node* a, node* b, int m, int n, node** sum)
{
    int max = (m > n) ? m : n;
    node* x = a;
    node* y = b;
    int c = 0; // Initialize carry

    for (int i = 0; i < max; i++) // Corrected the loop condition
    {
        int p = (x != NULL) ? x->data : 0;
        int q = (y != NULL) ? y->data : 0;

        int s = (p + q + c) % 10; // Calculate sum including carry
        c = (p + q + c) / 10;     // Calculate new carry

        insertEnd(sum, s); // Insert sum into result list

        if (x != NULL)
            x = x->next;
        if (y != NULL)
            y = y->next;
    }

    if (c != 0) // If there's a carry after all digits are added
        insertEnd(sum, c);
}


int main()
{
    int m, n;
    scanf(""%d %d"", &m, &n);

    node *list1 = NULL;
    node *list2 = NULL;

    for (int i = 0; i < m; i++)
    {
        int value;
        scanf(""%d"", &value);
        insertEnd(&list1, value);
    }

    for (int i = 0; i < n; i++)
    {
        int value;
        scanf(""%d"", &value);
        insertEnd(&list2, value);
    }

    // printList(list1);
    // printList(list2);

    node *sum = NULL;
    add(list1, list2, m, n, &sum);
    printList(sum);

    return 0;
}
"
22728336,PES1UG22AM196,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}"
22728336,PES1UG22AM196,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

typedef struct ListNode ListNode;

ListNode* add_linked_lists(ListNode* l1, ListNode* l2) {
    ListNode* dummy = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current = dummy;
    int carry = 0;

    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->val : 0;
        int val2 = l2 ? l2->val : 0;

        int total = val1 + val2 + carry;
        carry = total / 10;

        current->next = (ListNode*)malloc(sizeof(ListNode));
        current = current->next;
        current->val = total % 10;
        current->next = NULL;

        if (l1) {
            l1 = l1->next;
        }
        if (l2) {
            l2 = l2->next;
        }
    }

    return dummy->next;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    ListNode* l1 = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current1 = l1;
    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        current1->next = (ListNode*)malloc(sizeof(ListNode));
        current1 = current1->next;
        current1->val = digit;
        current1->next = NULL;
    }

    ListNode* l2 = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current2 = l2;
    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        current2->next = (ListNode*)malloc(sizeof(ListNode));
        current2 = current2->next;
        current2->val = digit;
        current2->next = NULL;
    }

    ListNode* result = add_linked_lists(l1->next, l2->next);

    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    // Free allocated memory
    while (l1) {
        ListNode* temp = l1;
        l1 = l1->next;
        free(temp);
    }
    while (l2) {
        ListNode* temp = l2;
        l2 = l2->next;
        free(temp);
    }
    while (result) {
        ListNode* temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
22728346,PES1UG22AM190,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}
"
22728346,PES1UG22AM190,ADD TWO NUMBERS 104,0,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        { 
              head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}
"
22728372,PES1UG22AM146,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}

"
22728372,PES1UG22AM146,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

typedef struct ListNode ListNode;

ListNode* add_linked_lists(ListNode* l1, ListNode* l2) {
    ListNode* dummy = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current = dummy;
    int carry = 0;

    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->val : 0;
        int val2 = l2 ? l2->val : 0;

        int total = val1 + val2 + carry;
        carry = total / 10;

        current->next = (ListNode*)malloc(sizeof(ListNode));
        current = current->next;
        current->val = total % 10;
        current->next = NULL;

        if (l1) {
            l1 = l1->next;
        }
        if (l2) {
            l2 = l2->next;
        }
    }

    return dummy->next;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    ListNode* l1 = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current1 = l1;
    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        current1->next = (ListNode*)malloc(sizeof(ListNode));
        current1 = current1->next;
        current1->val = digit;
        current1->next = NULL;
    }

    ListNode* l2 = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current2 = l2;
    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        current2->next = (ListNode*)malloc(sizeof(ListNode));
        current2 = current2->next;
        current2->val = digit;
        current2->next = NULL;
    }

    ListNode* result = add_linked_lists(l1->next, l2->next);

    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    // Free allocated memory
    while (l1) {
        ListNode* temp = l1;
        l1 = l1->next;
        free(temp);
    }
    while (l2) {
        ListNode* temp = l2;
        l2 = l2->next;
        free(temp);
    }
    while (result) {
        ListNode* temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}

"
22728376,PES1UG22AM149,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}"
22728376,PES1UG22AM149,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}"
22728389,PES1UG22AM182,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to find the midpoint of the linked list using fast pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head->next;
    
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

// Function to split the linked list into two parts at the given node
void splitLinkedList(struct Node* midpoint, struct Node** firstHalf, struct Node** secondHalf) {
    if (midpoint == NULL) {
        return;
    }
    
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}


// Function to print the elements of a linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }
    
    struct Node* midpoint = findMidpoint(head);
    struct Node* firstHalf = head;
    struct Node* secondHalf = NULL;
    
    splitLinkedList(midpoint, &firstHalf, &secondHalf);
    
    printList(firstHalf);
    printList(secondHalf);
    
    return 0;
}"
22728389,PES1UG22AM182,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>


typedef struct node 
{
    int DATA;
    struct node* next;
}NODE;


void insert(NODE** HEAD, int DATA) 
{
    NODE* newNode = (NODE*)malloc(sizeof(NODE));
    newNode->DATA = DATA;
    newNode->next = NULL;

    if (*HEAD == NULL) 
    {
        *HEAD = newNode;
    } else 
    {
        NODE* current = *HEAD;
        while (current->next != NULL) 
        {
            current = current->next;
        }
        current->next = newNode;
    }
}

NODE* addnode(NODE* num1, NODE* num2) 
{
    NODE* result = NULL;
    NODE* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0)
    {
        int sum = carry;
        if (num1 != NULL) 
        {
            sum += num1->DATA;
            num1 = num1->next;
        }
        if (num2 != NULL) 
        {
            sum += num2->DATA;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum %= 10;

        NODE* newNode = (NODE*)malloc(sizeof(NODE));
        newNode->DATA = sum;
        newNode->next = NULL;

        if (result == NULL) 
        {
            result = newNode;
            current = newNode;
        } 
        else 
        {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

void printList(NODE* HEAD) 
{
    NODE* current = HEAD;
    while (current != NULL) 
    {
        printf(""%d "", current->DATA);
        current = current->next;
    }
    printf(""\n"");
}

int main() 
{
    int numDigits1, numDigits2;
    scanf(""%d %d"", &numDigits1, &numDigits2);

    NODE* num1 = NULL;
    NODE* num2 = NULL;

    for (int i = 0; i < numDigits1; i++) 
    {
        int digit;
        scanf(""%d"", &digit);
        insert(&num1, digit);
    }

    for (int i = 0; i < numDigits2; i++) 
    {
        int digit;
        scanf(""%d"", &digit);
        insert(&num2, digit);
    }

    NODE* sum = addnode(num1, num2);
    printList(sum);

    return 0;
}"
22728399,PES1UG22AM195,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node
{
    int data;
    struct Node* next;
};

void insertnode(struct Node** traverse, int data)
{
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->next = NULL;
    
    if(*traverse == NULL)
        *traverse = node;
    else
    {
        struct Node* current = *traverse;
        while(current->next != NULL)
            current = current->next;
        current->next = node;
    }
}

struct Node* midpoint(struct Node* traverse)
{
    if(traverse == NULL || traverse->next == NULL)
        return traverse;
    struct Node* slow = traverse;
    struct Node* fast = traverse;
    while(fast->next != NULL && fast->next->next != NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}

void splitLL(struct Node* source, struct Node** first, struct Node** second)
{
    struct Node* mid = midpoint(source);
    *first = source;
    *second = mid->next;
    mid->next = NULL;
}

void printLL(struct Node* traverse)
{
    struct Node* current = traverse;
    while(current != NULL)
    {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    struct Node* traverse = NULL;
    for(int i=0;i<n;i++)
    {
        int data;
        scanf(""%d"", &data);
        insertnode(&traverse, data);
    }
    struct Node* first = NULL;
    struct Node* second = NULL;
    splitLL(traverse, &first, &second);
    printLL(first);
    printLL(second);
    
    return 0;
}
"
22728399,PES1UG22AM195,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}"
22728401,PES1UG22AM164,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

void insertNode(struct ListNode** head, int value) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->value = value;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct ListNode* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void splitLinkedList(struct ListNode* head, struct ListNode** firstHalf, struct ListNode** secondHalf) {
    if (head == NULL) {
        *firstHalf = NULL;
        *secondHalf = NULL;
        return;
    }

    struct ListNode* slow = head;
    struct ListNode* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    *firstHalf = head;
    *secondHalf = slow->next;
    slow->next = NULL;
}

void printList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d "", current->value);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct ListNode* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertNode(&head, value);
    }

    struct ListNode* firstHalf = NULL;
    struct ListNode* secondHalf = NULL;

    splitLinkedList(head, &firstHalf, &secondHalf);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}
"
22728401,PES1UG22AM164,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}"
22728402,PES1UG22AM142,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}"
22728402,PES1UG22AM142,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head->next;
    
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}


void splitLinkedList(struct Node* midpoint, struct Node** firstHalf, struct Node** secondHalf) {
    if (midpoint == NULL) {
        return;
    }
    
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}



void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }
    
    struct Node* midpoint = findMidpoint(head);
    struct Node* firstHalf = head;
    struct Node* secondHalf = NULL;
    
    splitLinkedList(midpoint, &firstHalf, &secondHalf);
    
    printList(firstHalf);
    printList(secondHalf);
    
    return 0;
}"
22728406,PES1UG22AM179,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
    
}

"
22728406,PES1UG22AM179,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}"
22728411,PES1UG22AM154,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>


typedef struct Node
{
    int data;
    struct Node* next;
}Node;


void insertEnd(Node** head, int data) {
    Node* new = (Node*)malloc(sizeof(struct Node));
    new->data = data;
    new->next = NULL;
    
    if (*head == NULL) {
        *head = new;
    } else {
        Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = new;
    }
}


Node* Midpoint(Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    Node* slow = head;
    Node* fast = head->next;
    
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}


void split(Node* midpoint, Node** first, Node** second) {
    if (midpoint == NULL) {
        return;
    }
    
    *second = midpoint->next;
    midpoint->next = NULL;
}



void display(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }
    
    Node* midpoint = Midpoint(head);
    Node* first = head;
    Node* second = NULL;
    
    split(midpoint, &first, &second);
    
    display(first);
    display(second);
    
    return 0;
}"
22728411,PES1UG22AM154,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}"
22728418,PES1UG22AM135,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}
"
22728418,PES1UG22AM135,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }

    current->next = newNode;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry != 0) {
        int sum = carry;
        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }
        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum %= 10;

        insert(&result, sum);

        if (current == NULL) {
            current = result;
        } else {
            current = current->next;
        }
    }

    return result;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&list1, value);
    }

    for (int i = 0; i < n2; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printLinkedList(sumList);

    return 0;
}
"
22728425,pes1202203907,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

typedef struct ListNode ListNode;

ListNode* add_linked_lists(ListNode* l1, ListNode* l2) {
    ListNode* dummy = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current = dummy;
    int carry = 0;

    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->val : 0;
        int val2 = l2 ? l2->val : 0;

        int total = val1 + val2 + carry;
        carry = total / 10;

        current->next = (ListNode*)malloc(sizeof(ListNode));
        current = current->next;
        current->val = total % 10;
        current->next = NULL;

        if (l1) {
            l1 = l1->next;
        }
        if (l2) {
            l2 = l2->next;
        }
    }

    return dummy->next;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    ListNode* l1 = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current1 = l1;
    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        current1->next = (ListNode*)malloc(sizeof(ListNode));
        current1 = current1->next;
        current1->val = digit;
        current1->next = NULL;
    }

    ListNode* l2 = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current2 = l2;
    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        current2->next = (ListNode*)malloc(sizeof(ListNode));
        current2 = current2->next;
        current2->val = digit;
        current2->next = NULL;
    }

    ListNode* result = add_linked_lists(l1->next, l2->next);

    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    // Free allocated memory
    while (l1) {
        ListNode* temp = l1;
        l1 = l1->next;
        free(temp);
    }
    while (l2) {
        ListNode* temp = l2;
        l2 = l2->next;
        free(temp);
    }
    while (result) {
        ListNode* temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}

"
22728425,pes1202203907,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}
"
22728436,PES1UG22AM158,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode -> data = data;
    newNode -> next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp -> next != NULL) {
            temp = temp -> next;
        }
        temp -> next = newNode;
    }
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head -> next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head -> next;
    
    while (fast != NULL && fast -> next != NULL) {
        slow = slow -> next;
        fast = fast -> next -> next;
    }
    
    return slow;
}

void split(struct Node* midpoint, struct Node** f_head, struct Node** s_head) {
    if (midpoint == NULL) {
        return;
    }
    
    *s_head = midpoint -> next;
    midpoint -> next = NULL;
}


void display(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current -> data);
        current = current -> next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }
    
    struct Node* midpoint = findMidpoint(head);
    struct Node* f_head = head;
    struct Node* s_head = NULL;
    
    split(midpoint, &f_head, &s_head);
    
    display(f_head);
    display(s_head);
    
    return 0;
}"
22728436,PES1UG22AM158,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};
void insertNode(struct ListNode** head, int val) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->val = val;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct ListNode* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}
    struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* result = NULL;
    struct ListNode* current = NULL;
    int carry = 0;
    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }
        
        carry = sum / 10;
        sum %= 10;
        
        insertNode(&result, sum);
        
        if (current == NULL) {
            current = result;
        }
    }
    
    return result;
}
void printList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d "", current->val);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);
    
    struct ListNode* num1 = NULL;
    struct ListNode* num2 = NULL;
    
    for (int i = 0; i < n1; i++) {
        int val;
        scanf(""%d"", &val);
        insertNode(&num1, val);
    }
    
    for (int i = 0; i < n2; i++) {
        int val;
        scanf(""%d"", &val);
        insertNode(&num2, val);
    }
    
    struct ListNode* result = addTwoNumbers(num1, num2);
    printList(result);
    
    return 0;
}"
22728447,PES1UG22AM167,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


    struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertNode(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to find the midpoint of the linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head;
    
    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

// Function to split the linked list into two parts at the midpoint
void splitLinkedList(struct Node* source, struct Node** firstHalf, struct Node** secondHalf) {
    struct Node* mid = findMidpoint(source);
    *firstHalf = source;
    *secondHalf = mid->next;
    mid->next = NULL;
}

// Function to print the elements of a linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertNode(&head, data);
    }
    
    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;
    
    splitLinkedList(head, &firstHalf, &secondHalf);
    
    printList(firstHalf);
    printList(secondHalf);
    
    return 0;
}    


"
22728447,PES1UG22AM167,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}"
22728452,PES1UG22AM184,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}

"
22728452,PES1UG22AM184,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

// Define the structure for a linked list node
struct ListNode {
    int val;
    struct ListNode* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct ListNode** head, int value) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->val = value;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct ListNode* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to add two reversed-digit linked lists
struct ListNode* addLists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode dummy = {0};
    struct ListNode* current = &dummy;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        insertEnd(&(current->next), sum);
        current = current->next;
    }

    return dummy.next;
}

// Function to print the elements of a linked list
void printList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d "", current->val);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct ListNode* num1 = NULL;
    struct ListNode* num2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        insertEnd(&num1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        insertEnd(&num2, digit);
    }

    struct ListNode* result = addLists(num1, num2);
    printList(result);

    return 0;
}"
22728457,PES1UG22AM193,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}"
22728457,PES1UG22AM193,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};
void insertNode(struct ListNode** head, int val) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->val = val;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct ListNode* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}
    struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* result = NULL;
    struct ListNode* current = NULL;
    int carry = 0;
    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }
        
        carry = sum / 10;
        sum %= 10;
        
        insertNode(&result, sum);
        
        if (current == NULL) {
            current = result;
        }
    }
    
    return result;
}
void printList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d "", current->val);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);
    
    struct ListNode* num1 = NULL;
    struct ListNode* num2 = NULL;
    
    for (int i = 0; i < n1; i++) {
        int val;
        scanf(""%d"", &val);
        insertNode(&num1, val);
    }
    
    for (int i = 0; i < n2; i++) {
        int val;
        scanf(""%d"", &val);
        insertNode(&num2, val);
    }
    
    struct ListNode* result = addTwoNumbers(num1, num2);
    printList(result);
    
    return 0;
}"
22728473,PES1UG22AM144,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
#include<string.h>
#include<math.h>

struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head->next;
    
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

void splitLinkedList(struct Node* midpoint, struct Node** firstHalf, struct Node** secondHalf) {
    if (midpoint == NULL) {
        return;
    }
    
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }
    
    struct Node* midpoint = findMidpoint(head);
    struct Node* firstHalf = head;
    struct Node* secondHalf = NULL;
    
    splitLinkedList(midpoint, &firstHalf, &secondHalf);
    
    printList(firstHalf);
    printList(secondHalf);
    
    return 0;
}"
22728473,PES1UG22AM144,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* add(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void display(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sum = add(list1, list2);
    display(sum);

    return 0;
}"
22728483,PES1UG22AM156,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct NODE
{
    int data;
    struct NODE* next;
};

void insert(struct NODE** head , int data)
{
    struct NODE* new_node = (struct NODE*)malloc(sizeof(struct NODE));
    new_node->data = data;
    new_node->next = NULL;
    
    if(*head == NULL)
    {
        *head = new_node;
    }
    else
    {
        struct NODE* current = *head;
        while(current->next !=NULL)
        {
            current = current->next;
        }
        current->next=new_node;
    }
}

struct NODE* midpoint(struct NODE* head)
{
    if(head==NULL || head->next == NULL)
    {
        return head;
    }
    struct NODE* slow = head;
    struct NODE* fast = head;
    
    while(fast->next !=NULL && fast->next->next !=NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}

void split_linkedlist(struct NODE* original , struct NODE** firsthalf , struct NODE** secondhalf)
{
    struct NODE* mid = midpoint(original);
    *firsthalf = original;
    *secondhalf = mid->next;
    mid->next = NULL;
}

void print(struct NODE* head)
{
    struct NODE* current = head;
    while(current !=NULL)
    {
        printf(""%d "",current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main()
{
    int n;
    scanf(""%d"" ,&n);
    struct NODE* head = NULL;
    
    for(int i = 0;i<n;i++)
    {
        int data;
        scanf(""%d"" ,&data);
        insert(&head,data);
    }
    
    struct NODE* firsthalf = NULL;
    struct NODE* secondhalf = NULL;
        
    split_linkedlist(head , &firsthalf , &secondhalf);
    print(firsthalf);
    print(secondhalf);
    
    return 0;
    
}"
22728483,PES1UG22AM156,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void print(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    print(sumList);

    return 0;
}"
22728507,PES1UG22AM150,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}"
22728507,PES1UG22AM150,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

typedef struct ListNode ListNode;

ListNode* add_linked_lists(ListNode* l1, ListNode* l2) {
    ListNode* dummy = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current = dummy;
    int carry = 0;

    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->val : 0;
        int val2 = l2 ? l2->val : 0;

        int total = val1 + val2 + carry;
        carry = total / 10;

        current->next = (ListNode*)malloc(sizeof(ListNode));
        current = current->next;
        current->val = total % 10;
        current->next = NULL;

        if (l1) {
            l1 = l1->next;
        }
        if (l2) {
            l2 = l2->next;
        }
    }

    return dummy->next;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    ListNode* l1 = NULL;
    ListNode* current1 = l1;
    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);

        ListNode* new_node = (ListNode*)malloc(sizeof(ListNode));
        new_node->val = digit;
        new_node->next = NULL;

        if (!l1) {
            l1 = new_node;
            current1 = l1;
        } else {
            current1->next = new_node;
            current1 = current1->next;
        }
    }

    ListNode* l2 = NULL;
    ListNode* current2 = l2;
    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);

        ListNode* new_node = (ListNode*)malloc(sizeof(ListNode));
        new_node->val = digit;
        new_node->next = NULL;

        if (!l2) {
            l2 = new_node;
            current2 = l2;
        } else {
            current2->next = new_node;
            current2 = current2->next;
        }
    }

    ListNode* result = add_linked_lists(l1, l2);

    while (result) {
        printf(""%d "", result->val);
        ListNode* temp = result;
        result = result->next;
        free(temp);
    }

    // Free allocated memory for input linked lists
    while (l1) {
        ListNode* temp = l1;
        l1 = l1->next;
        free(temp);
    }
    while (l2) {
        ListNode* temp = l2;
        l2 = l2->next;
        free(temp);
    }

    return 0;
}
"
22728510,PES1UG22AM178,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}"
22728510,PES1UG22AM178,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}"
22728530,PES1UG22AM157,Divide Linked List 2,15,"
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};


void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}


struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head->next;
    
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}


void splitLinkedList(struct Node* midpoint, struct Node** firstHalf, struct Node** secondHalf) {
    if (midpoint == NULL) {
        return;
    }
    
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}



void displayList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }
    
    struct Node* midpoint = findMidpoint(head);
    struct Node* firstHalf = head;
    struct Node* secondHalf = NULL;
    
    splitLinkedList(midpoint, &firstHalf, &secondHalf);
    
    displayList(firstHalf);
    displayList(secondHalf);
    
    return 0;

}
    
"
22728530,PES1UG22AM157,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}
"
22728546,pes1UG22am134,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node 
{
    int DATA;
    struct Node* next;
}NODE;

void insertEnd(NODE** HEAD, int DATA) 
{
    NODE* newNode = (NODE*)malloc(sizeof(NODE));
    newNode->DATA = DATA;
    newNode->next = NULL;
    
    if (*HEAD == NULL) 
    {
        *HEAD = newNode;
    } 
    else 
    {
        NODE* temp = *HEAD;
        while (temp->next != NULL) 
        {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

NODE* findmidpoint(NODE* HEAD) 
{
    if (HEAD == NULL || HEAD->next == NULL) 
    {
        return HEAD;
    }
    
    NODE* SLOW = HEAD;
    NODE* FAST = HEAD->next;
    
    while (FAST != NULL && FAST->next != NULL) 
    {
        SLOW = SLOW->next;
        FAST = FAST->next->next;
    }
    
    return SLOW;
}


void split(NODE* midpoint, NODE** firstHalf, NODE** secondHalf) 
{
    if (midpoint == NULL) 
    {
        return;
    }
    
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}

void display(NODE* HEAD) 
{
    NODE* CUR = HEAD;
    while (CUR != NULL) 
    {
        printf(""%d "", CUR->DATA);
        CUR = CUR->next;
    }
    printf(""\n"");
}

int main() 
{
    int num ;
    scanf(""%d"", &num);
    
    NODE* HEAD = NULL;
    
    for (int i = 0; i < num; i++) 
    {
        int value;
        scanf(""%d"", &value);
        insertEnd(&HEAD, value);
    }
    
    NODE* midpoint = findmidpoint(HEAD);
    NODE* first = HEAD;
    NODE* second = NULL;
    
    split(midpoint, &first, &second);
    
    display(first);
    display(second);
    
    return 0;
}"
22728546,pes1UG22am134,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}"
22728777,PES1UG22AM173,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}
"
22728777,PES1UG22AM173,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

typedef struct ListNode ListNode;

ListNode* add_linked_lists(ListNode* l1, ListNode* l2) {
    ListNode* dummy = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current = dummy;
    int carry = 0;

    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->val : 0;
        int val2 = l2 ? l2->val : 0;

        int total = val1 + val2 + carry;
        carry = total / 10;

        current->next = (ListNode*)malloc(sizeof(ListNode));
        current = current->next;
        current->val = total % 10;
        current->next = NULL;

        if (l1) {
            l1 = l1->next;
        }
        if (l2) {
            l2 = l2->next;
        }
    }

    return dummy->next;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    ListNode* l1 = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current1 = l1;
    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        current1->next = (ListNode*)malloc(sizeof(ListNode));
        current1 = current1->next;
        current1->val = digit;
        current1->next = NULL;
    }

    ListNode* l2 = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current2 = l2;
    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        current2->next = (ListNode*)malloc(sizeof(ListNode));
        current2 = current2->next;
        current2->val = digit;
        current2->next = NULL;
    }

    ListNode* result = add_linked_lists(l1->next, l2->next);

    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    // Free allocated memory
    while (l1) {
        ListNode* temp = l1;
        l1 = l1->next;
        free(temp);
    }
    while (l2) {
        ListNode* temp = l2;
        l2 = l2->next;
        free(temp);
    }
    while (result) {
        ListNode* temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
22728940,pes1ug22am165,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *createnode(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void display1(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void display2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=createnode(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    display1(h,mid);
    display2(h,n,mid);
    
    return 0;
}"
22728940,pes1ug22am165,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->val : 0;
        int val2 = l2 ? l2->val : 0;
        
        int total = val1 + val2 + carry;
        carry = total / 10;
        int digit = total % 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digit;
        current->next = NULL;
        
        if (l1) {
            l1 = l1->next;
        }
        if (l2) {
            l2 = l2->next;
        }
    }
    
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}


struct ListNode* create_linked_list(int* digits, int size) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    for (int i = 0; i < size; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}


void print_linked_list(struct ListNode* node) {
    while (node) {
        printf(""%d "", node->val);
        node = node->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    int* digits1 = (int*)malloc(n * sizeof(int));
    int* digits2 = (int*)malloc(m * sizeof(int));
    
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &digits1[i]);
    }
    for (int i = 0; i < m; i++) {
        scanf(""%d"", &digits2[i]);
    }
    
    struct ListNode* l1 = create_linked_list(digits1, n);
    struct ListNode* l2 = create_linked_list(digits2, m);
    
    struct ListNode* result = add_linked_lists(l1, l2);
    
    print_linked_list(result);
    
    free(digits1);
    free(digits2);
    

    while (result) {
        struct ListNode* temp = result;
        result = result->next;
        free(temp);
    }
    
    return 0;
}"
22729015,yashaswinivmipuc,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}"
22729015,yashaswinivmipuc,ADD TWO NUMBERS 104,7.5,"#include<stdio.h>
#include<math.h>
#include<stdlib.h>

typedef struct NODE{
    int val;
    struct NODE* next;
}NODE;

NODE* Add(NODE* head,int m){
    if(head == NULL){
        head = malloc(sizeof(NODE));
        head->val = m;
        head->next = NULL;
        return head;
    }
    NODE* temp = head;
    while(temp->next != NULL){
        temp = temp->next;
    }
    NODE* add = malloc(sizeof(NODE));
    add->val = m;
    add->next = NULL;
    temp->next = add;
    return head;
}

NODE* addTwoNumbers(NODE* l1, NODE* l2){
    if(l1 == NULL){
        return l2;
    }
    else if(l2 == NULL){
        return l1;
    }
    int carry = 0;
    int sum = 0;
    NODE* ans = malloc(sizeof(NODE));
    NODE* c = ans;
    c->val = (l1->val + l2->val)%10;
    carry = (l1->val + l2->val)/10;
    c->next = NULL;
    l1 = l1->next;
    l2 = l2->next;
    while(l1!=NULL && l2!=NULL){
        NODE* temp = malloc(sizeof(NODE));
        sum = l1->val + l2->val + carry;
        temp->val = (sum)%10;
        carry = (sum)/10;
        temp->next = NULL;
        c->next = temp;
        c = temp;
        l1 = l1->next;
        l2 = l2->next;
    }
    if(l1==NULL){
        while(l2!=NULL){
            NODE* temp = malloc(sizeof(NODE));
            sum = l2->val + carry;
            temp->val = (sum) % 10;
            carry = (sum)/10;
            temp->next = NULL;
            c->next = temp;
            c = temp;
            l2 = l2->next;
        }
        if(carry > 0){
            NODE* temp = malloc(sizeof(NODE));
            temp->val = carry;
            temp->next = NULL;
            c->next = temp;
        }
    }
    else{
        while(l1!=NULL){
            NODE* temp = malloc(sizeof(NODE));
            sum = l1->val + carry;
            temp->val = (sum) % 10;
            carry = (sum)/10;
            temp->next = NULL;
            c->next = temp;
            c = temp;
            l1 = l1->next;
        }
        if(carry > 0){
            NODE* temp = malloc(sizeof(NODE));
            temp->val = carry;
            temp->next = NULL;
            c->next = temp;
        }
    }
    NODE* tt = ans;
    int o = 0;
    int dgts = 0;
    while(tt->next!=NULL){
        o = o+ (tt->val* pow(10,dgts));
        dgts++;
        tt = tt->next;
    }
    o = o+ (tt->val* pow(10,dgts));
    NODE* aa = NULL;
    while(o!=0){
        aa = Add(aa,o%10);
        o = o / 10;
    }
    return aa;
}

void display(NODE* head){
    while(head!=NULL){
        printf(""%d "",head->val);
        head = head->next;
    }
    printf(""\n"");
}

int main(){
    NODE* head1 = NULL;
    NODE* head2 = NULL;
    int n,z;
    scanf("" %d %d"",&n,&z);
    int i = 0;
    while(i < n){
        int m;
        scanf("" %d"",&m);
        head1 = Add(head1,m);
        i++;
    }
    i = 0;
    while(i < z){
        int m;
        scanf("" %d"",&m);
        head2 = Add(head2,m);
        i++;
    }
    NODE* head3 = NULL;
    head3 = addTwoNumbers(head1,head2);
    display(head3);
}"
22729950,pes1ug22am136,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



typedef struct Node {
    int data;
    struct Node* next;
} Node;


void insert(Node** head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}
Node* findMidpoint(Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    Node* slow = head;
    Node* fast = head;

    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}


void splitList(Node* head, Node** firstHalf, Node** secondHalf) {
    Node* midpoint = findMidpoint(head);
    *firstHalf = head;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}


void Display(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insert(&head, data);
    }

    Node* firstHalf = NULL;
    Node* secondHalf = NULL;

    splitList(head, &firstHalf, &secondHalf);

    Display(firstHalf);
    Display(secondHalf);

return 0;}

"
22729950,pes1ug22am136,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

return 0;
}
"
22729956,PES1UG22AM183,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Number {
    int value;
    struct Number *nxt;
};

typedef struct Number List;

List* addToList(List* h, int d) {
    List* t = malloc(sizeof(List));
    List* t1 = h;
    t->value = d;
    t->nxt = NULL;

    if (h == NULL)
        return t;

    while (t1->nxt != NULL) {
        t1 = t1->nxt;
    }
    t1->nxt = t;
    return h;
}

void display(List* h) {
    while (h) {
        printf(""%d "", h->value);
        h = h->nxt;
    }
    return;
}

int main() {
    int count, mid;
    List* mainList = NULL;
    List* partList1 = NULL;
    List* partList2 = NULL;

    scanf(""%d"", &count);

    for (int i = 0; i < count; i++) {
        int num;
        scanf(""%d"", &num);
        mainList = addToList(mainList, num);
    }

    if (count % 2 != 0)
        mid = count / 2 + 1;
    else
        mid = count / 2;

    for (int i = 0; i < mid; i++) {
        partList1 = addToList(partList1, mainList->value);
        mainList = mainList->nxt;
    }

    while (mainList) {
        partList2 = addToList(partList2, mainList->value);
        mainList = mainList->nxt;
    }

    display(partList1);
    printf(""\n"");
    display(partList2);

    return 0;
}
"
22729956,PES1UG22AM183,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}"
22729958,PES1UG22AM155,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct LinkedList
{
    int data;
    struct LinkedList *link;
} ll;

ll *input(ll *head, int info)
{
    ll *temp = head;
    ll *current = (ll *)malloc(sizeof(ll));
    current->data = info;
    current->link = NULL;
    if (head == NULL)
    {
        head = current;
    }
    else
    {
        while (temp->link != NULL)
            temp = temp->link;

        temp->link = current;
    }
    return head;
}

void display(ll *head)
{

    ll *temp = head;
    while (temp != NULL)
    {
        printf(""%d "", temp->data);
        temp = temp->link;
    }
}

ll *split_list(ll *head, int size)
{
    int current_pos = 0;
    ll *temp = head;
    if (size % 2 == 0)
        size = (size / 2) - 1;
    else
        size = size / 2;
    while (current_pos < size)
    {
        temp = temp->link;
        current_pos++;
    }
    ll *current = temp->link;
    temp->link = NULL;
    return current;
}

int main()
{
    ll *head = NULL;
    int n;
    scanf(""%d"", &n);
    for (int i = 0; i < n; i++)
    {
        int info;
        scanf(""%d"", &info);
        head = input(head, info);
    }
    ll *split = split_list(head, n);
    display(head);
        printf(""\n"");
    display(split);
}"
22729967,PES1UG22AM177,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct num{
int data;
struct num*next;};

typedef struct num LIST;
LIST* addNode(LIST* head, int data){
    LIST* temp = malloc(sizeof(LIST));
    LIST* temp1 = head;
    temp->data = data;
    temp->next = NULL;
    if(head == NULL)
        return temp;
    while(temp1->next!=NULL){
    temp1 = temp1->next;
    }
    temp1->next = temp;
    
    return head;
}
void display(LIST* head){
while(head)
{
printf(""%d "",head->data);
head = head->next;

}
    return;
}


int main() {
    int n,mid;
    LIST* LLIST = NULL;
    LIST* List1 = NULL;
    LIST* List2 = NULL;
    
    scanf(""%d"", &n);
    for (int i = 0; i < n; i++) {
        int n1;
        scanf(""%d"", &n1);
        LLIST = addNode(LLIST, n1);
    }
    if(n%2!=0)
    mid = n / 2 + 1;
    else 
    mid = n/2;
    for (int i = 0; i < mid; i++) {
        List1 = addNode(List1, LLIST->data);
        LLIST = LLIST->next;
    }
    while (LLIST) {
        List2 = addNode(List2, LLIST->data);
        LLIST = LLIST->next;
    }
    
    display(List1);
    printf(""\n"");
    display(List2);
    
    return 0;
}
"
22729967,PES1UG22AM177,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}"
22729981,PES1UG22AM175,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);


    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
"
22729981,PES1UG22AM175,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct DigitNode {
    int digit;
    struct DigitNode* next;
};

void insertDigit(struct DigitNode** head, int digit) {
    struct DigitNode* newDigitNode = (struct DigitNode*)malloc(sizeof(struct DigitNode));
    newDigitNode->digit = digit;
    newDigitNode->next = NULL;

    if (*head == NULL) {
        *head = newDigitNode;
    } else {
        struct DigitNode* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newDigitNode;
    }
}

struct DigitNode* addNumbers(struct DigitNode* num1, struct DigitNode* num2) {
    struct DigitNode* result = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->digit;
            num1 = num1->next;
        }

        if (num2 != NULL) {
            sum += num2->digit;
            num2 = num2->next;
        }
        carry = sum / 10;
        sum %= 10;
        insertDigit(&result, sum);
    }
    return result;
}

void printDigits(struct DigitNode* head) {
    struct DigitNode* current = head;
    while (current != NULL) {
        printf(""%d "", current->digit);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int length1, length2;
    scanf(""%d %d"", &length1, &length2);

    struct DigitNode* num1List = NULL;
    struct DigitNode* num2List = NULL;

    for (int i = 0; i < length1; i++) {
        int digit;
        scanf(""%d"", &digit);
        insertDigit(&num1List, digit);
    }

    for (int i = 0; i < length2; i++) {
        int digit;
        scanf(""%d"", &digit);
        insertDigit(&num2List, digit);
    }

    struct DigitNode* result = addNumbers(num1List, num2List);
    printDigits(result);

    return 0;
}"
22730001,PES1202203614,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}
    "
22730001,PES1202203614,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct DigitNode {
    int digit;
    struct DigitNode* next;
};

void insertDigit(struct DigitNode** head, int digit) {
    struct DigitNode* newDigitNode = (struct DigitNode*)malloc(sizeof(struct DigitNode));
    newDigitNode->digit = digit;
    newDigitNode->next = NULL;

    if (*head == NULL) {
        *head = newDigitNode;
    } else {
        struct DigitNode* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newDigitNode;
    }
}

struct DigitNode* addNumbers(struct DigitNode* num1, struct DigitNode* num2) {
    struct DigitNode* result = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->digit;
            num1 = num1->next;
        }

        if (num2 != NULL) {
            sum += num2->digit;
            num2 = num2->next;
        }
        carry = sum / 10;
        sum %= 10;
        insertDigit(&result, sum);
    }
    return result;
}

void printDigits(struct DigitNode* head) {
    struct DigitNode* current = head;
    while (current != NULL) {
        printf(""%d "", current->digit);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int length1, length2;
    scanf(""%d %d"", &length1, &length2);

    struct DigitNode* num1List = NULL;
    struct DigitNode* num2List = NULL;

    for (int i = 0; i < length1; i++) {
        int digit;
        scanf(""%d"", &digit);
        insertDigit(&num1List, digit);
    }

    for (int i = 0; i < length2; i++) {
        int digit;
        scanf(""%d"", &digit);
        insertDigit(&num2List, digit);
    }

    struct DigitNode* result = addNumbers(num1List, num2List);
    printDigits(result);

    return 0;
}
"
22730003,PES1UG22AM162,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}"
22730003,PES1UG22AM162,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}"
22730007,PES1202202639,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}"
22730007,PES1202202639,ADD TWO NUMBERS 104,0,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertEnd(Node* head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

Node* addReversedLists(Node* list1, Node* list2) {
    Node* result = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum = sum % 10;
        result = insertEnd(result, sum);
    }

    if (carry > 0) {
        result = insertEnd(result, carry);
    }

    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    Node* list1 = NULL;
    Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        list1 = insertEnd(list1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        list2 = insertEnd(list2, digit);
    }

    Node* result = addReversedLists(list1, list2);
    printList(result);

    return 0;
}  
    return 0;
}
"
22730040,PES1UG22AM148,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct Node
{
    int data;
    struct Node *next;
}NODE;


NODE *readll(int n)
{
    NODE *temp=NULL;
    NODE *head=NULL;
    NODE *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(NODE*)malloc(sizeof(NODE));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(NODE *head,int n)
{
    int count=0;
    NODE *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(NODE *head,int n, int mid)
{
    int count=0;
    NODE *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    NODE *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}"
22730040,PES1UG22AM148,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node 
{
    int data;
    struct Node* next;
} Node;

Node* insertEnd(Node* head, int data) 
{
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

Node* addReversedLists(Node* list1, Node* list2) {
    Node* result = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum = sum % 10;
        result = insertEnd(result, sum);
    }

    if (carry > 0) {
        result = insertEnd(result, carry);
    }

    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    Node* list1 = NULL;
    Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        list1 = insertEnd(list1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        list2 = insertEnd(list2, digit);
    }

    Node* result = addReversedLists(list1, list2);
    printList(result);

    return 0;
}"
22730063,PES1UG22AM188,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insertNode(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head;
    
    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

void splitLinkedList(struct Node* source, struct Node** firstHalf, struct Node** secondHalf) {
    struct Node* mid = findMidpoint(source);
    *firstHalf = source;
    *secondHalf = mid->next;
    mid->next = NULL;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertNode(&head, data);
    }
    
    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;
    
    splitLinkedList(head, &firstHalf, &secondHalf);
    
    printList(firstHalf);
    printList(secondHalf);
    
    return 0;
}
"
22730063,PES1UG22AM188,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}"
22730068,PES1UG22AM176,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}
"
22730068,PES1UG22AM176,ADD TWO NUMBERS 104,15,"#include <stdio.h>

#include <stdlib.h>

struct Node {

    int data;

    struct Node* next;

};

void push(struct Node** top, int data) {

    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

    newNode->data = data;

    newNode->next = *top;

    *top = newNode;

}

int pop(struct Node** top) {

    if (*top == NULL) {

        return 0;

    }

    struct Node* temp = *top;

    *top = (*top)->next;

    int data = temp->data;

    free(temp);

    return data;

}

struct Node* addLists(struct Node* list1, struct Node* list2) {

    struct Node* result = NULL;

    struct Node* temp = NULL;

    int carry = 0;

    while (list1 || list2 || carry) {

        int sum = carry + pop(&list1) + pop(&list2);

        carry = sum / 10;

        int value = sum % 10;

        push(&result, value);

    }

    return result;

}

void printList(struct Node* head) {

    struct Node* current = head;

    while (current != NULL) {

        printf(""%d"", current->data);

        if (current->next) {

            printf("" "");

        }

        current = current->next;

    }

    printf(""\n"");

}

int main() {

    int n1, n2;

    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;

    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {

        int value;

        scanf(""%d"", &value);

        push(&list1, value);

    }

    for (int i = 0; i < n2; ++i) {

        int value;

        scanf(""%d"", &value);

        push(&list2, value);

    }

    struct Node* sumList = addLists(list1, list2);

    printList(sumList);

    return 0;

}
"
22730079,pes1202201300,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int info;
    struct Node* next;
};

void insertNode(struct Node** head, int data) {
    struct Node* new = (struct Node*)malloc(sizeof(struct Node));
    new->info = data;
    new->next = NULL;
    
    if (*head == NULL) {
        *head = new;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = new;
    }
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head;
    
    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

void splitLinkedList(struct Node* source, struct Node** first, struct Node** second) {
    struct Node* mid = findMidpoint(source);
    *first = source;
    *second = mid->next;
    mid->next = NULL;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->info);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertNode(&head, data);
    }
    
    struct Node* first = NULL;
    struct Node* second = NULL;
    
    splitLinkedList(head, &first, &second);
    
    printList(first);
    printList(second);
    
    return 0;
}
"
22730079,pes1202201300,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};
void insertNode(struct ListNode** head, int val) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->val = val;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct ListNode* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}
    struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* result = NULL;
    struct ListNode* current = NULL;
    int carry = 0;
    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }
        
        carry = sum / 10;
        sum %= 10;
        
        insertNode(&result, sum);
        
        if (current == NULL) {
            current = result;
        }
    }
    
    return result;
}
void printList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d "", current->val);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);
    
    struct ListNode* num1 = NULL;
    struct ListNode* num2 = NULL;
    
    for (int i = 0; i < n1; i++) {
        int val;
        scanf(""%d"", &val);
        insertNode(&num1, val);
    }
    
    for (int i = 0; i < n2; i++) {
        int val;
        scanf(""%d"", &val);
        insertNode(&num2, val);
    }
    
    struct ListNode* result = addTwoNumbers(num1, num2);
    printList(result);
    
    return 0;
}
"
22730080,PES1UG22AM147,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}"
22730080,PES1UG22AM147,ADD TWO NUMBERS 104,7.5," #include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertEnd(Node* head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

Node* addReversedLists(Node* list1, Node* list2) {
    Node* result = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum = sum % 10;
        result = insertEnd(result, sum);
    }

    if (carry > 0) {
        result = insertEnd(result, carry);
    }

    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    Node* list1 = NULL;
    Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        list1 = insertEnd(list1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        list2 = insertEnd(list2, digit);
    }

    Node* result = addReversedLists(list1, list2);
    printList(result);

    return 0;
}"
22730083,PES1UG22AM145,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}"
22730083,PES1UG22AM145,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

typedef struct ListNode ListNode;

ListNode* add_linked_lists(ListNode* l1, ListNode* l2) {
    ListNode* dummy = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current = dummy;
    int carry = 0;

    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->val : 0;
        int val2 = l2 ? l2->val : 0;

        int total = val1 + val2 + carry;
        carry = total / 10;

        current->next = (ListNode*)malloc(sizeof(ListNode));
        current = current->next;
        current->val = total % 10;
        current->next = NULL;

        if (l1) {
            l1 = l1->next;
        }
        if (l2) {
            l2 = l2->next;
        }
    }

    return dummy->next;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    ListNode* l1 = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current1 = l1;
    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        current1->next = (ListNode*)malloc(sizeof(ListNode));
        current1 = current1->next;
        current1->val = digit;
        current1->next = NULL;
    }

    ListNode* l2 = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current2 = l2;
    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        current2->next = (ListNode*)malloc(sizeof(ListNode));
        current2 = current2->next;
        current2->val = digit;
        current2->next = NULL;
    }

    ListNode* result = add_linked_lists(l1->next, l2->next);

    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    // Free allocated memory
    while (l1) {
        ListNode* temp = l1;
        l1 = l1->next;
        free(temp);
    }
    while (l2) {
        ListNode* temp = l2;
        l2 = l2->next;
        free(temp);
    }
    while (result) {
        ListNode* temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}"
22730093,pes1202203845,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}"
22730093,pes1202203845,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

// Define the structure of a singly linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertNode(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

// Function to add zeros to the shorter linked list
void addZeros(struct Node** head, int count) {
    for (int i = 0; i < count; i++) {
        insertNode(head, 0);
    }
}

// Function to add two reversed-digit linked lists
struct Node* addLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;
    
    while (num1 != NULL || num2 != NULL) {
        int sum = carry;
        
        if (num1 != NULL) {
            sum += num1->data;
            num1 = num1->next;
        }
        
        if (num2 != NULL) {
            sum += num2->data;
            num2 = num2->next;
        }
        
        carry = sum / 10;
        sum = sum % 10;
        
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = sum;
        newNode->next = NULL;
        
        if (result == NULL) {
            result = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }
    
    if (carry > 0) {
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = carry;
        newNode->next = NULL;
        current->next = newNode;
    }
    
    return result;
}

// Function to print the elements of a linked list
void printList(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2, data;
    scanf(""%d %d"", &n1, &n2);
    
    struct Node* num1 = NULL;
    struct Node* num2 = NULL;
    
    for (int i = 0; i < n1; i++) {
        scanf(""%d"", &data);
        insertNode(&num1, data);
    }
    
    for (int i = 0; i < n2; i++) {
        scanf(""%d"", &data);
        insertNode(&num2, data);
    }
    
    // Adjust the lengths by adding zeros if necessary
    int diff = abs(n1 - n2);
    if (n1 > n2) {
        addZeros(&num2, diff);
    } else {
        addZeros(&num1, diff);
    }
    
    struct Node* result = addLists(num1, num2);
    
    printList(result);
    
    return 0;
}
"
22730097,PES1UG22AM181,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}"
22730097,PES1UG22AM181,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

// Define the structure for a linked list node
struct ListNode {
    int val;
    struct ListNode* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct ListNode** head, int value) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->val = value;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct ListNode* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to add two reversed-digit linked lists
struct ListNode* addLists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode dummy = {0};
    struct ListNode* current = &dummy;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        insertEnd(&(current->next), sum);
        current = current->next;
    }

    return dummy.next;
}

// Function to print the elements of a linked list
void printList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d "", current->val);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct ListNode* num1 = NULL;
    struct ListNode* num2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        insertEnd(&num1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        insertEnd(&num2, digit);
    }

    struct ListNode* result = addLists(num1, num2);
    printList(result);

    return 0;
}"
22730106,PES1UG22AM161,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

// Define the structure of a linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a node at the end of the linked list
struct Node* append(struct Node* head, int data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->data = data;
    new_node->next = NULL;

    if (head == NULL) {
        return new_node;
    }

    struct Node* current = head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = new_node;

    return head;
}

// Function to add two reversed-digit linked lists and return the result
struct Node* addLinkedLists(struct Node* l1, struct Node* l2) {
    struct Node* result = NULL;
    struct Node* tail = NULL;
    int carry = 0;

    while (l1 || l2 || carry) {
        int sum = carry;

        if (l1) {
            sum += l1->data;
            l1 = l1->next;
        }

        if (l2) {
            sum += l2->data;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum = sum % 10;

        if (result == NULL) {
            result = append(result, sum);
            tail = result;
        } else {
            tail->next = append(tail->next, sum);
            tail = tail->next;
        }
    }

    return result;
}

// Function to print the elements of a linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        num1 = append(num1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        num2 = append(num2, digit);
    }

    struct Node* result = addLinkedLists(num1, num2);

    printList(result);

    return 0;
}
"
22730108,pes1202203952,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}"
22730108,pes1202203952,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertEnd(Node* head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

Node* addReversedLists(Node* list1, Node* list2) {
    Node* result = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum = sum % 10;
        result = insertEnd(result, sum);
    }

    if (carry > 0) {
        result = insertEnd(result, carry);
    }

    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    Node* list1 = NULL;
    Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        list1 = insertEnd(list1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        list2 = insertEnd(list2, digit);
    }

    Node* result = addReversedLists(list1, list2);
    printList(result);

    return 0;
}"
22730109,PES1UG22AM133,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}"
22730109,PES1UG22AM133,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertEnd(Node* head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

Node* addReversedLists(Node* list1, Node* list2) {
    Node* result = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum = sum % 10;
        result = insertEnd(result, sum);
    }

    if (carry > 0) {
        result = insertEnd(result, carry);
    }

    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    Node* list1 = NULL;
    Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        list1 = insertEnd(list1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        list2 = insertEnd(list2, digit);
    }

    Node* result = addReversedLists(list1, list2);
    printList(result);

    return 0;
}"
22730120,PES1UG22AM194,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

// Structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertNode(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to find the midpoint of the linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head;
    
    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

// Function to split the linked list into two parts at the midpoint
void splitLinkedList(struct Node* source, struct Node** firstHalf, struct Node** secondHalf) {
    struct Node* mid = findMidpoint(source);
    *firstHalf = source;
    *secondHalf = mid->next;
    mid->next = NULL;
}

// Function to print the elements of a linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertNode(&head, data);
    }
    
    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;
    
    splitLinkedList(head, &firstHalf, &secondHalf);
    
    printList(firstHalf);
    printList(secondHalf);
    
    return 0;
}"
22730120,PES1UG22AM194,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}"
22730125,PES1202203842,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}"
22730125,PES1202203842,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

// Define the structure of a singly linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertNode(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

// Function to add zeros to the shorter linked list
void addZeros(struct Node** head, int count) {
    for (int i = 0; i < count; i++) {
        insertNode(head, 0);
    }
}

// Function to add two reversed-digit linked lists
struct Node* addLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;
    
    while (num1 != NULL || num2 != NULL) {
        int sum = carry;
        
        if (num1 != NULL) {
            sum += num1->data;
            num1 = num1->next;
        }
        
        if (num2 != NULL) {
            sum += num2->data;
            num2 = num2->next;
        }
        
        carry = sum / 10;
        sum = sum % 10;
        
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = sum;
        newNode->next = NULL;
        
        if (result == NULL) {
            result = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }
    
    if (carry > 0) {
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = carry;
        newNode->next = NULL;
        current->next = newNode;
    }
    
    return result;
}

// Function to print the elements of a linked list
void printList(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2, data;
    scanf(""%d %d"", &n1, &n2);
    
    struct Node* num1 = NULL;
    struct Node* num2 = NULL;
    
    for (int i = 0; i < n1; i++) {
        scanf(""%d"", &data);
        insertNode(&num1, data);
    }
    
    for (int i = 0; i < n2; i++) {
        scanf(""%d"", &data);
        insertNode(&num2, data);
    }
    
    // Adjust the lengths by adding zeros if necessary
    int diff = abs(n1 - n2);
    if (n1 > n2) {
        addZeros(&num2, diff);
    } else {
        addZeros(&num1, diff);
    }
    
    struct Node* result = addLists(num1, num2);
    
    printList(result);
    
    return 0;
}"
22730127,pes1ug22am171,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

// Function to find the midpoint of the linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head;

    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

// Function to print the elements of a linked list
void printList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        if (head->next != NULL) {
            printf("" "");
        }
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* mid = findMidpoint(head);
    struct Node* head1 = head;
    struct Node* head2 = mid->next;
    mid->next = NULL;

    printList(head1);
    printList(head2);

    return 0;
}
"
22730127,pes1ug22am171,ADD TWO NUMBERS 104,0,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

struct ListNode* insertNode(struct ListNode* head, int val) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->val = val;
    newNode->next = head;
    return newNode;
}

struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummyHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummyHead;
    int carry = 0;

    while (l1 || l2 || carry) {
        int sum = carry;

        if (l1) {
            sum += l1->val;
            l1 = l1->next;
        }

        if (l2) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = insertNode(NULL, sum);
        current = current->next;
    }

    struct ListNode* result = dummyHead->next;
    free(dummyHead);
    return result;
}

void printList(struct ListNode* head) {
    while (head != NULL) {
        printf(""%d"", head->val);
        if (head->next != NULL) {
            printf("" "");
        }
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct ListNode* l1 = NULL;
    struct ListNode* l2 = NULL;

    for (int i = 0; i < n1; i++) {
        int val;
        scanf(""%d"", &val);
        l1 = insertNode(l1, val);
    }

    for (int i = 0; i < n2; i++) {
        int val;
        scanf(""%d"", &val);
        l2 = insertNode(l2, val);
    }

    struct ListNode* sum = addTwoNumbers(l1, l2);
    printList(sum);

    return 0;
}
"
22730134,PES1UG22AM140,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}"
22730134,PES1UG22AM140,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

typedef struct ListNode ListNode;

ListNode* add_linked_lists(ListNode* l1, ListNode* l2) {
    ListNode* dummy = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current = dummy;
    int carry = 0;

    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->val : 0;
        int val2 = l2 ? l2->val : 0;

        int total = val1 + val2 + carry;
        carry = total / 10;

        current->next = (ListNode*)malloc(sizeof(ListNode));
        current = current->next;
        current->val = total % 10;
        current->next = NULL;

        if (l1) {
            l1 = l1->next;
        }
        if (l2) {
            l2 = l2->next;
        }
    }

    return dummy->next;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    ListNode* l1 = NULL;
    ListNode* current1 = l1;
    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);

        ListNode* new_node = (ListNode*)malloc(sizeof(ListNode));
        new_node->val = digit;
        new_node->next = NULL;

        if (!l1) {
            l1 = new_node;
            current1 = l1;
        } else {
            current1->next = new_node;
            current1 = current1->next;
        }
    }

    ListNode* l2 = NULL;
    ListNode* current2 = l2;
    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);

        ListNode* new_node = (ListNode*)malloc(sizeof(ListNode));
        new_node->val = digit;
        new_node->next = NULL;

        if (!l2) {
            l2 = new_node;
            current2 = l2;
        } else {
            current2->next = new_node;
            current2 = current2->next;
        }
    }

    ListNode* result = add_linked_lists(l1, l2);

    while (result) {
        printf(""%d "", result->val);
        ListNode* temp = result;
        result = result->next;
        free(temp);
    }

    // Free allocated memory for input linked lists
    while (l1) {
        ListNode* temp = l1;
        l1 = l1->next;
        free(temp);
    }
    while (l2) {
        ListNode* temp = l2;
        l2 = l2->next;
        free(temp);
    }

    return 0;
}"
22730149,PES1UG22AM159,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct LinkedList
{
    int data;
    struct LinkedList *link;
} ll;

ll *input(ll *head, int info)
{
    ll *temp = head;
    ll *current = (ll *)malloc(sizeof(ll));
    current->data = info;
    current->link = NULL;
    if (head == NULL)
    {
        head = current;
    }
    else
    {
        while (temp->link != NULL)
            temp = temp->link;

        temp->link = current;
    }
    return head;
}

void display(ll *head)
{

    ll *temp = head;
    while (temp != NULL)
    {
        printf(""%d "", temp->data);
        temp = temp->link;
    }
}

ll *split_list(ll *head, int size)
{
    int current_pos = 0;
    ll *temp = head;
    if (size % 2 == 0)
        size = (size / 2) - 1;
    else
        size = size / 2;
    while (current_pos < size)
    {
        temp = temp->link;
        current_pos++;
    }
    ll *current = temp->link;
    temp->link = NULL;
    return current;
}

int main()
{
    ll *head = NULL;
    int n;
    scanf(""%d"", &n);
    for (int i = 0; i < n; i++)
    {
        int info;
        scanf(""%d"", &info);
        head = input(head, info);
    }
    ll *split = split_list(head, n);
    display(head);
        printf(""\n"");
    display(split);
}"
22730149,PES1UG22AM159,ADD TWO NUMBERS 104,0,"//You are given a singly linked list. Write a C program to find the midpoint of the linked list and then split the list into two separate lists at that midpoint. Finally, print the elements of both lists, one line after the other.

#include <stdio.h>

#include <string.h>

#include <math.h>

#include <stdlib.h>

struct Node{

    int data;

    struct Node *next;

};

typedef struct Node Node;

Node *readll(int n)

{

    Node *temp=NULL;

    Node *head=NULL;

    Node *p=NULL;

    for(int i=0;i<n;++i)

    {

        temp=(struct Node *)malloc(sizeof(struct Node));

        scanf(""%d"",&temp->data);

        temp->next=NULL;

        if(head==NULL)

        { 

              head=temp;

        }

        else{

        p=head;

        while(p->next!=NULL)

            p=p->next;

        p->next=temp;

        }

    }

    return head;

}

void printll(Node *head,int n)

{

    int count=0;

    Node *p=head;

    while(p!=NULL)

    {   count++;

        printf(""%d "",p->data);

        p=p->next;

        if(count==n)

            break;

    }

    printf(""\n"");

        

}

void printll2(Node *head,int n, int mid)

{

    int count=0;

    Node *p=head;

    while(p!=NULL)

    {   count++;

        if(count>mid)

        {    printf(""%d "",p->data);

        }

     p=p->next;

    }

    

}

int main() {

    

    Node *h;

    int n;

    scanf(""%d"",&n);

    h=readll(n);

    int mid;

    if(n%2!=0)     

        mid=(n/2)+1;

    else

        mid=(n/2);

    printll(h,mid);

    printll2(h,n,mid);

    

    return 0;

}






#include <stdio.h>

#include <stdlib.h>

struct ListNode {

    int val;

    struct ListNode* next;

};

typedef struct ListNode ListNode;

ListNode* add_reversed_linked_lists(ListNode* l1, ListNode* l2) {

    ListNode* dummy_head = (ListNode*)malloc(sizeof(ListNode));

    dummy_head->val = 0;

    dummy_head->next = NULL;

    

    ListNode* current = dummy_head;

    int carry = 0;

    

    while (l1 != NULL || l2 != NULL || carry != 0) {

        int val1 = (l1 != NULL) ? l1->val : 0;

        int val2 = (l2 != NULL) ? l2->val : 0;

        int total = val1 + val2 + carry;

        

        carry = total / 10;

        int digit = total % 10;

        

        ListNode* new_node = (ListNode*)malloc(sizeof(ListNode));

        new_node->val = digit;

        new_node->next = NULL;

        

        current->next = new_node;

        current = current->next;

        

        if (l1 != NULL) l1 = l1->next;

        if (l2 != NULL) l2 = l2->next;

    }

    

    ListNode* result = dummy_head->next;

    free(dummy_head);

    return result;

}

ListNode* create_linked_list(int* digits, int num_digits) {

    ListNode* dummy_head = (ListNode*)malloc(sizeof(ListNode));

    dummy_head->val = 0;

    dummy_head->next = NULL;

    ListNode* current = dummy_head;

    

    for (int i = 0; i < num_digits; ++i) {

        ListNode* new_node = (ListNode*)malloc(sizeof(ListNode));

        new_node->val = digits[i];

        new_node->next = NULL;

        

        current->next = new_node;

        current = current->next;

    }

    

    ListNode* result = dummy_head->next;

    free(dummy_head);

    return result;

}

void print_linked_list(ListNode* node) {

    while (node != NULL) {

        printf(""%d "", node->val);

        node = node->next;

    }

    printf(""\n"");

}

int main() {

    int n1, n2;

    scanf(""%d %d"", &n1, &n2);

    

    int digits1[n1], digits2[n2];

    for (int i = 0; i < n1; ++i) {

        scanf(""%d"", &digits1[i]);

    }

    for (int i = 0; i < n2; ++i) {

        scanf(""%d"", &digits2[i]);

    }

    

    ListNode* list1 = create_linked_list(digits1, n1);

    ListNode* list2 = create_linked_list(digits2, n2);

    

    ListNode* result = add_reversed_linked_lists(list1, list2);

    

    print_linked_list(result);

    

    return 0;

}#include <stdio.h>

#include <stdlib.h>

struct ListNode {

    int val;

    struct ListNode* next;

};

typedef struct ListNode ListNode;

ListNode* add_reversed_linked_lists(ListNode* l1, ListNode* l2) {

    ListNode* dummy_head = (ListNode*)malloc(sizeof(ListNode));

    dummy_head->val = 0;

    dummy_head->next = NULL;

    

    ListNode* current = dummy_head;

    int carry = 0;

    

    while (l1 != NULL || l2 != NULL || carry != 0) {

        int val1 = (l1 != NULL) ? l1->val : 0;

        int val2 = (l2 != NULL) ? l2->val : 0;

        int total = val1 + val2 + carry;

        

        carry = total / 10;

        int digit = total % 10;

        

        ListNode* new_node = (ListNode*)malloc(sizeof(ListNode));

        new_node->val = digit;

        new_node->next = NULL;

        

        current->next = new_node;

        current = current->next;

        

        if (l1 != NULL) l1 = l1->next;

        if (l2 != NULL) l2 = l2->next;

    }

    

    ListNode* result = dummy_head->next;

    free(dummy_head);

    return result;

}

ListNode* create_linked_list(int* digits, int num_digits) {

    ListNode* dummy_head = (ListNode*)malloc(sizeof(ListNode));

    dummy_head->val = 0;

    dummy_head->next = NULL;

    ListNode* current = dummy_head;

    

    for (int i = 0; i < num_digits; ++i) {

        ListNode* new_node = (ListNode*)malloc(sizeof(ListNode));

        new_node->val = digits[i];

        new_node->next = NULL;

        

        current->next = new_node;

        current = current->next;

    }

    

    ListNode* result = dummy_head->next;

    free(dummy_head);

    return result;

}

void print_linked_list(ListNode* node) {

    while (node != NULL) {

        printf(""%d "", node->val);

        node = node->next;

    }

    printf(""\n"");

}

int main() {

    int n1, n2;

    scanf(""%d %d"", &n1, &n2);

    

    int digits1[n1], digits2[n2];

    for (int i = 0; i < n1; ++i) {

        scanf(""%d"", &digits1[i]);

    }

    for (int i = 0; i < n2; ++i) {

        scanf(""%d"", &digits2[i]);

    }

    

    ListNode* list1 = create_linked_list(digits1, n1);



    

   

    

    

    



"
22730155,PES1202203794,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}"
22730165,PES1UG22AM189,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}


"
22730202,PES1UG22AM169,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}"
22730155,PES1202203794,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertEnd(Node* head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

Node* addReversedLists(Node* list1, Node* list2) {
    Node* result = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum = sum % 10;
        result = insertEnd(result, sum);
    }

    if (carry > 0) {
        result = insertEnd(result, carry);
    }

    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    Node* list1 = NULL;
    Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        list1 = insertEnd(list1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        list2 = insertEnd(list2, digit);
    }

    Node* result = addReversedLists(list1, list2);
    printList(result);

    return 0;
}"
22730203,PES1UG22198,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}"
22730203,PES1UG22198,ADD TWO NUMBERS 104,7.5,"#include<stdio.h>
#include<stdlib.h>
#include<math.h>

typedef struct linkedList{
    int val;
    struct linkedList *next;
}LL;

LL* insert(LL *head, int val){
    LL* check = head;
    if(head == NULL){
        LL* new = malloc(sizeof(LL));
        new->val = val;
        new->next = NULL;
        head = new;
        return head;
    }
    else{
        LL* new = malloc(sizeof(LL));
        new->val = val;
        while(head->next != NULL){
            head = head->next;
        }
        new->next = NULL;
        head->next = new;
        return check;
    }
}

LL* addTwoNumbers(LL* l1, LL* l2){

    if(l1 == NULL){
        return l2;
    }
    else if(l2 == NULL){
        return l1;
    }

    int sum1 = 0;
    int sum2 = 0;
    int i =0;
    while(l1 != NULL){
        sum1 += (l1->val)*pow(10,i);
        i++;
        l1 = l1->next;
    }
    i = 0;
    while(l2 != NULL){
        sum2 += (l2->val)*pow(10,i);
        i++;
        l2 = l2->next;
    }
    int sum;
    sum = sum1 + sum2;
    LL* ans = NULL;
    while(sum != 0){
        ans = insert(ans,sum%10);
        sum /= 10;
    }

    return ans;
    
}

void display(LL*head){

    while(head!= NULL){
        printf(""%d "",head->val);
        head = head->next;
    }

    printf(""\n"");
}

int main(){
    int n,m;
    scanf("" %d %d"",&n,&m);

    LL* a = NULL;
    LL* b = NULL;
    for(int i = 0; i < n+m;i++){
        int x;
        scanf("" %d"",&x);
        if(i<n){
            a = insert(a,x);
        }
        else{
        b = insert(b,x);
        }
    }

    LL* c = NULL;
    c = addTwoNumbers(a,b);

    display(c);


}"
22730236,PES1UG22AM139,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}"
22730236,PES1UG22AM139,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertEnd(Node* head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

Node* addReversedLists(Node* list1, Node* list2) {
    Node* result = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum = sum % 10;
        result = insertEnd(result, sum);
    }

    if (carry > 0) {
        result = insertEnd(result, carry);
    }

    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    Node* list1 = NULL;
    Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        list1 = insertEnd(list1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        list2 = insertEnd(list2, digit);
    }

    Node* result = addReversedLists(list1, list2);
    printList(result);

    return 0;
}"
22730338,PES1UG22AM191,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}"
22730447,PES1UG22AM187,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}"
22730338,PES1UG22AM191,ADD TWO NUMBERS 104,0,"//You are given a singly linked list. Write a C program to find the midpoint of the linked list and then split the list into two separate lists at that midpoint. Finally, print the elements of both lists, one line after the other.

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        { 
              head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}"
22730447,PES1UG22AM187,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

typedef struct ListNode ListNode;

ListNode* add_linked_lists(ListNode* l1, ListNode* l2) {
    ListNode* dummy = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current = dummy;
    int carry = 0;

    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->val : 0;
        int val2 = l2 ? l2->val : 0;

        int total = val1 + val2 + carry;
        carry = total / 10;

        current->next = (ListNode*)malloc(sizeof(ListNode));
        current = current->next;
        current->val = total % 10;
        current->next = NULL;

        if (l1) {
            l1 = l1->next;
        }
        if (l2) {
            l2 = l2->next;
        }
    }

    return dummy->next;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    ListNode* l1 = NULL;
    ListNode* current1 = l1;
    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);

        ListNode* new_node = (ListNode*)malloc(sizeof(ListNode));
        new_node->val = digit;
        new_node->next = NULL;

        if (!l1) {
            l1 = new_node;
            current1 = l1;
        } else {
            current1->next = new_node;
            current1 = current1->next;
        }
    }

    ListNode* l2 = NULL;
    ListNode* current2 = l2;
    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);

        ListNode* new_node = (ListNode*)malloc(sizeof(ListNode));
        new_node->val = digit;
        new_node->next = NULL;

        if (!l2) {
            l2 = new_node;
            current2 = l2;
        } else {
            current2->next = new_node;
            current2 = current2->next;
        }
    }

    ListNode* result = add_linked_lists(l1, l2);

    while (result) {
        printf(""%d "", result->val);
        ListNode* temp = result;
        result = result->next;
        free(temp);
    }

    // Free allocated memory for input linked lists
    while (l1) {
        ListNode* temp = l1;
        l1 = l1->next;
        free(temp);
    }
    while (l2) {
        ListNode* temp = l2;
        l2 = l2->next;
        free(temp);
    }

    return 0;
}"
22730639,PES1UG22AM152,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#include <stdio.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct LinkedList
{
    int data;
    struct LinkedList *link;
} ll;

ll *input(ll *head, int info)
{
    ll *temp = head;
    ll *current = (ll *)malloc(sizeof(ll));
    current->data = info;
    current->link = NULL;
    if (head == NULL)
    {
        head = current;
    }
    else
    {
        while (temp->link != NULL)
            temp = temp->link;

        temp->link = current;
    }
    return head;
}

void display(ll *head)
{

    ll *temp = head;
    while (temp != NULL)
    {
        printf(""%d "", temp->data);
        temp = temp->link;
    }
}

ll *split_list(ll *head, int size)
{
    int current_pos = 0;
    ll *temp = head;
    if (size % 2 == 0)
        size = (size / 2) - 1;
    else
        size = size / 2;
    while (current_pos < size)
    {
        temp = temp->link;
        current_pos++;
    }
    ll *current = temp->link;
    temp->link = NULL;
    return current;
}

int main()
{
    ll *head = NULL;
    int n;
    scanf(""%d"", &n);
    for (int i = 0; i < n; i++)
    {
        int info;
        scanf(""%d"", &info);
        head = input(head, info);
    }
    ll *split = split_list(head, n);
    display(head);
        printf(""\n"");
    display(split);
}
"
22730639,PES1UG22AM152,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

typedef struct ListNode ListNode;

ListNode* add_reversed_linked_lists(ListNode* l1, ListNode* l2) {
    ListNode* dummy_head = (ListNode*)malloc(sizeof(ListNode));
    dummy_head->val = 0;
    dummy_head->next = NULL;
    
    ListNode* current = dummy_head;
    int carry = 0;
    
    while (l1 != NULL || l2 != NULL || carry != 0) {
        int val1 = (l1 != NULL) ? l1->val : 0;
        int val2 = (l2 != NULL) ? l2->val : 0;
        int total = val1 + val2 + carry;
        
        carry = total / 10;
        int digit = total % 10;
        
        ListNode* new_node = (ListNode*)malloc(sizeof(ListNode));
        new_node->val = digit;
        new_node->next = NULL;
        
        current->next = new_node;
        current = current->next;
        
        if (l1 != NULL) l1 = l1->next;
        if (l2 != NULL) l2 = l2->next;
    }
    
    ListNode* result = dummy_head->next;
    free(dummy_head);
    return result;
}

ListNode* create_linked_list(int* digits, int num_digits) {
    ListNode* dummy_head = (ListNode*)malloc(sizeof(ListNode));
    dummy_head->val = 0;
    dummy_head->next = NULL;
    ListNode* current = dummy_head;
    
    for (int i = 0; i < num_digits; ++i) {
        ListNode* new_node = (ListNode*)malloc(sizeof(ListNode));
        new_node->val = digits[i];
        new_node->next = NULL;
        
        current->next = new_node;
        current = current->next;
    }
    
    ListNode* result = dummy_head->next;
    free(dummy_head);
    return result;
}

void print_linked_list(ListNode* node) {
    while (node != NULL) {
        printf(""%d "", node->val);
        node = node->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);
    
    int digits1[n1], digits2[n2];
    for (int i = 0; i < n1; ++i) {
        scanf(""%d"", &digits1[i]);
    }
    for (int i = 0; i < n2; ++i) {
        scanf(""%d"", &digits2[i]);
    }
    
    ListNode* list1 = create_linked_list(digits1, n1);
    ListNode* list2 = create_linked_list(digits2, n2);
    
    ListNode* result = add_reversed_linked_lists(list1, list2);
    
    print_linked_list(result);
    
    return 0;
}

"
22732093,PES1202203570,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct DigitNode {
    int digit;
    struct DigitNode* next;
};

void insertDigit(struct DigitNode** head, int digit) {
    struct DigitNode* newDigitNode = (struct DigitNode*)malloc(sizeof(struct DigitNode));
    newDigitNode->digit = digit;
    newDigitNode->next = NULL;

    if (*head == NULL) {
        *head = newDigitNode;
    } else {
        struct DigitNode* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newDigitNode;
    }
}

struct DigitNode* addNumbers(struct DigitNode* num1, struct DigitNode* num2) {
    struct DigitNode* result = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->digit;
            num1 = num1->next;
        }

        if (num2 != NULL) {
            sum += num2->digit;
            num2 = num2->next;
        }
        carry = sum / 10;
        sum %= 10;
        insertDigit(&result, sum);
    }
    return result;
}

void printDigits(struct DigitNode* head) {
    struct DigitNode* current = head;
    while (current != NULL) {
        printf(""%d "", current->digit);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int length1, length2;
    scanf(""%d %d"", &length1, &length2);

    struct DigitNode* num1List = NULL;
    struct DigitNode* num2List = NULL;

    for (int i = 0; i < length1; i++) {
        int digit;
        scanf(""%d"", &digit);
        insertDigit(&num1List, digit);
    }

    for (int i = 0; i < length2; i++) {
        int digit;
        scanf(""%d"", &digit);
        insertDigit(&num2List, digit);
    }

    struct DigitNode* result = addNumbers(num1List, num2List);
    printDigits(result);

    return 0;
}"
22822651,pes1202203501,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}"
22822651,pes1202203501,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        return 0;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int data = temp->data;
    free(temp);
    return data;
}

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp = NULL;
    int carry = 0;

    while (list1 || list2 || carry) {
        int sum = carry + pop(&list1) + pop(&list2);
        carry = sum / 10;
        int value = sum % 10;
        push(&result, value);
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list1, value);
    }

    for (int i = 0; i < n2; ++i) {
        int value;
        scanf(""%d"", &value);
        push(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    return 0;
}"
22822779,PES1202203486,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}
"
22822779,PES1202203486,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

typedef struct ListNode ListNode;

ListNode* add_linked_lists(ListNode* l1, ListNode* l2) {
    ListNode* dummy = (ListNode*)malloc(sizeof(ListNode));
    ListNode* current = dummy;
    int carry = 0;

    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->val : 0;
        int val2 = l2 ? l2->val : 0;

        int total = val1 + val2 + carry;
        carry = total / 10;

        current->next = (ListNode*)malloc(sizeof(ListNode));
        current = current->next;
        current->val = total % 10;
        current->next = NULL;

        if (l1) {
            l1 = l1->next;
        }
        if (l2) {
            l2 = l2->next;
        }
    }

    return dummy->next;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    ListNode* l1 = NULL;
    ListNode* current1 = l1;
    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);

        ListNode* new_node = (ListNode*)malloc(sizeof(ListNode));
        new_node->val = digit;
        new_node->next = NULL;

        if (!l1) {
            l1 = new_node;
            current1 = l1;
        } else {
            current1->next = new_node;
            current1 = current1->next;
        }
    }

    ListNode* l2 = NULL;
    ListNode* current2 = l2;
    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);

        ListNode* new_node = (ListNode*)malloc(sizeof(ListNode));
        new_node->val = digit;
        new_node->next = NULL;

        if (!l2) {
            l2 = new_node;
            current2 = l2;
        } else {
            current2->next = new_node;
            current2 = current2->next;
        }
    }

    ListNode* result = add_linked_lists(l1, l2);

    while (result) {
        printf(""%d "", result->val);
        ListNode* temp = result;
        result = result->next;
        free(temp);
    }

    // Free allocated memory for input linked lists
    while (l1) {
        ListNode* temp = l1;
        l1 = l1->next;
        free(temp);
    }
    while (l2) {
        ListNode* temp = l2;
        l2 = l2->next;
        free(temp);
    }

    return 0;
}
"
22823377,sahanachandrash3,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

void splitList(struct Node* source, struct Node** front, struct Node** back) {
    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *front = source;
    *back = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* frontList = NULL;
    struct Node* backList = NULL;

    splitList(head, &frontList, &backList);

    printList(frontList);
    printList(backList);

    return 0;
}"
22823519,PES1UG22AM922,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct LinkedList
{
    int data;
    struct LinkedList *link;
} ll;

ll *input(ll *head, int info)
{
    ll *temp = head;
    ll *current = (ll *)malloc(sizeof(ll));
    current->data = info;
    current->link = NULL;
    if (head == NULL)
    {
        head = current;
    }
    else
    {
        while (temp->link != NULL)
            temp = temp->link;

        temp->link = current;
    }
    return head;
}
void display(ll *head)
{

    ll *temp = head;
    while (temp != NULL)
    {
        printf(""%d "", temp->data);
        temp = temp->link;
    }
}

ll *split_list(ll *head, int size)
{
    int current_pos = 0;
    ll *temp = head;
    if (size % 2 == 0)
        size = (size / 2) - 1;
    else
        size = size / 2;
    while (current_pos < size)
    {
        temp = temp->link;
        current_pos++;
    }
    ll *current = temp->link;
    temp->link = NULL;
    return current;
}
int main()
{
    ll *head = NULL;
    int n;
    scanf(""%d"", &n);
    for (int i = 0; i < n; i++)
    {
        int info;
        scanf(""%d"", &info);
        head = input(head, info);
    }
    ll *split = split_list(head, n);
    display(head);
        printf(""\n"");
    display(split);
}"
22823519,PES1UG22AM922,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

// Definition for a linked list node
struct ListNode {
    int value;
    struct ListNode* next;
};

// Function to add two linked lists representing reversed-digit numbers
struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy_head = (struct ListNode*)malloc(sizeof(struct ListNode));
    dummy_head->next = NULL;
    struct ListNode* current = dummy_head;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry) {
        int digit1 = (l1 != NULL) ? l1->value : 0;
        int digit2 = (l2 != NULL) ? l2->value : 0;

        int total_sum = digit1 + digit2 + carry;
        carry = total_sum / 10;

        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current->next->value = total_sum % 10;
        current->next->next = NULL;
        current = current->next;

        if (l1 != NULL)
            l1 = l1->next;
        if (l2 != NULL)
            l2 = l2->next;
    }

    struct ListNode* result = dummy_head->next;
    free(dummy_head);
    return result;
}

// Function to print a linked list
void print_linked_list(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d "", current->value);
        current = current->next;
    }
    printf(""\n"");
}

// Function to free memory of a linked list
void free_linked_list(struct ListNode* head) {
    while (head != NULL) {
        struct ListNode* temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    int n, m;
    if (scanf(""%d %d"", &n, &m) != 2 || n < 0 || m < 0) {
        printf(""Invalid input\n"");
        return 1;
    }

    // Create linked list for the first number
    struct ListNode* l1 = NULL;
    struct ListNode* current1 = NULL;
    for (int i = 0; i < n; i++) {
        int digit;
        if (scanf(""%d"", &digit) != 1 || digit < 0 || digit > 9) {
            continue; // Skip invalid input
        }
        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = digit;
        new_node->next = NULL;
        if (l1 == NULL) {
            l1 = new_node;
            current1 = l1;
        } else {
            current1->next = new_node;
            current1 = current1->next;
        }
    }

    // Create linked list for the second number
    struct ListNode* l2 = NULL;
    struct ListNode* current2 = NULL;
    for (int i = 0; i < m; i++) {
        int digit;
        if (scanf(""%d"", &digit) != 1 || digit < 0 || digit > 9) {
            continue; // Skip invalid input
        }
        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = digit;
        new_node->next = NULL;
        if (l2 == NULL) {
            l2 = new_node;
            current2 = l2;
        } else {
            current2->next = new_node;
            current2 = current2->next;
        }
    }

    // Add linked lists
    struct ListNode* result = add_linked_lists(l1, l2);

    // Print the result linked list
    print_linked_list(result);

    // Free memory
    free_linked_list(l1);
    free_linked_list(l2);
    free_linked_list(result);

    return 0;
}
"
22823569,pes1202203499,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to find the midpoint of the linked list using fast pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head->next;
    
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

// Function to split the linked list into two parts at the given node
void splitLinkedList(struct Node* midpoint, struct Node** firstHalf, struct Node** secondHalf) {
    if (midpoint == NULL) {
        return;
    }
    
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}


// Function to print the elements of a linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }
    
    struct Node* midpoint = findMidpoint(head);
    struct Node* firstHalf = head;
    struct Node* secondHalf = NULL;
    
    splitLinkedList(midpoint, &firstHalf, &secondHalf);
    
    printList(firstHalf);
    printList(secondHalf);
    
    return 0;
}

"
22823569,pes1202203499,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;
    
    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        
        if (l1 != NULL) {
            sum += l1->data;
            l1 = l1->next;
        }
        
        if (l2 != NULL) {
            sum += l2->data;
            l2 = l2->next;
        }
        
        carry = sum / 10;
        sum = sum % 10;
        
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = sum;
        newNode->next = NULL;
        
        if (result == NULL) {
            result = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }
    
    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);
    
    struct Node* l1 = NULL;
    struct Node* l2 = NULL;
    
    for (int i = 0; i < n1; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&l1, value);
    }
    
    for (int i = 0; i < n2; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&l2, value);
    }
    
    struct Node* result = addLists(l1, l2);
    printList(result);
    
    // Free allocated memory
    while (result != NULL) {
        struct Node* temp = result;
        result = result->next;
        free(temp);
    }
    
    return 0;
}
"
22823727,PES1UG22AM920,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

void insertEnd(Node** head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}


Node* findMidpoint(Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    Node* slow = head;
    Node* fast = head;

    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}


void splitList(Node* head, Node** firstHalf, Node** secondHalf) {
    Node* midpoint = findMidpoint(head);
    *firstHalf = head;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}


void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    Node* firstHalf = NULL;
    Node* secondHalf = NULL;

    splitList(head, &firstHalf, &secondHalf);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}
"
22823727,PES1UG22AM920,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertEnd(Node* head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

Node* addReversedLists(Node* list1, Node* list2) {
    Node* result = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum = sum % 10;
        result = insertEnd(result, sum);
    }

    if (carry > 0) {
        result = insertEnd(result, carry);
    }

    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    Node* list1 = NULL;
    Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        list1 = insertEnd(list1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        list2 = insertEnd(list2, digit);
    }

    Node* result = addReversedLists(list1, list2);
    printList(result);

    return 0;
}
"