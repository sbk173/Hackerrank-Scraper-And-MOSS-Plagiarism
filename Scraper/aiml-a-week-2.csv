studentId,studentUserName,challenge,score,code
12261546,sutejask,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node{
    int val;
    struct Node* next;
}Node;

void reverse(Node** head){
    Node* current = *head;
    if(current == NULL) return;
    Node* prev = NULL;
    Node* next = current->next;

    while(next!=NULL){
        current->next = prev;
        prev = current;
        current = next;
        next = next->next;
    }
    current->next = prev;
    (*head) = current;

}

int main(){
    int n,x;
    scanf(""%d"",&n);
    Node* head = NULL;
    Node* copy = NULL;
    for(int i=0;i<n;i++){
        scanf(""%d"",&x);
        Node* temp = malloc(sizeof(Node));
        temp->val = x;
        if(copy == NULL){
            head = temp;
            copy = temp;
        }
        else{
            copy->next = temp;
            copy = copy->next;
        }
    }

    reverse(&head);
    copy = head;
    while(copy!=NULL){
        printf(""%d"",copy->val);
        copy = copy->next;
    }
    return 0;
}
"
18914478,PES1UG22AM038,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node* next;
}NODE;

NODE* reverse(NODE* head){
    NODE* prev =NULL;
    NODE* curr = head;
    NODE* next = NULL;
    while(curr!=NULL){
        next = curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    return prev;
}

NODE* createNode(int data){
    NODE* newnode = (NODE*)malloc(sizeof(NODE));
    newnode->data = data;
    return newnode;
}
NODE* insertfront(NODE* head,int data){
    NODE* newnode = createNode(data);
    newnode->next = head;
    return newnode;
}

NODE* insert(NODE* head,int data){
    if(head==NULL){
        head = insertfront(head,data);
        return head;
    }
    else{
    NODE* temp=head;
    while(head->next!=NULL){
        head=head->next;
    }
    NODE* newnode = createNode(data);
    head->next = newnode;
    return temp;
    }
}

void display(NODE* head){
    while(head!=NULL){
        printf(""%d"",head->data);
        head=head->next;
    }
}

int main() {
    int num,data;
    NODE* head = NULL;
    scanf(""%d"",&num);
    if(num>0){
    for(int i=0;i<num;i++){
        scanf(""%d"",&data);
        head = insert(head,data);
    }
    NODE* new_head= reverse(head);
    display(new_head);
    return 0;
    }
}
"
18914478,PES1UG22AM038,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertEnd(Node* head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

Node* addReversedLists(Node* list1, Node* list2) {
    Node* result = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum = sum % 10;
        result = insertEnd(result, sum);
    }

    if (carry > 0) {
        result = insertEnd(result, carry);
    }

    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    Node* list1 = NULL;
    Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        list1 = insertEnd(list1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        list2 = insertEnd(list2, digit);
    }

    Node* result = addReversedLists(list1, list2);
    printList(result);

    return 0;
}"
19004019,PES1UG22AM022,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}
void insertback(struct Node **head, int ele){
    if(*head == NULL){
        *head = (struct Node*)malloc(sizeof(struct Node));
        (*head)->data = ele;
        (*head)->next = NULL;
    }
    else{
        struct Node* newhead = (struct Node*)malloc(sizeof(struct Node));
        newhead->data = ele;
        newhead->next = NULL;
        struct Node* temp = *head;
        while(temp->next!=NULL){
            temp = temp->next;
        }
        temp->next = newhead;
    }
}

void displayList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    struct Node* head = NULL;
    int n,ele;
    scanf(""%d"",&n);
    for(int i =0;i<n;i++){
        scanf(""%d"",&ele);
        insertback(&head,ele);
        }
    


    struct Node* reversedHead = reverseLinkedList(head);

    displayList(reversedHead);

    struct Node* current = reversedHead;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
"
19004019,PES1UG22AM022,ADD TWO NUMBERS 104,15,"#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>



typedef struct Node 
{
    int data;
    struct Node* next;
} Node;

Node* add_linked_lists(Node* l1, Node* l2) 
{
    Node* dummy=(Node*)malloc(sizeof(Node));
    dummy->data= 0;
    dummy->next = NULL;
    Node* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->data : 0;
        int val2 = l2 ? l2->data : 0;
        
        int total = val1 + val2 + carry;
        carry = total / 10;
        int digit = total % 10;
        
        Node* new_node = (Node*)malloc(sizeof(Node));
        new_node->data = digit;
        new_node->next = NULL;
        
        current->next = new_node;
        current = current->next;
        
        if (l1) {
            l1 = l1->next;
        }
        if (l2) {
            l2 = l2->next;
        }
    }
    
    Node* result_head = dummy->next;
    free(dummy);
    return result_head;
}

void print_linked_list(Node* head) {
    Node* current = head;
    while (current) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);
    
    Node* head1 = NULL;
    for (int i = 0; i < n1; ++i) {
        int digit;
        scanf(""%d"", &digit);
        Node* new_node = (Node*)malloc(sizeof(Node));
        new_node->data = digit;
        new_node->next = head1;
        head1 = new_node;
    }
    Node* reversed_head1 = NULL;
    Node* current1 = head1;
    while (current1) {
        Node* next = current1->next;
        current1->next = reversed_head1;
        reversed_head1 = current1;
        current1 = next;
    }
    
    Node* head2 = NULL;
    for (int i = 0; i < n2; ++i) {
        int digit;
        scanf(""%d"", &digit);
        Node* new_node = (Node*)malloc(sizeof(Node));
        new_node->data = digit;
        new_node->next = head2;
        head2 = new_node;
    }
    Node* reversed_head2 = NULL;
    Node* current2 = head2;
    while (current2) {
        Node* next = current2->next;
        current2->next = reversed_head2;
        reversed_head2 = current2;
        current2 = next;
    }
    
    Node* result_head = add_linked_lists(reversed_head1, reversed_head2);
    
    print_linked_list(result_head);
    
    return 0;
}
    
"
19438079,moblie,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node * link;
}NODE;

NODE * add_to_list (NODE * head,int val) {
    NODE * new_node = malloc(sizeof(NODE));
    new_node->data = val;
    new_node->link = NULL;
    
    if (head == NULL) {
        head = new_node;
    }
    
    else {
        NODE * hold = head;
        while (hold->link != NULL) {
            hold = hold->link;
        }
        
        hold->link = new_node;
    }
    
    return head;
}

void display_list (NODE * head) {
    if (head != NULL) {
        NODE * traverse = head;
        while (traverse != NULL) {
            printf(""%d"", traverse->data);
            traverse = traverse->link;
        }
    }
}

NODE * reverse_list (NODE * head) {
    NODE * prev = NULL;
    NODE * curr = head;
    NODE * next = NULL;
    
    while (curr != NULL) {
        next = curr->link;
        curr->link = prev;
        prev = curr;
        curr = next;
    }
    
    return prev;
}

int main() {
    
    NODE * head = malloc(sizeof(NODE));
    head = NULL;
        
    int count;
    scanf(""%d"", &count);
    int count_new = fabs(count);
    
    for (int i = 1; i <= count_new; i++) {
        int value;
        scanf(""%d"", &value);
        head = add_to_list(head, value);
    }
    
    head = reverse_list(head);
    display_list(head);
    
    return 0;
}
"
19631515,PES1UG22AM005,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* reverse_linked_list(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    struct ListNode* next_node;

    while (current != NULL) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }

    return prev;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct ListNode* head = NULL;
    struct ListNode* current = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = value;
        new_node->next = NULL;

        if (!head) {
            head = new_node;
            current = head;
        } else {
            current->next = new_node;
            current = current->next;
        }
    }

    head = reverse_linked_list(head);


    current = head;
    while (current) {
        printf(""%d"", current->value);
        current = current->next;
    }

    return 0;
}"
19631515,PES1UG22AM005,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}"
20091562,PES1UG22AM052,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode = NULL;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        struct Node* newNode = createNode(value);
        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    // Free allocated memory
    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}
"
20091562,PES1UG22AM052,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include<string.h>
#include<math.h>
#include <stdlib.h>


struct node {
    int val;
    struct node *next;
};

struct node* add_linked_lists(struct node* l1, struct node* l2) {
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    struct node* current = temp;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct node* result = temp->next;
    free(temp);
    return result;
}


struct node* create_linked_list(int* digits, int num_digits) {
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    struct node* current = temp;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return temp->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);
    if(num_digits_l1<0 || num_digits_l2>1000){
        printf(""Invalid\n"");
        return 1;
    }

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
        
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct node* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct node* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct node* result = add_linked_lists(l1, l2);

    
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}"
20545444,PES1UG22AM012,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;
    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    head = reverseLinkedList(head);

    printLinkedList(head);

    current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}


"
20545444,PES1UG22AM012,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertEnd(Node* head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

Node* addReversedLists(Node* list1, Node* list2) {
    Node* result = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum = sum % 10;
        result = insertEnd(result, sum);
    }

    if (carry > 0) {
        result = insertEnd(result, carry);
    }

    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    Node* list1 = NULL;
    Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        list1 = insertEnd(list1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        list2 = insertEnd(list2, digit);
    }

    Node* result = addReversedLists(list1, list2);
    printList(result);

    return 0;
}"
21279090,PES1UG22AM026,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node * link;
}nodet;

nodet * add_to_list (nodet * head,int val) {
    nodet * new_node = malloc(sizeof(nodet));
    new_node->data = val;
    new_node->link = NULL;
    
    if (head == NULL) {
        head = new_node;
    }
    
    else {
        nodet * hold = head;
        while (hold->link != NULL) {
            hold = hold->link;
        }
        
        hold->link = new_node;
    }
    
    return head;
}

void display_list (nodet * head) {
    if (head != NULL) {
        nodet * traverse = head;
        while (traverse != NULL) {
            printf(""%d"", traverse->data);
            traverse = traverse->link;
        }
    }
}

nodet * reverse_list (nodet * head) {
    nodet * prev = NULL;
    nodet * curr = head;
    nodet * next = NULL;
    
    while (curr != NULL) {
        next = curr->link;
        curr->link = prev;
        prev = curr;
        curr = next;
    }
    
    return prev;
}

int main() {
    
    nodet * head = malloc(sizeof(nodet));
    head = NULL;
        
    int count;
    scanf(""%d"", &count);
    int count_new = fabs(count);
    
    for (int i = 1; i <= count_new; i++) {
        int value;
        scanf(""%d"", &value);
        head = add_to_list(head, value);
    }
    
    head = reverse_list(head);
    display_list(head);
    
    return 0;
}
"
21279090,PES1UG22AM026,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node * link;
}nodet;

nodet * add_to_list (nodet * head,int val) {
    nodet * new_node = malloc(sizeof(nodet));
    new_node->data = val;
    new_node->link = NULL;
    
    if (head == NULL) {
        head = new_node;
    }
    
    else {
        nodet * hold = head;
        while (hold->link != NULL) {
            hold = hold->link;
        }
        
        hold->link = new_node;
    }
    
    return head;
}



int operations (nodet * head) {
    int weight = 1;
    int num = 0;
    if (head != NULL) {
        nodet * traverse = head;
        while (traverse != NULL) {
            num = num + traverse->data*weight;
            traverse = traverse->link;
            weight = weight*10;
        }
    }
    
    return num;
}

void rev(int val) {
    while (val != 0) {
        printf(""%d "", val%10);
        val = val / 10;
    }
}


int main() {
    
    nodet * head1 = malloc(sizeof(nodet));
    head1 = NULL;
    
    nodet * head2 = malloc(sizeof(nodet));
    head2 = NULL;

    int count1;
    int count2;
    scanf(""%d"", &count1);
    scanf(""%d"", &count2);
    
    for (int i = 1; i <= count1; i++) {
        int val;
        scanf(""%d"", &val);
        head1 = add_to_list(head1,val);
    }
    
    for (int i = 1; i <= count2; i++) {
        int val;
        scanf(""%d"", &val);
        head2 = add_to_list(head2,val);
    }
    
    int num1 = operations(head1);
    int num2 = operations(head2);
    int res = num1 + num2;
    rev(res);
    return 0;
}
"
21830747,PES1UG22AM025,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node
{
    int data;
    struct Node* next;
};

typedef struct Node Node;

Node* createNode(int data)
{
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void append(Node** head, int data)
{
    Node* newNode = createNode(data);
    if (*head == NULL)
    {
        *head = newNode;
    }
    else
    {
        Node* present = *head;
        while (present->next != NULL)
        {
            present = present->next;
        }
        present->next = newNode;
    }
}

void reverseList(Node** head)
{
    Node* prev = NULL;
    Node* present = *head;
    Node* nextNode;
    
    while (present != NULL)
    {
        nextNode = present->next;
        present->next = prev;
        prev = present;
        present = nextNode;
    }
    
    *head = prev;
}

void printList(Node* head)
{
    Node* present = head;
    while (present != NULL)
    {
        printf(""%d"", present->data);
        present = present->next;
    }
}

int main()
{
    int no_of_nodes;
    scanf(""%d"", &no_of_nodes);
    
    Node* head = NULL;
    
    for (int i = 0; i < no_of_nodes; i++)
    {
        int value;
        scanf(""%d"", &value);
        append(&head, value);
    }
    
    reverseList(&head);
    printList(head);
    
    return 0;
}
    

"
21830747,PES1UG22AM025,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

// Definition of a Node
struct Node {
    int value;
    struct Node* next;
};

// Function to add two linked lists
struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum = sum % 10;

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

// Function to print the linked list with separation
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;
    struct Node* current;

    // Input first number
    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num1 == NULL) {
            num1 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    // Input second number
    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num2 == NULL) {
            num2 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);

    // Print the sum as a linked list with separation
    printLinkedList(sum);

    // Free allocated memory
    struct Node* temp;
    while (num1 != NULL) {
        temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}




"
21926508,PES1UG22AM056,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node * link;
}nodet;

nodet * add_list (nodet * head,int val) {
    nodet * new_node = malloc(sizeof(nodet));
    new_node->data = val;
    new_node->link = NULL;
    
    if (head == NULL) {
        head = new_node;
    }
    
    else {
        nodet * hold = head;
        while (hold->link != NULL) {
            hold = hold->link;
        }
        
        hold->link = new_node;
    }
    
    return head;
}

void display_list (nodet * head) {
    if (head != NULL) {
        nodet * traverse = head;
        while (traverse != NULL) {
            printf(""%d"", traverse->data);
            traverse = traverse->link;
        }
    }
}

nodet * reverse_list (nodet * head) {
    nodet * prev = NULL;
    nodet * curr = head;
    nodet * next = NULL;
    
    while (curr != NULL) {
        next = curr->link;
        curr->link = prev;
        prev = curr;
        curr = next;
    }
    
    return prev;
}

int main() {
    
    nodet * head = malloc(sizeof(nodet));
    head = NULL;
        
    int count;
    scanf(""%d"", &count);
    int count_new = fabs(count);
    
    for (int i = 1; i <= count_new; i++) {
        int value;
        scanf(""%d"", &value);
        head = add_list(head, value);
    }
    
    head = reverse_list(head);
    display_list(head);
    
    return 0;
}

"
21926508,PES1UG22AM056,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node * link;
}nodet;

nodet * add_to_list (nodet * head,int val) {
    nodet * new_node = malloc(sizeof(nodet));
    new_node->data = val;
    new_node->link = NULL;
    
    if (head == NULL) {
        head = new_node;
    }
    
    else {
        nodet * hold = head;
        while (hold->link != NULL) {
            hold = hold->link;
        }
        
        hold->link = new_node;
    }
    
    return head;
}



int operations (nodet * head) {
    int weight = 1;
    int num = 0;
    if (head != NULL) {
        nodet * traverse = head;
        while (traverse != NULL) {
            num = num + traverse->data*weight;
            traverse = traverse->link;
            weight = weight*10;
        }
    }
    
    return num;
}

void rev(int val) {
    while (val != 0) {
        printf(""%d "", val%10);
        val = val / 10;
    }
}


int main() {
    
    nodet * head1 = malloc(sizeof(nodet));
    head1 = NULL;
    
    nodet * head2 = malloc(sizeof(nodet));
    head2 = NULL;

    int count1;
    int count2;
    scanf(""%d"", &count1);
    scanf(""%d"", &count2);
    
    for (int i = 1; i <= count1; i++) {
        int val;
        scanf(""%d"", &val);
        head1 = add_to_list(head1,val);
    }
    
    for (int i = 1; i <= count2; i++) {
        int val;
        scanf(""%d"", &val);
        head2 = add_to_list(head2,val);
    }
    
    int num1 = operations(head1);
    int num2 = operations(head2);
    int res = num1 + num2;
    rev(res);
    return 0;
}"
22620834,PES1UG22AM053,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;
    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }
    head = reverseLinkedList(head);
    printLinkedList(head);
    current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22620834,PES1UG22AM053,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include<string.h>
#include<math.h>
#include <stdlib.h>


struct node {
    int val;
    struct node *next;
};

struct node* add_linked_lists(struct node* l1, struct node* l2) {
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    struct node* current = temp;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct node* result = temp->next;
    free(temp);
    return result;
}


struct node* create_linked_list(int* digits, int num_digits) {
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    struct node* current = temp;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return temp->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);
    if(num_digits_l1<0 || num_digits_l2>1000){
        printf(""Invalid\n"");
        return 1;
    }

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
        
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct node* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct node* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct node* result = add_linked_lists(l1, l2);

    
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}"
22716954,1PES1UG22AM0321,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d"", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        struct Node* newNode = createNode(value);

        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    
    head = reverseLinkedList(head);

    printLinkedList(head);

    return 0;
}
"
22716954,1PES1UG22AM0321,ADD TWO NUMBERS 104,15,"

#include <stdio.h>
#include <stdlib.h>

// Definition of a Node
struct Node {
    int value;
    struct Node* next;
};

// Function to add two linked lists
struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum = sum % 10;

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

// Function to print the linked list with separation
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;
    struct Node* current;

    // Input first number
    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num1 == NULL) {
            num1 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    // Input second number
    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num2 == NULL) {
            num2 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);

    // Print the sum as a linked list with separation
    printLinkedList(sum);

    // Free allocated memory
    struct Node* temp;
    while (num1 != NULL) {
        temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}
"
22729252,PES1UG22AM040,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

// Definition of a Node
struct Node {
    int value;
    struct Node* next;
};

// Function to reverse the linked list
struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

int main() {
    int num_nodes;
    scanf(""%d"", &num_nodes);

    struct Node* head = NULL;
    struct Node* current;

    for (int i = 0; i < num_nodes; ++i) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    head = reverseLinkedList(head);

    // Print the reversed linked list without separation
    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }

    // Free allocated memory
    struct Node* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}"
22729252,PES1UG22AM040,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

// Definition of a Node
struct Node {
    int value;
    struct Node* next;
};

// Function to add two linked lists
struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum = sum % 10;

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

// Function to print the linked list with separation
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;
    struct Node* current;

    // Input first number
    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num1 == NULL) {
            num1 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    // Input second number
    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num2 == NULL) {
            num2 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);

    // Print the sum as a linked list with separation
    printLinkedList(sum);

    // Free allocated memory
    struct Node* temp;
    while (num1 != NULL) {
        temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}"
22729276,PES1UG22AM002,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

// Definition of a Node
struct Node {
    int value;
    struct Node* next;
};

// Function to reverse the linked list
struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

int main() {
    int num_nodes;
    scanf(""%d"", &num_nodes);

    struct Node* head = NULL;
    struct Node* current;

    for (int i = 0; i < num_nodes; ++i) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    head = reverseLinkedList(head);

    // Print the reversed linked list without separation
    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }

    // Free allocated memory
    struct Node* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}"
22729276,PES1UG22AM002,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

// Definition of a Node
struct Node {
    int value;
    struct Node* next;
};

// Function to add two linked lists
struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum = sum % 10;

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

// Function to print the linked list with separation
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;
    struct Node* current;

    // Input first number
    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num1 == NULL) {
            num1 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    // Input second number
    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num2 == NULL) {
            num2 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);

    // Print the sum as a linked list with separation
    printLinkedList(sum);

    // Free allocated memory
    struct Node* temp;
    while (num1 != NULL) {
        temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}"
22729680,PES1UG22AM021,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

// Definition of a Node
struct Node {
int value;
struct Node* next;
};

// Function to reverse the linked list
struct Node* reverseLinkedList(struct Node* head) {
struct Node* prev = NULL;
struct Node* current = head;
struct Node* nextNode;

while (current != NULL) {
nextNode = current->next;
current->next = prev;
prev = current;
current = nextNode;
}

return prev;
}

int main() {
int num_nodes;
scanf(""%d"", &num_nodes);

struct Node* head = NULL;
struct Node* current;

for (int i = 0; i < num_nodes; ++i) {
int value;
scanf(""%d"", &value);

struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->value = value;
newNode->next = NULL;

if (head == NULL) {
head = newNode;
current = newNode;
} else {
current->next = newNode;
current = newNode;
}
}

head = reverseLinkedList(head);

// Print the reversed linked list without separation
while (head != NULL) {
printf(""%d"", head->value);
head = head->next;
}

// Free allocated memory
struct Node* temp;
while (head != NULL) {
temp = head;
head = head->next;
free(temp);
}

return 0;
}
"
22729680,PES1UG22AM021,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

// Definition of a Node
struct Node {
   int value;
   struct Node* next;
};

// Function to add two linked lists
struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
   struct Node* result = NULL;
   struct Node* current = NULL;
   int carry = 0;

   while (num1 != NULL || num2 != NULL || carry) {
       int sum = carry;
       if (num1 != NULL) {
           sum += num1->value;
           num1 = num1->next;
       }
       if (num2 != NULL) {
           sum += num2->value;
           num2 = num2->next;
       }

       carry = sum / 10;
       sum = sum % 10;

       struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
       newNode->value = sum;
       newNode->next = NULL;

       if (result == NULL) {
           result = newNode;
           current = newNode;
       } else {
           current->next = newNode;
           current = newNode;
       }
   }

   return result;
}

// Function to print the linked list with separation
void printLinkedList(struct Node* head) {
   struct Node* current = head;
   while (current != NULL) {
       printf(""%d"", current->value);
       if (current->next != NULL) {
           printf("" "");
       }
       current = current->next;
   }
   printf(""\n"");
}

int main() {
   int num_digits1, num_digits2;
   scanf(""%d %d"", &num_digits1, &num_digits2);

   struct Node* num1 = NULL;
   struct Node* num2 = NULL;
   struct Node* current;

   // Input first number
   for (int i = 0; i < num_digits1; ++i) {
       int digit;
       scanf(""%d"", &digit);

       struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
       newNode->value = digit;
       newNode->next = NULL;

       if (num1 == NULL) {
           num1 = newNode;
           current = newNode;
       } else {
           current->next = newNode;
           current = newNode;
       }
   }

   // Input second number
   for (int i = 0; i < num_digits2; ++i) {
       int digit;
       scanf(""%d"", &digit);

       struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
       newNode->value = digit;
       newNode->next = NULL;

       if (num2 == NULL) {
           num2 = newNode;
           current = newNode;
       } else {
           current->next = newNode;
           current = newNode;
       }
   }

   struct Node* sum = addLinkedLists(num1, num2);

   // Print the sum as a linked list with separation
   printLinkedList(sum);

   // Free allocated memory
   struct Node* temp;
   while (num1 != NULL) {
       temp = num1;
       num1 = num1->next;
       free(temp);
   }
   while (num2 != NULL) {
       temp = num2;
       num2 = num2->next;
       free(temp);
   }
   while (sum != NULL) {
       temp = sum;
       sum = sum->next;
       free(temp);
   }

   return 0;
}
"
22729849,PES1UG22AM004,Reversing a Linked List 1,3.75,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* add_linked_lists(struct ListNode* list1, struct ListNode* list2) {
    int carry = 0;
    struct ListNode* dummy_head = (struct ListNode*)malloc(sizeof(struct ListNode));
    dummy_head->next = NULL;
    struct ListNode* current = dummy_head;

    while (list1 || list2 || carry) {
        int value1 = list1 ? list1->value : 0;
        int value2 = list2 ? list2->value : 0;

        int total = value1 + value2 + carry;
        carry = total / 10;
        int digit = total % 10;

        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = digit;
        new_node->next = NULL;
        current->next = new_node;
        current = current->next;

        if (list1) {
            list1 = list1->next;
        }
        if (list2) {
            list2 = list2->next;
        }
    }

    return dummy_head->next;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct ListNode* list1 = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = value;
        new_node->next = list1;
        list1 = new_node;
    }

    struct ListNode* list2 = NULL;
    for (int i = 0; i < m; i++) {
        int value;
        scanf(""%d"", &value);
        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = value;
        new_node->next = list2;
        list2 = new_node;
    }

    struct ListNode* result_list = add_linked_lists(list1, list2);

    while (result_list) {
        printf(""%d "", result_list->value);
        result_list = result_list->next;
    }

    return 0;
}"
22729849,PES1UG22AM004,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertEnd(Node* head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

Node* addReversedLists(Node* list1, Node* list2) {
    Node* result = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum = sum % 10;
        result = insertEnd(result, sum);
    }

    if (carry > 0) {
        result = insertEnd(result, carry);
    }

    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    Node* list1 = NULL;
    Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        list1 = insertEnd(list1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        list2 = insertEnd(list2, digit);
    }

    Node* result = addReversedLists(list1, list2);
    printList(result);

    return 0;
}
"
22731859,PES1UG22AM049,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;
    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    // Reverse the linked list
    head = reverseLinkedList(head);

    // Print the reversed linked list
    printLinkedList(head);

    // Free allocated memory
    current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22731859,PES1UG22AM049,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node{
    int data;
    struct node* next;
};

void push(struct node** top, int data)
{
    struct node* newNode = (struct node*)malloc(sizeof(struct node));
    newNode->data=data;
    newNode->next=*top;
    *top=newNode;
}

int pop(struct node** top)
{
    if(*top==NULL){
        return 0;
    }
    struct node* temp=*top;
    *top=(*top)->next;
    int data=temp->data;
    free(temp);
    return data;
}

struct node* addLists(struct node* list1, struct node* list2){
    struct node* result=NULL;
  //struct node* temp=NULL;
    int carry=0;
    
    while(list1 || list2 || carry){
        int sum = carry + pop(&list2)+ pop(&list1);
        carry=sum/10;
        int value=sum%10;
        push(&result,value);
    }
    return result;
}

void printList(struct node* head){
    struct node* current = head;
    while(current!=NULL)
    {
        printf(""%d"",current->data);
        if(current->next){
            printf("" "");
        }
        current=current->next;
    }
    printf(""\n"");
}

int main()
{
    int n1,n2;
    scanf(""%d %d"",&n1,&n2);
    
    struct node* list1=NULL;
    struct node* list2=NULL;
    
    for(int i=0;i<n1;i++){
        int value;
        scanf(""%d"",&value);
        push(&list1,value);
        
    }
    for(int i=0;i<n2;i++){
        int value;
        scanf(""%d"",&value);
        push(&list2,value);
    }
    
    struct node* sumList = addLists(list1,list2);
    printList(sumList);
    return 0;
}"
22731909,PES1UG22AM055,Reversing a Linked List 1,15,"#include <stdio.h>

#include <stdlib.h>

struct Node {

    int value;

    struct Node* next;

};

struct Node* reverseLinkedList(struct Node* head) {

    struct Node* prev = NULL;

    struct Node* current = head;

    struct Node* nextNode;

    while (current != NULL) {

        nextNode = current->next;

        current->next = prev;

        prev = current;

        current = nextNode;

    }

    return prev;

}

void printLinkedList(struct Node* head) {

    struct Node* current = head;

    while (current != NULL) {

        printf(""%d"", current->value);

        current = current->next;

    }

}

int main() {

    int numNodes;

    scanf(""%d"", &numNodes);

    struct Node* head = NULL;

    struct Node* current = NULL;

    for (int i = 0; i < numNodes; i++) {

        int value;

        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

        newNode->value = value;

        newNode->next = NULL;

        if (head == NULL) {

            head = newNode;

            current = newNode;

        } else {

            current->next = newNode;

            current = newNode;

        }

    }

    // Reverse the linked list

    head = reverseLinkedList(head);

    // Print the reversed linked list

    printLinkedList(head);

    // Free allocated memory

    current = head;

    while (current != NULL) {

        struct Node* temp = current;

        current = current->next;

        free(temp);

    }

    return 0;

}"
22731909,PES1UG22AM055,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertEnd(Node* head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

Node* addReversedLists(Node* list1, Node* list2) {
    Node* result = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum = sum % 10;
        result = insertEnd(result, sum);
    }

    if (carry > 0) {
        result = insertEnd(result, carry);
    }

    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    Node* list1 = NULL;
    Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        list1 = insertEnd(list1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        list2 = insertEnd(list2, digit);
    }

    Node* result = addReversedLists(list1, list2);
    printList(result);

    return 0;
}
"
22731986,PES1UG22AM035,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;
    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    
    head = reverseLinkedList(head);

    
    printLinkedList(head);

    
    current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}

"
22731986,PES1UG22AM035,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertEnd(Node* head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

Node* addReversedLists(Node* list1, Node* list2) {
    Node* result = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum = sum % 10;
        result = insertEnd(result, sum);
    }

    if (carry > 0) {
        result = insertEnd(result, carry);
    }

    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    Node* list1 = NULL;
    Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        list1 = insertEnd(list1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        list2 = insertEnd(list2, digit);
    }

    Node* result = addReversedLists(list1, list2);
    printList(result);

    return 0;
}"
22732032,PES1UG22AM151,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;
    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    // Reverse the linked list
    head = reverseLinkedList(head);

    // Print the reversed linked list
    printLinkedList(head);

    // Free allocated memory
    current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
"
22732032,PES1UG22AM151,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};

void insertNode(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        
        if (num1 != NULL) {
            sum += num1->data;
            num1 = num1->next;
        }

        if (num2 != NULL) {
            sum += num2->data;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum %= 10;

        insertNode(&result, sum);
    }

    return result;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* num1 = NULL;
    for (int i = 0; i < n1; i++) {
        int value;
        scanf(""%d"", &value);
        insertNode(&num1, value);
    }

    struct Node* num2 = NULL;
    for (int i = 0; i < n2; i++) {
        int value;
        scanf(""%d"", &value);
        insertNode(&num2, value);
    }

    struct Node* result = addLinkedLists(num1, num2);
    printLinkedList(result);

    return 0;
}"
22732144,PES1UG22AM016,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node* next;
}Node;

Node* reverseList(Node* head){
    Node* next = NULL;
    Node* cur = head;
    Node* prev = NULL;
    
    while(cur){
        next = cur->next;
        cur->next = prev;
        prev = cur;
        cur = next;
    }
    return prev;
}
Node* create_node(int data){
    Node* new_node = (Node*) malloc(sizeof(Node));
    new_node->next = NULL;
    new_node->data = data;
    return new_node;
}

void display(Node* head){
    while(head){
        printf(""%d"",head->data);
        head = head->next;
    }
}

Node* createLinkedList(int n){
    Node* first = create_node(0);
    Node* firstp = first;
    while(n--){
        int data;
        scanf(""%d"",&data);
        Node* new_node = create_node(data);
        firstp->next = new_node;
        firstp = firstp->next;
    }
    first = first->next;
    return first;
}

int main() {
    int n;
    scanf(""%d"",&n);
    Node* head = createLinkedList(n);
    Node* rev = reverseList(head);
    display(rev);
     
    return 0;
}
"
22732144,PES1UG22AM016,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node* next;
}Node;

Node* reverseList(Node* head){
    Node* next = NULL;
    Node* cur = head;
    Node* prev = NULL;
    
    while(cur){
        next = cur->next;
        cur->next = prev;
        prev = cur;
        cur = next;
    }
    return prev;
}
Node* create_node(int data){
    Node* new_node = (Node*) malloc(sizeof(Node));
    new_node->next = NULL;
    new_node->data = data;
    return new_node;
}

void display(Node* head){
    while(head){
        printf(""%d "",head->data);
        head = head->next;
    }
}

Node* createLinkedList(int n){
    Node* first = create_node(0);
    Node* firstp = first;
    while(n--){
        int data;
        scanf(""%d"",&data);
        Node* new_node = create_node(data);
        firstp->next = new_node;
        firstp = firstp->next;
    }
    first = first->next;
    return first;
}




int main() {
    int n1;
    int n2;
    scanf(""%d"",&n1);
    scanf(""%d"",&n2);
    if(!n1 && !n2)
        return 0;
    if(!n1)
        printf(""%d"",n2);
    if(!n2)
        printf(""%d"",n1);
    
    Node* first = createLinkedList(n1);
    Node* second = createLinkedList(n2);
    
    Node* firstRev = reverseList(first);
    Node* secondRev = reverseList(second);
    int carry = 0;
    Node* ans = create_node(0);
    Node* ansp = ans;

    while(firstRev || secondRev){
        int sum = carry +( (firstRev) ? firstRev->data : 0 )+ ((secondRev) ? secondRev->data : 0);
        carry = (sum >= 10) ? 1 : 0;
        sum %= 10;
        Node* newNode = create_node(sum);
        ansp->next = newNode;
        ansp = ansp->next;
        if(firstRev)
            firstRev = firstRev->next;
        if(secondRev)
            secondRev = secondRev->next;
    }
    if(carry > 0)
        ansp->next = create_node(carry);
      display(ans->next);
    return 0;
}
"
22732159,PES1UG22AM028,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};


struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

int main() {
    int num_nodes;
    scanf(""%d"", &num_nodes);

    struct Node* head = NULL;
    struct Node* current;

    for (int i = 0; i < num_nodes; ++i) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    head = reverseLinkedList(head);

    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }

    struct Node* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}"
22732159,PES1UG22AM028,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct node {
    int value;
    struct node* next;
};


struct node* addLinkedLists(struct node* num1, struct node* num2) {
    struct node* result = NULL;
    struct node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum = sum % 10;

        struct node* newNode = (struct node*)malloc(sizeof(struct node));
        newNode->value = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}


void printLinkedList(struct node* head) {
    struct node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct node* num1 = NULL;
    struct node* num2 = NULL;
    struct node* current;

    
    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct node* newNode = (struct node*)malloc(sizeof(struct node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num1 == NULL) {
            num1 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    
    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct node* newNode = (struct node*)malloc(sizeof(struct node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num2 == NULL) {
            num2 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    struct node* sum = addLinkedLists(num1, num2);

    
    printLinkedList(sum);

    
    struct node* temp;
    while (num1 != NULL) {
        temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}"
22732180,PES1UG22AM048,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>


struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* reverse_linked_list(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    struct ListNode* next_node;

    while (current != NULL) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }

    return prev;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct ListNode* head = NULL;
    struct ListNode* current = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = value;
        new_node->next = NULL;

        if (!head) {
            head = new_node;
            current = head;
        } else {
            current->next = new_node;
            current = current->next;
        }
    }

    head = reverse_linked_list(head);

    current = head;
    while (current) {
        printf(""%d"", current->value);
        current = current->next;
    }

    return 0;
}"
22732180,PES1UG22AM048,ADD TWO NUMBERS 104,15,"



#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}"
22732191,PES1UG22AM044,Reversing a Linked List 1,15,undefined
22732191,PES1UG22AM044,ADD TWO NUMBERS 104,15,undefined
22732202,PES1UG22AM020,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node
{
    int data;
    struct Node* next;
};

typedef struct Node Node;

Node* createNode(int data)
{
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void append(Node** head, int data)
{
    Node* newNode = createNode(data);
    if (*head == NULL)
    {
        *head = newNode;
    }
    else
    {
        Node* present = *head;
        while (present->next != NULL)
        {
            present = present->next;
        }
        present->next = newNode;
    }
}

void reverseList(Node** head)
{
    Node* prev = NULL;
    Node* present = *head;
    Node* nextNode;
    
    while (present != NULL)
    {
        nextNode = present->next;
        present->next = prev;
        prev = present;
        present = nextNode;
    }
    
    *head = prev;
}

void printList(Node* head)
{
    Node* present = head;
    while (present != NULL)
    {
        printf(""%d"", present->data);
        present = present->next;
    }
}

int main()
{
    int no_of_nodes;
    scanf(""%d"", &no_of_nodes);
    
    Node* head = NULL;
    
    for (int i = 0; i < no_of_nodes; i++)
    {
        int value;
        scanf(""%d"", &value);
        append(&head, value);
    }
    
    reverseList(&head);
    printList(head);
    
    return 0;
}"
22732202,PES1UG22AM020,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

// Definition of a Node
struct Node {
    int value;
    struct Node* next;
};

// Function to add two linked lists
struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum = sum % 10;

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

// Function to print the linked list with separation
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;
    struct Node* current;

    // Input first number
    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num1 == NULL) {
            num1 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    // Input second number
    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num2 == NULL) {
            num2 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);

    // Print the sum as a linked list with separation
    printLinkedList(sum);

    // Free allocated memory
    struct Node* temp;
    while (num1 != NULL) {
        temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}
"
22732204,PES1UG22AM051,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
struct Node* insertNode(struct Node* head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = head;
    return newNode;
}
struct Node* reverse(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* q = head;
    struct Node* next = NULL;
    while (q != NULL) {
        next = q->next;
        q->next = prev;
        prev = q;
        q = next;
    }return prev;
}
void print(struct Node* head) {
    struct Node* q = head;
    while (q != NULL) {
        printf(""%d"", q->data);
        q = q->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        head = insertNode(head, data);
    } print(head);
    head = reverse(head);
   /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
"
22732204,PES1UG22AM051,ADD TWO NUMBERS 104,15,undefined
22732205,PES1UG22AM046,Reversing a Linked List 1,15,undefined
22732205,PES1UG22AM046,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* add_linked_lists(Node* l1, Node* l2) {
    Node* dummy = (Node*)malloc(sizeof(Node));
    dummy->data = 0;
    dummy->next = NULL;
    Node* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->data : 0;
        int val2 = l2 ? l2->data : 0;
        
        int total = val1 + val2 + carry;
        carry = total / 10;
        int digit = total % 10;
        
        Node* new_node = (Node*)malloc(sizeof(Node));
        new_node->data = digit;
        new_node->next = NULL;
        
        current->next = new_node;
        current = current->next;
        
        if (l1) {
            l1 = l1->next;
        }
        if (l2) {
            l2 = l2->next;
        }
    }
    
    Node* result_head = dummy->next;
    free(dummy);
    return result_head;
}

void print_linked_list(Node* head) {
    Node* current = head;
    while (current) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);
    
    Node* head1 = NULL;
    for (int i = 0; i < n1; ++i) {
        int digit;
        scanf(""%d"", &digit);
        Node* new_node = (Node*)malloc(sizeof(Node));
        new_node->data = digit;
        new_node->next = head1;
        head1 = new_node;
    }
    Node* reversed_head1 = NULL;
    Node* current1 = head1;
    while (current1) {
        Node* next = current1->next;
        current1->next = reversed_head1;
        reversed_head1 = current1;
        current1 = next;
    }
    
    Node* head2 = NULL;
    for (int i = 0; i < n2; ++i) {
        int digit;
        scanf(""%d"", &digit);
        Node* new_node = (Node*)malloc(sizeof(Node));
        new_node->data = digit;
        new_node->next = head2;
        head2 = new_node;
    }
    Node* reversed_head2 = NULL;
    Node* current2 = head2;
    while (current2) {
        Node* next = current2->next;
        current2->next = reversed_head2;
        reversed_head2 = current2;
        current2 = next;
    }
    
    Node* result_head = add_linked_lists(reversed_head1, reversed_head2);
    
    print_linked_list(result_head);
    
    return 0;
}
"
22732207,PES1UG22AM014,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* next;
};

void insert_end(struct node** p, int x);
void reverse(struct node** p);
void display(struct node* p);

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
    //create list
    struct node* first;
    first = NULL;
    //printf(""1 DONE\n""); //REMOVE
    
    //take input of no of values
    int n;
    scanf(""%d"", &n);
    //printf(""2 DONE\n""); //REMOVE
    
    //take node data elements, grow list
    int m;
    //display(first);
    int i;
    //printf(""3 DONE\n""); //REMOVE
    
    for (i = 0; i < n; i++) {
        scanf(""%d"", &m);
        insert_end(&first, m);
    }
    //display(first);

    //reverse list
    reverse(&first);

    //display reversed list
    display(first);

    return 0;
}

void insert_end(struct node** p, int x) {
    struct node *temp, *q;
    temp = (struct node*)malloc(sizeof(struct node));
    
    temp -> data = x;
    temp -> next = NULL;
    
    if (*p == NULL) 
        *p = temp;
    
    else {
        q = *p;
        while (q -> next != NULL) {
            q = q -> next;
        }
        q -> next = temp;
    }
}

void reverse(struct node** p) {
    struct node *cur, *prev, *temp;
    prev = NULL;
    cur = *p;
    
    while (cur != NULL) {
        temp = cur -> next;
        cur -> next = prev;
        prev = cur;
        cur = temp;
    }
    *p = prev;
}

void display(struct node* p) {
    struct node *q;
    q = p;
    if (p == NULL) {
        //printf(""List is empty\n"");
    }
    else {
        while (q != NULL) {
            printf(""%d"", q -> data);
            q = q -> next;
        }
    }
}"
22732207,PES1UG22AM014,ADD TWO NUMBERS 104,15,undefined
22732210,PES1UG22AM007,Reversing a Linked List 1,15,undefined
22732210,PES1UG22AM007,ADD TWO NUMBERS 104,15,undefined
22732211,PES1UG22AM039,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;
    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    // Reverse the linked list
    head = reverseLinkedList(head);

    // Print the reversed linked list
    printLinkedList(head);

    // Free allocated memory
    current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22732211,PES1UG22AM039,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertEnd(Node* head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

Node* addReversedLists(Node* list1, Node* list2) {
    Node* result = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum = sum % 10;
        result = insertEnd(result, sum);
    }

    if (carry > 0) {
        result = insertEnd(result, carry);
    }

    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    Node* list1 = NULL;
    Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        list1 = insertEnd(list1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        list2 = insertEnd(list2, digit);
    }

    Node* result = addReversedLists(list1, list2);
    printList(result);

    return 0;
}"
22732212,PES1UG22AM034,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);
    if (numNodes<0)
         numNodes=-numNodes;

    struct Node* head = NULL;
    struct Node* current = NULL;
    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d "", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    // Reverse the linked list
    head = reverseLinkedList(head);

    // Print the reversed linked list
    printLinkedList(head);

  
    

    return 0;
}"
22732212,PES1UG22AM034,ADD TWO NUMBERS 104,15,undefined
22732213,PES1UG22AM054,Reversing a Linked List 1,15,undefined
22732213,PES1UG22AM054,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>


struct ListNode {
    int value;
    struct ListNode* next;
};


struct ListNode* add(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* temp = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = temp;
    int carry = 0;

    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->value : 0;
        int val2 = l2 ? l2->value : 0;
        int total = val1 + val2 + carry;

        carry = total / 10;
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = total % 10;
        current->next = NULL;

        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }

    return temp->next;
}


struct ListNode* reverse_linked_list(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;

    while (current) {
        struct ListNode* next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }

    return prev;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);


    struct ListNode* head1 = NULL;
    struct ListNode* current1 = NULL;
    for (int i = 0; i < n; i++) {
        int digit;
        scanf(""%d"", &digit);

        if (!head1) {
            head1 = (struct ListNode*)malloc(sizeof(struct ListNode));
            head1->value = digit;
            head1->next = NULL;
            current1 = head1;
        } else {
            current1->next = (struct ListNode*)malloc(sizeof(struct ListNode));
            current1 = current1->next;
            current1->value = digit;
            current1->next = NULL;
        }
    }

    
    struct ListNode* head2 = NULL;
    struct ListNode* current2 = NULL;
    for (int i = 0; i < m; i++) {
        int digit;
        scanf(""%d"", &digit);

        if (!head2) {
            head2 = (struct ListNode*)malloc(sizeof(struct ListNode));
            head2->value = digit;
            head2->next = NULL;
            current2 = head2;
        } else {
            current2->next = (struct ListNode*)malloc(sizeof(struct ListNode));
            current2 = current2->next;
            current2->value = digit;
            current2->next = NULL;
        }
    }

 
    //struct ListNode* h1 = reverse_linked_list(head1);
    //struct ListNode* h2 = reverse_linked_list(head2);

    struct ListNode*final_result = add(head1,head2);

  
    while (final_result) {
        printf(""%d "", final_result->value);
        final_result = final_result->next;
    }

    return 0;
}"
22732217,PES1UG22AM017,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;
    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    // Reverse the linked list
    head = reverseLinkedList(head);

    // Print the reversed linked list
    printLinkedList(head);

    // Free allocated memory
    current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
"
22732217,PES1UG22AM017,ADD TWO NUMBERS 104,15,undefined
22732223,PES1UG22AM057,Reversing a Linked List 1,15,undefined
22732223,PES1UG22AM057,ADD TWO NUMBERS 104,15,undefined
22732230,PES1UG22AM006,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;
    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

  
    head = reverseLinkedList(head);

   
    printLinkedList(head);

    // Free allocated memory
    current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22732230,PES1UG22AM006,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertEnd(Node* head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

Node* addReversedLists(Node* list1, Node* list2) {
    Node* result = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum = sum % 10;
        result = insertEnd(result, sum);
    }

    if (carry > 0) {
        result = insertEnd(result, carry);
    }

    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    Node* list1 = NULL;
    Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        list1 = insertEnd(list1, digit);
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        list2 = insertEnd(list2, digit);
    }

    Node* result = addReversedLists(list1, list2);
    printList(result);

    return 0;
}

"
22732234,PES1UG22AM060,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;
    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    // Reverse the linked list
    head = reverseLinkedList(head);

    // Print the reversed linked list
    printLinkedList(head);

    // Free allocated memory
    current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22732234,PES1UG22AM060,ADD TWO NUMBERS 104,15,undefined
22732235,PES1UG22AM050,Reversing a Linked List 1,15,undefined
22732235,PES1UG22AM050,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum = sum % 10;

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;
    struct Node* current;

    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num1 == NULL) {
            num1 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num2 == NULL) {
            num2 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);

    printLinkedList(sum);

    struct Node* temp;
    while (num1 != NULL) {
        temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}"
22732250,PES1UG22AM013,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* next; 
};

void display(struct node* head);

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    int n;
    scanf(""%d"", &n);
    n = abs(n);
    struct node* head = NULL;
    struct node* prev = NULL;
    for(int i=0; i<n; i++)
    {
        struct node* temp = malloc(sizeof(struct node));
        int x;
        scanf(""%d"", &x);
        temp->data = x;
        temp->next = NULL;
        
        if(i==0)
        {
            head = temp;
        }
        else
        {
            prev->next = temp;
        }
        prev = temp;
    }
    
    struct node* current = head;
    prev = NULL;
    while(current != NULL)
    {
        struct node* temp = current->next;
        current->next = prev;
        prev = current;
        current = temp;
    }
    head = prev;
    display(head);
}

void display(struct node* head)
{
    struct node* current = head;
    while(current != NULL)
    {
        printf(""%d"", current->data);
        current = current->next;
    }
}
"
22732250,PES1UG22AM013,ADD TWO NUMBERS 104,15,undefined
22732253,PES1UG22AM023,Reversing a Linked List 1,15,undefined
22732253,PES1UG22AM023,ADD TWO NUMBERS 104,15,undefined
22732258,PES1UG22AM029,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>


struct Node {
    int value;
    struct Node* next;
};


struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

int main() {
    int num_nodes;
    scanf(""%d"", &num_nodes);

    struct Node* head = NULL;
    struct Node* current;

    for (int i = 0; i < num_nodes; ++i) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    head = reverseLinkedList(head);

   
    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }

    // Free allocated memory
    struct Node* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}"
22732258,PES1UG22AM029,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

// Definition of a Node
struct Node {
    int value;
    struct Node* next;
};

// Function to add two linked lists
struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum = sum % 10;

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

// Function to print the linked list with separation
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;
    struct Node* current;

    // Input first number
    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num1 == NULL) {
            num1 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    // Input second number
    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num2 == NULL) {
            num2 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);

    // Print the sum as a linked list with separation
    printLinkedList(sum);

    // Free allocated memory
    struct Node* temp;
    while (num1 != NULL) {
        temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}
"
22732273,PES1UG22AM033,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node* next;
};
void display(struct node *p)
{
    struct node* temp=p;
    while(temp!=NULL)
    {
        printf(""%d"",temp->data);
        temp=temp->next;
    }
    
}
struct node* reversal(struct node *p)
{
    struct node* prev=NULL;
    struct node* current =p;
    struct node* nex;
    
    while(current!=NULL)
    {
        nex=current->next;
        current->next=prev;
        prev=current;
        current=nex;
        
        
        
    }
    return prev;
}
int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
    
    int n;
    struct node* pres=NULL;
    struct node* prev=NULL;
     
    
    scanf(""%d\n"",&n);
    for (int i =0;i<n;i++)
    {
        int dat;
        scanf(""%d "",&dat);
        
        struct node* new = (struct node*)malloc(sizeof(struct node));
        new->data = dat;
        new->next = NULL;
        if (pres == NULL) 
        {
            pres = new;
        }
        
        if (prev != NULL) 
        {
            prev->next = new;
        }

        prev = new;
        
    }
    struct node* newpres = reversal(pres);
    display(newpres);
    return 0;
}
"
22732273,PES1UG22AM033,ADD TWO NUMBERS 104,15,undefined
22732283,PES1UG22AM061,Reversing a Linked List 1,15,undefined
22732283,PES1UG22AM061,ADD TWO NUMBERS 104,15,"#include<stdio.h>
#include<stdlib.h>
#include<math.h>

typedef struct linkedList{
    int val;
    struct linkedList *next;
}LL;

LL* insert(LL *head, int val){
    LL* check = head;
    if(head == NULL){
        LL* new = malloc(sizeof(LL));
        new->val = val;
        new->next = NULL;
        head = new;
        return head;
    }
    else{
        LL* new = malloc(sizeof(LL));
        new->val = val;
        while(head->next != NULL){
            head = head->next;
        }
        new->next = NULL;
        head->next = new;
        return check;
    }
}

LL* addTwoNumbers(LL* l1, LL* l2){

    if(l1 == NULL){
        return l2;
    }
    else if(l2 == NULL){
        return l1;
    }

    int sum1 = 0;
    int sum2 = 0;
    int i =0;
    while(l1 != NULL){
        sum1 += (l1->val)*pow(10,i);
        i++;
        l1 = l1->next;
    }
    i = 0;
    while(l2 != NULL){
        sum2 += (l2->val)*pow(10,i);
        i++;
        l2 = l2->next;
    }
    int sum;
    sum = sum1 + sum2;
    LL* ans = NULL;
    while(sum != 0){
        ans = insert(ans,sum%10);
        sum /= 10;
    }

    return ans;
    
}

void display(LL*head){

    while(head!= NULL){
        printf(""%d "",head->val);
        head = head->next;
    }

}

int main(){
    int n,m;
    scanf("" %d %d"",&n,&m);

    LL* a = NULL;
    LL* b = NULL;
    for(int i = 0; i < n+m;i++){
        int x;
        scanf("" %d"",&x);
        if(i<n){
            a = insert(a,x);
        }
        else{
        b = insert(b,x);
        }
    }

    LL* c = NULL;
    c = addTwoNumbers(a,b);

    display(c);

}
"
22732289,PES1UG22AM019,Reversing a Linked List 1,15,"#include <stdio.h>
#include<math.h>
#include<stdlib.h>


struct ListNode {
    int value;
    struct ListNode* next;

};



struct ListNode* reverseLinkedList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    while (current) {
        struct ListNode* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;

}



void printLinkedList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);
    struct ListNode* head = NULL;
    struct ListNode* current = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->value = value;
        newNode->next = NULL;
        if (!head) {
            head = newNode;
            current = head;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }


    struct ListNode* reversedHead = reverseLinkedList(head);
    printLinkedList(reversedHead);
    while (reversedHead) {
        struct ListNode* temp = reversedHead;
        reversedHead = reversedHead->next;
        free(temp);
    }
    return 0;
}


"
22732289,PES1UG22AM019,ADD TWO NUMBERS 104,7.5,undefined
22732290,PES1UG22AM015,Reversing a Linked List 1,15,undefined
22732290,PES1UG22AM015,ADD TWO NUMBERS 104,15,undefined
22732297,PES1UG22AM009,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node 
{
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) 
{
    struct Node* prev=NULL;
    struct Node* current=head;
    struct Node* nextNode=NULL;

    while (current!=NULL) 
    {
        nextNode=current->next;
        current->next=prev;
        prev=current;
        current=nextNode;
    }
    return prev;
}

void printLinkedList(struct Node* head) 
{
    struct Node* current=head;
    while (current!=NULL) 
    {
        printf(""%d"",current->value);
        current=current->next;
    }
}

int main() 
{
    int n;
    scanf(""%d"",&n);

    struct Node* head=NULL;
    struct Node* current=NULL;

    for (int i=0; i<n; i++) 
    {
        int value;
        scanf(""%d"",&value);

        struct Node* newNode=(struct Node*)malloc(sizeof(struct Node));
        newNode->value=value;
        newNode->next=NULL;

        if (head == NULL) 
        {
            head = newNode;
            current = newNode;
        } 
        else 
        {
            current->next=newNode;
            current=newNode;
        }
    }

    struct Node* newHead=reverseLinkedList(head);
    printLinkedList(newHead);
    return 0;
}

"
22732297,PES1UG22AM009,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* add_linked_lists(Node* l1, Node* l2) {
    Node* dummy = (Node*)malloc(sizeof(Node));
    dummy->data = 0;
    dummy->next = NULL;
    Node* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->data : 0;
        int val2 = l2 ? l2->data : 0;
        
        int total = val1 + val2 + carry;
        carry = total / 10;
        int digit = total % 10;
        
        Node* new_node = (Node*)malloc(sizeof(Node));
        new_node->data = digit;
        new_node->next = NULL;
        
        current->next = new_node;
        current = current->next;
        
        if (l1) {
            l1 = l1->next;
        }
        if (l2) {
            l2 = l2->next;
        }
    }
    
    Node* result_head = dummy->next;
    free(dummy);
    return result_head;
}

void print_linked_list(Node* head) {
    Node* current = head;
    while (current) {
        printf(""%d"", current->data);
        if (current->next) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);
    
    Node* head1 = NULL;
    for (int i = 0; i < n1; ++i) {
        int digit;
        scanf(""%d"", &digit);
        Node* new_node = (Node*)malloc(sizeof(Node));
        new_node->data = digit;
        new_node->next = head1;
        head1 = new_node;
    }
    Node* reversed_head1 = NULL;
    Node* current1 = head1;
    while (current1) {
        Node* next = current1->next;
        current1->next = reversed_head1;
        reversed_head1 = current1;
        current1 = next;
    }
    
    Node* head2 = NULL;
    for (int i = 0; i < n2; ++i) {
        int digit;
        scanf(""%d"", &digit);
        Node* new_node = (Node*)malloc(sizeof(Node));
        new_node->data = digit;
        new_node->next = head2;
        head2 = new_node;
    }
    Node* reversed_head2 = NULL;
    Node* current2 = head2;
    while (current2) {
        Node* next = current2->next;
        current2->next = reversed_head2;
        reversed_head2 = current2;
        current2 = next;
    }
    
    Node* result_head = add_linked_lists(reversed_head1, reversed_head2);
    
    print_linked_list(result_head);
    
    return 0;
}
"
22732298,PES1UG22AM065,Reversing a Linked List 1,15,undefined
22732298,PES1UG22AM065,ADD TWO NUMBERS 104,15,undefined
22732301,PES1UG22AM024,Reversing a Linked List 1,15,undefined
22732301,PES1UG22AM024,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry != 0) {
        int sum = carry;
        if (list1 != NULL) {
            sum += list1->value;
            list1 = list1->next;
        }
        if (list2 != NULL) {
            sum += list2->value;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum = sum % 10;

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* current1 = NULL;

    for (int i = 0; i < n1; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (list1 == NULL) {
            list1 = newNode;
            current1 = list1;
        } else {
            current1->next = newNode;
            current1 = newNode;
        }
    }

    struct Node* list2 = NULL;
    struct Node* current2 = NULL;

    for (int i = 0; i < n2; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (list2 == NULL) {
            list2 = newNode;
            current2 = list2;
        } else {
            current2->next = newNode;
            current2 = newNode;
        }
    }

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);

    // Free memory
    while (list1 != NULL) {
        struct Node* temp = list1;
        list1 = list1->next;
        free(temp);
    }
    
    while (list2 != NULL) {
        struct Node* temp = list2;
        list2 = list2->next;
        free(temp);
    }

    while (sumList != NULL) {
        struct Node* temp = sumList;
        sumList = sumList->next;
        free(temp);
    }

    return 0;
}
"
22732302,PES1UG22AM064,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node *next;
}NODE;
NODE* insert_end(NODE* p, int x)
{
    NODE* temp;
    temp = (NODE*)malloc(sizeof(NODE));  
    temp->data = x;
    temp->next = NULL;  

    if (p == NULL)
    {
        return temp;  
    }

    NODE* q = p;
    while (q->next != NULL)
    {
        q = q->next;
    }
    q->next = temp;  
    return p;  
}
NODE* display(NODE* p)
{
    NODE* q = p;
    if (p == NULL)
    {
        return NULL;
    }
    while (q != NULL)
    {
        printf(""%d"",q->data); 
        q = q->next;
    }
    printf(""\n""); 
    return NULL;
}
NODE* reverse(NODE *p)
{
    NODE* prev = NULL;
    NODE* curr = p;
    NODE* next = NULL;

    while (curr != NULL)
    {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }

    return prev; 
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    NODE* first = NULL;
    int x, n;
    scanf(""%d"", &n);
    while (n)
    {
        scanf(""%d"", &x);
        first = insert_end(first, x);
        n--;
    }

    NODE* reversedList = reverse(first);  
    display(reversedList);               
    
    return 0;
}

"
22732302,PES1UG22AM064,ADD TWO NUMBERS 104,15,undefined
22732308,PES1UG22AM027,Reversing a Linked List 1,15,undefined
22732308,PES1UG22AM027,ADD TWO NUMBERS 104,15,undefined
22732315,PES1UG22AM001,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}
int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;
    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

   
    head = reverseLinkedList(head);

     
    printLinkedList(head);

    
    current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

     
    return 0;
}
"
22732315,PES1UG22AM001,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct ListNode {
    int val;
    struct ListNode* next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->val : 0;
        int val2 = l2 ? l2->val : 0;
        
        int total = val1 + val2 + carry;
        carry = total / 10;
        int digit = total % 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digit;
        current->next = NULL;
        
        if (l1) {
            l1 = l1->next;
        }
        if (l2) {
            l2 = l2->next;
        }
    }
    
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}


struct ListNode* create_linked_list(int* digits, int size) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    for (int i = 0; i < size; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}


void print_linked_list(struct ListNode* node) {
    while (node) {
        printf(""%d "", node->val);
        node = node->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    int* digits1 = (int*)malloc(n * sizeof(int));
    int* digits2 = (int*)malloc(m * sizeof(int));
    
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &digits1[i]);
    }
    for (int i = 0; i < m; i++) {
        scanf(""%d"", &digits2[i]);
    }
    
    struct ListNode* l1 = create_linked_list(digits1, n);
    struct ListNode* l2 = create_linked_list(digits2, m);
    
    struct ListNode* result = add_linked_lists(l1, l2);
    
    print_linked_list(result);
    
    free(digits1);
    free(digits2);
    

    while (result) {
        struct ListNode* temp = result;
        result = result->next;
        free(temp);
    }
    
    return 0;
}
"
22732329,PES1UG22AM066,Reversing a Linked List 1,15,undefined
22732329,PES1UG22AM066,ADD TWO NUMBERS 104,15,undefined
22732332,PES1UG22AM043,Reversing a Linked List 1,15,undefined
22732332,PES1UG22AM043,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdlib.h>
struct ListNode {
    int value;
    struct ListNode* next;
};
struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy_head = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy_head;
    int carry = 0;

    while (l1 || l2 || carry) {
        int value1 = l1 ? l1->value : 0;
        int value2 = l2 ? l2->value : 0;
        int total = value1 + value2 + carry;

        carry = total / 10;
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = total % 10;
        current->next = NULL;

        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }

    return dummy_head->next;
}

// Function to reverse a linked list
struct ListNode* reverse_linked_list(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;

    while (current) {
        struct ListNode* next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }

    return prev;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct ListNode* head1 = NULL;
    struct ListNode* current1 = NULL;
    for (int i = 0; i < n; i++) {
        int digit;
        scanf(""%d"", &digit);

        if (!head1) {
            head1 = (struct ListNode*)malloc(sizeof(struct ListNode));
            head1->value = digit;
            head1->next = NULL;
            current1 = head1;
        } else {
            current1->next = (struct ListNode*)malloc(sizeof(struct ListNode));
            current1 = current1->next;
            current1->value = digit;
            current1->next = NULL;
        }
    }
    struct ListNode* head2 = NULL;
    struct ListNode* current2 = NULL;
    for (int i = 0; i < m; i++) {
        int digit;
        scanf(""%d"", &digit);

        if (!head2) {
            head2 = (struct ListNode*)malloc(sizeof(struct ListNode));
            head2->value = digit;
            head2->next = NULL;
            current2 = head2;
        } else {
            current2->next = (struct ListNode*)malloc(sizeof(struct ListNode));
            current2 = current2->next;
            current2->value = digit;
            current2->next = NULL;
        }
    }

    struct ListNode* reversed_head1 = reverse_linked_list(head1);
    struct ListNode* reversed_head2 = reverse_linked_list(head2);
    struct ListNode* result_head = add_linked_lists(reversed_head1, reversed_head2);
    struct ListNode* final_result = reverse_linked_list(result_head);
    while (final_result) {
        printf(""%d "", final_result->value);
        final_result = final_result->next;
    }

    return 0;
}"
22732346,PES1UG22AM041,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct NODE
{
    int info;
    struct NODE* next;
}node;
void insertlast(node** p,int x);
void reverse(node**p);
void display(node*p);
int main()
{
    int n,x;
    node* p;
    scanf(""%d"",&n);
    for (int i=0; i<n;i++)
    {
        scanf(""%d"",&x);
        insertlast(&p,x);
    }
    reverse(&p);
    display(p);
    return 0;
}
void insertlast(node** p,int x)
{
    node* temp;
    temp=(node*)malloc(sizeof(node));
    temp->info=x;
    temp->next=NULL;
    if (*p==NULL) *p=temp;
    else
    {
        node* q=*p;
        while((q->next!=NULL))
        {
            q=q->next;
        }
        q->next=temp;
    }
}
void reverse(node**p)
{
    node *cur, *prev, *temp;
    prev=NULL;
    cur=*p;
    while(cur!=NULL)
    {
        temp=cur->next;
        cur->next=prev;
        prev=cur;
        cur=temp;
        *p=prev;
    }
}
void display(node*p)
{
    if(p==NULL)return;
    else
    {
        while(p!=NULL)
        {
            printf(""%d"",p->info);
            p=p->next;
        }
    }
}

"
22732346,PES1UG22AM041,ADD TWO NUMBERS 104,15,undefined
22732350,PES1UG22AM010,Reversing a Linked List 1,15,undefined
22732350,PES1UG22AM010,ADD TWO NUMBERS 104,15,undefined
22732358,PES1UG22AM047,Reversing a Linked List 1,15,"#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
int info;
struct node* next;
}NODE;
typedef struct llist
{
NODE* head;
NODE* cur;
}LLIST;
void printLinkedList(LLIST*pl) ;
void reverseLinkedList(LLIST*pl);
void initList(LLIST *pl)
{
pl->head=NULL;
pl->cur=NULL;
}

int main()
{
    LLIST *lobj = malloc(sizeof(LLIST));;
    initList(lobj);
    int n;
    if(n>=1000)
    {
    scanf(""%d"",&n);
    for (int i = 0; i < n; i++) {
    int value;
    scanf(""%d"", &value);
    NODE* temp=malloc(sizeof(NODE));
    temp->info=value;
    temp->next=NULL;
    if (lobj->head == NULL) {
            lobj->head = temp;
            lobj->cur = lobj->head;
        } else {
            lobj->cur->next = temp;
            lobj->cur = lobj->cur->next;
        }
    }
    reverseLinkedList(lobj);
    printLinkedList(lobj);
    }
    return 0;
    
}


void reverseLinkedList(LLIST*pl) {
    NODE* q = NULL;
    NODE* p = pl->head;
    NODE* temp = NULL;

    while (p != NULL) {
        temp = p->next;
        p->next = q;
        q = p;
        p = temp;
    }

    pl->head = q;
}
void printLinkedList(LLIST*pl) {
    NODE* p =pl->head;
    while (p != NULL) {
        printf(""%d"", p->info);
        p = p->next;
    }
}
"
22732358,PES1UG22AM047,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

// Definition of a Node
struct Node {
    int value;
    struct Node* next;
};

// Function to add two linked lists
struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum = sum % 10;

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

// Function to print the linked list with separation
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;
    struct Node* current;

    // Input first number
    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num1 == NULL) {
            num1 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    // Input second number
    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = digit;
        newNode->next = NULL;

        if (num2 == NULL) {
            num2 = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);

    // Print the sum as a linked list with separation
    printLinkedList(sum);

    // Free allocated memory
    struct Node* temp;
    while (num1 != NULL) {
        temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}
"
22732370,PES1UG22AM036,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>


struct Node {
    int value;
    struct Node* next;
};


struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

int main() {
    int num_nodes;
    scanf(""%d"", &num_nodes);

    struct Node* head = NULL;
    struct Node* current;

    for (int i = 0; i < num_nodes; ++i) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    head = reverseLinkedList(head);

    
    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }

    
    struct Node* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}

"
22732370,PES1UG22AM036,ADD TWO NUMBERS 104,15,undefined
22732378,PES1UG22AM042,Reversing a Linked List 1,15,undefined
22732378,PES1UG22AM042,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insertNode(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        
        if (num1 != NULL) {
            sum += num1->data;
            num1 = num1->next;
        }

        if (num2 != NULL) {
            sum += num2->data;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum %= 10;

        insertNode(&result, sum);
    }

    return result;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* num1 = NULL;
    for (int i = 0; i < n1; i++) {
        int value;
        scanf(""%d"", &value);
        insertNode(&num1, value);
    }

    struct Node* num2 = NULL;
    for (int i = 0; i < n2; i++) {
        int value;
        scanf(""%d"", &value);
        insertNode(&num2, value);
    }

    struct Node* result = addLinkedLists(num1, num2);
    printLinkedList(result);

    return 0;
}
"
22732402,PES1UG22AM008,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

typedef struct ListNode ListNode;

ListNode* createNode(int value) {
    ListNode* newNode = (ListNode*)malloc(sizeof(ListNode));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

ListNode* reverseLinkedList(ListNode* head) {
    ListNode* prev = NULL;
    ListNode* current = head;
    while (current) {
        ListNode* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    return prev;
}

void printLinkedList(ListNode* head) {
    ListNode* current = head;
    while (current) {
        printf(""%d"", current->value);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    ListNode* head = NULL;
    ListNode* current = NULL;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);
        ListNode* newNode = createNode(value);
        
        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    ListNode* reversedHead = reverseLinkedList(head);

    printLinkedList(reversedHead);

    // Clean up memory
    while (reversedHead) {
        ListNode* temp = reversedHead;
        reversedHead = reversedHead->next;
        free(temp);
    }

    return 0;
}"
22732402,PES1UG22AM008,ADD TWO NUMBERS 104,15,undefined
22732410,PES1UG22AM063,Reversing a Linked List 1,15,undefined
22732410,PES1UG22AM063,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node{
    int data;
    struct node* next;
}NODE;
NODE* create_node(int n){
    NODE* new=(NODE*)malloc(sizeof(NODE));
    new->data=n;
    new->next=NULL;
    return new;
}
NODE* input_m(int m){
    if(m==0){
        NODE* head=NULL;
        return head;
    }
    int x;
    scanf(""%d"",&x);
    NODE* head=create_node(x);
    NODE* p=head;
    for(int i=1;i<m;i++){
        scanf(""%d"",&x);
        p->next=create_node(x);
        p=p->next;
    }
    return head;
}
NODE* input_n(int m){
    if(m==0){
        NODE* head=NULL;
        return head;
    }
    int x;
    scanf(""%d"",&x);
    NODE* head=create_node(x);
    NODE* p=head;
    for(int i=1;i<m;i++){
        scanf(""%d"",&x);
        p->next=create_node(x);
        p=p->next;
    }
    return head;
}
int fix(NODE* head, int a, int b){
    NODE* p=head;
    while(p->next!=NULL){
        p=p->next;
    }
    for(int i=0;i<(a-b);i++){
        p->next=create_node(0);
        p=p->next;
    }
    return a;
}
NODE* add(NODE* h1,NODE* h2,int a){
    if(a==0){
        NODE* head=NULL;
        return head;
    }
    int c=0,dx=0;
    dx=h1->data+h2->data;
    while(dx/10>0){
            dx-=10;
            c++;
    }
    NODE* head=create_node(dx);
    NODE* p=head;
    for(int i=1;i<a;i++){
        h1=h1->next;
        h2=h2->next;
        dx=h1->data+h2->data+c;
        c=0;
        while(dx/10>0){
            dx-=10;
            c++;
        }
        p->next=create_node(dx);
        p=p->next;        
    }
    if (c!=0){
        p->next=create_node(c);
    }
    return head;
}
int main() {
    int m,n;
    scanf(""%d %d"",&m,&n);
    NODE* h1=input_m(m);
    NODE* h2=input_n(n);
    int a=m;
    if(m!=n){
        (m>n)?(a=fix(h2,m,n)):(a=fix(h1,n,m));
    }
    NODE* ans=add(h1,h2,a);
    while(ans!=NULL){
        printf(""%d "",ans->data);
        ans=ans->next;
    }
}
"
22732443,PES1UG22AM062,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct NODE
{
    int info;
    struct NODE* next;
}node;
void insertlast(node** p,int x);
void reverse(node**p);
void display(node*p);
int main() 
{
    int n,x;
    node* p;
    scanf(""%d"",&n);
    for (int i=0; i<n;i++)
    {
        scanf(""%d"",&x);
        insertlast(&p,x);
    }
    reverse(&p);
    display(p);
    return 0;
}
void insertlast(node** p,int x)
{
    node* temp;
    temp=(node*)malloc(sizeof(node));
    temp->info=x;
    temp->next=NULL;
    if (*p==NULL) *p=temp;
    else
    {
        node* q=*p;
        while((q->next!=NULL))
        {
            q=q->next;
        }
        q->next=temp;
    }
}
void reverse(node**p)
{
    node *cur, *prev, *temp;
    prev=NULL;
    cur=*p;
    while(cur!=NULL)
    {
        temp=cur->next;
        cur->next=prev;
        prev=cur;
        cur=temp;
        *p=prev;
    }
}
void display(node*p)
{
    if(p==NULL) return;
    else
    {
        while(p!=NULL)
        {
            printf(""%d"",p->info);
            p=p->next;
        }
    }
}
"
22732443,PES1UG22AM062,ADD TWO NUMBERS 104,15,undefined
22732446,PES1UG22AM030,Reversing a Linked List 1,15,undefined
22732446,PES1UG22AM030,ADD TWO NUMBERS 104,15,undefined
22732451,PES1UG22AM045,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* reverse_linked_list(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    struct ListNode* next_node;

    while (current != NULL) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }

    return prev;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct ListNode* head = NULL;
    struct ListNode* current = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = value;
        new_node->next = NULL;

        if (!head) {
            head = new_node;
            current = head;
        } else {
            current->next = new_node;
            current = current->next;
        }
    }
    head = reverse_linked_list(head);
    current = head;
    while (current) {
        printf(""%d"", current->value);
        current = current->next;
    }

    return 0;
}
"
22732451,PES1UG22AM045,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}"
22732505,PES1UG22AM031,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;
    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    // Reverse the linked list
    head = reverseLinkedList(head);

    // Print the reversed linked list
    printLinkedList(head);

    // Free allocated memory
    current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
"
22732505,PES1UG22AM031,ADD TWO NUMBERS 104,15,undefined
22732643,PES1UG22AM058,Reversing a Linked List 1,15,undefined
22732643,PES1UG22AM058,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insertNode(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        
        if (num1 != NULL) {
            sum += num1->data;
            num1 = num1->next;
        }

        if (num2 != NULL) {
            sum += num2->data;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum %= 10;

        insertNode(&result, sum);
    }

    return result;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* num1 = NULL;
    for (int i = 0; i < n1; i++) {
        int value;
        scanf(""%d"", &value);
        insertNode(&num1, value);
    }

    struct Node* num2 = NULL;
    for (int i = 0; i < n2; i++) {
        int value;
        scanf(""%d"", &value);
        insertNode(&num2, value);
    }

    struct Node* result = addLinkedLists(num1, num2);
    printLinkedList(result);

    return 0;
}"
22732677,PES1UG22AM059,Reversing a Linked List 1,0,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main()
{#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}

"
22732677,PES1UG22AM059,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}
    
    
"
22770899,PES1UG22AM037,Reversing a Linked List 1,15,undefined
22770899,PES1UG22AM037,ADD TWO NUMBERS 104,15,undefined
22813241,PES1UG22AM018,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* reverse_linked_list(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    struct ListNode* next_node;

    while (current != NULL) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }

    return prev;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct ListNode* head = NULL;
    struct ListNode* current = NULL;
    
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = value;
        new_node->next = NULL;

        if (!head) {
            head = new_node;
            current = head;
        } else {
            current->next = new_node;
            current = current->next;
        }
    }

    head = reverse_linked_list(head);

    current = head;
    while (current) {
        printf(""%d"", current->value);
        current = current->next;
    }

    return 0;
}
"
22813241,PES1UG22AM018,ADD TWO NUMBERS 104,15,"
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int val;
    struct Node* next;
};

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;

    while (current != NULL) {
        struct Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        if (current->next != NULL) {
            printf("" ""); // Print space if there's a next node
        }
        current = current->next;
    }
}

struct Node* addLists(struct Node* l1, struct Node* l2) {
    struct Node* dummyHead = (struct Node*)malloc(sizeof(struct Node));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct Node* current = dummyHead;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        carry = sum / 10;
        sum %= 10;

        current->next = (struct Node*)malloc(sizeof(struct Node));
        current = current->next;
        current->val = sum;
        current->next = NULL;
    }

    struct Node* result = dummyHead->next;
    free(dummyHead);
    return result;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list1;
        list1 = newNode;
    }

    for (int i = 0; i < n2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = digit;
        newNode->next = list2;
        list2 = newNode;
    }

    list1 = reverseList(list1);
    list2 = reverseList(list2);

    struct Node* sumList = addLists(list1, list2);
    printList(sumList);
    printf(""\n"");

    struct Node* temp = sumList;
    while (temp != NULL) {
        struct Node* nextTemp = temp->next;
        free(temp);
        temp = nextTemp;
    }

    return 0;
}"
22825517,PES1UG22AM901,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct Node* head = NULL;
    struct Node* current = NULL;
    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    // Reverse the linked list
    head = reverseLinkedList(head);

    // Print the reversed linked list
    printLinkedList(head);

    // Free allocated memory
    current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22825517,PES1UG22AM901,ADD TWO NUMBERS 104,15,undefined
22825562,harshinisuresh23,Reversing a Linked List 1,15,undefined
22825562,harshinisuresh23,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy_head = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy_head;
    int carry = 0;

    while (l1 || l2 || carry) {
        int value1 = l1 ? l1->value : 0;
        int value2 = l2 ? l2->value : 0;
        int total = value1 + value2 + carry;

        carry = total / 10;
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->value = total % 10;
        current->next = NULL;

        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }

    return dummy_head->next;
}

struct ListNode* reverse_linked_list(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;

    while (current) {
        struct ListNode* next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }

    return prev;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct ListNode* head1 = NULL;
    struct ListNode* current1 = NULL;
    for (int i = 0; i < n; i++) {
        int digit;
        scanf(""%d"", &digit);

        if (!head1) {
            head1 = (struct ListNode*)malloc(sizeof(struct ListNode));
            head1->value = digit;
            head1->next = NULL;
            current1 = head1;
        } else {
            current1->next = (struct ListNode*)malloc(sizeof(struct ListNode));
            current1 = current1->next;
            current1->value = digit;
            current1->next = NULL;
        }
    }

   
    struct ListNode* head2 = NULL;
    struct ListNode* current2 = NULL;
    for (int i = 0; i < m; i++) {
        int digit;
        scanf(""%d"", &digit);

        if (!head2) {
            head2 = (struct ListNode*)malloc(sizeof(struct ListNode));
            head2->value = digit;
            head2->next = NULL;
            current2 = head2;
        } else {
            current2->next = (struct ListNode*)malloc(sizeof(struct ListNode));
            current2 = current2->next;
            current2->value = digit;
            current2->next = NULL;
        }
    }

    
    struct ListNode* reversed_head1 = reverse_linked_list(head1);
    struct ListNode* reversed_head2 = reverse_linked_list(head2);

    
    struct ListNode* result_head = add_linked_lists(reversed_head1, reversed_head2);

    
    struct ListNode* final_result = reverse_linked_list(result_head);

   
    while (final_result) {
        printf(""%d "", final_result->value);
        final_result = final_result->next;
    }

    return 0;
}
"
22825776,tas23docs,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node* next;
}Node;

Node* reverseList(Node* head){
    Node* next = NULL;
    Node* cur = head;
    Node* prev = NULL;
    
    while(cur){
        next = cur->next;
        cur->next = prev;
        prev = cur;
        cur = next;
    }
    return prev;
}
Node* create_node(int data){
    Node* new_node = (Node*) malloc(sizeof(Node));
    new_node->next = NULL;
    new_node->data = data;
    return new_node;
}

void display(Node* head){
    while(head){
        printf(""%d"",head->data);
        head = head->next;
    }
}

Node* createLinkedList(int n){
    Node* first = create_node(0);
    Node* firstp = first;
    while(n--){
        int data;
        scanf(""%d"",&data);
        Node* new_node = create_node(data);
        firstp->next = new_node;
        firstp = firstp->next;
    }
    first = first->next;
    return first;
}

int main() {
    int n;
    scanf(""%d"",&n);
    Node* head = createLinkedList(n);
    Node* rev = reverseList(head);
    display(rev);
     
    return 0;
}"
22825776,tas23docs,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node *next;
}NODE;
NODE* insert_end(NODE* p, int x)
{
    NODE* temp;
    temp = (NODE*)malloc(sizeof(NODE));  
    temp->data = x;
    temp->next = NULL;  

    if (p == NULL)
    {
        return temp;  
    }

    NODE* q = p;
    while (q->next != NULL)
    {
        q = q->next;
    }
    q->next = temp;  
    return p;  
}
NODE* display(NODE* p)
{
    NODE* q = p;
    if (p == NULL)
    {
        return NULL;
    }
    while (q != NULL)
    {
        printf(""%d "",q->data); 
        q = q->next;
    }
    printf(""\n""); 
    return NULL;
}
NODE* addLists(NODE* list1, NODE* list2) {
    NODE* result = NULL;
    NODE* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }
        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }
        
        carry = sum / 10;
        sum %= 10;

        NODE* newNode = (NODE*)malloc(sizeof(NODE));
        newNode->data = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }

    if (carry > 0) {
        NODE* newNode = (NODE*)malloc(sizeof(NODE));
        newNode->data = carry;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;  // Special case if carry needs an additional node
        } else {
            current->next = newNode; // Connect the carry to the result
        }
    }

    return result;
}

int main() {
    
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    NODE* first=NULL;
    NODE* second=NULL;
    int x,y,n1,n2;
    scanf(""%d %d"",&n1,&n2);
    while (n1)
    {
        scanf(""%d"",&x);
        first = insert_end(first, x);
        n1--;
    }
    while (n2)
    {
        scanf(""%d"",&y);
        second = insert_end(second,y);
        n2--;
    }
    NODE *results=addLists(first,second);
    display(results);
    return 0;
}"