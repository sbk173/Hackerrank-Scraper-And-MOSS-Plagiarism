studentId,studentUserName,challenge,score,code
20778318,PES1UG22CS442,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
    int coe,exp;
    struct Node* next;
}Nde;
Nde* createNode(int coeff, int exp) {
    Nde* newNode = (Nde*)malloc(sizeof(Nde));
    newNode->coe= coeff;
    newNode->exp= exp;
    newNode->next = NULL;
    return newNode;
}
void insertTerm(Nde** poly, int coeff, int exp) {
    Nde* newNode = createNode(coeff, exp);   
    if (*poly == NULL || exp > (*poly)->exp) {
        newNode->next = *poly;
        *poly = newNode;
    } else {
        Nde* current = *poly;
        while (current->next != NULL && current->next->exp >= exp) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}
Nde* addPoly(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertTerm(&result, poly1->coe, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertTerm(&result, poly2->coe, poly2->exp);
            poly2 = poly2->next;
        } else {
            int coeffSum = poly1->coe + poly2->coe;
            if (coeffSum != 0) {
                insertTerm(&result, coeffSum, poly1->exp);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coe, poly1->exp);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coe, poly2->exp);
        poly2 = poly2->next;
    }
    return result;
}
void printPoly(Nde* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coe);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    Nde* poly1 = NULL;
    Nde* poly2 = NULL;
    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }
    Nde* result = addPoly(poly1, poly2);
    printPoly(result);
    return 0;
}"
20778318,PES1UG22CS442,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
    int data;
    struct Node* next;
}N;
void insertEnd(N* head, int n) 
{
    for (int i=0;i<n-1;i++)
    {
    scanf(""%d"",&(head->data));
    head=head->next=(N*)malloc(sizeof(N));
    }
    scanf(""%d"",&(head->data));
    head->next=NULL;
}
N* findMid(N* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    N* slow = head;
    N* fast = head;
    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
void splitLL(N* source, N** firstHalf,N** secondHalf) {
    N* midpoint = findMid(source);
    *firstHalf = source;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}
void display(N* temp) 
{
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    N* head =(N*)malloc(sizeof(N));
    scanf(""%d"",&n);
    insertEnd(head,n);
    N* firstHalf = NULL;
    N* secondHalf = NULL;
    splitLL(head, &firstHalf, &secondHalf);
    display(firstHalf);
    display(secondHalf);
    return 0;
}"
21098631,PES1UG22CS460,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int c;
    int exp;
    struct Term* n;
};

void Terminsert(struct Term** p, int c, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL) {
        *p = newTerm;
    } else {
        struct Term* current = *p;
        while (current->n != NULL) {
            current = current->n;
        }
        current->n = newTerm;
    }
}

struct Term* addPolynomials(struct Term* p1, struct Term* p2) {
    struct Term* result = NULL;
    struct Term* current1 = p1;
    struct Term* current2 = p2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            Terminsert(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp) {
            Terminsert(&result, current2->c, current2->exp);
            current2 = current2->n;
        } else {
            Terminsert(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }
    
    while (current1 != NULL) {
        Terminsert(&result, current1->c, current1->exp);
        current1 = current1->n;
    }
    
    while (current2 != NULL) {
        Terminsert(&result, current2->c, current2->exp);
        current2 = current2->n;
    }
    
    return result;
}

void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            Terminsert(&poly1, coef, exp);
        } else {
            Terminsert(&poly2, coef, exp);
        }
    } 
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
21098631,PES1UG22CS460,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node*next;
};
struct node* create(int n)
{
    struct node* head=(struct node*)malloc(sizeof(struct node));
    struct node*ptr=head;
    head->next=NULL;
    scanf(""%d"",&head->data);
    for(int i=1;i<n;i++)
    {   
        ptr->next=(struct node*)malloc(sizeof(struct node));
        scanf(""%d"",&(ptr->next->data));
        ptr->next->next=NULL;
        ptr=ptr->next;
    }
    return head;
}
int length(struct node*head)
{
    struct node*ptr=head;
    int count=0;
    while(ptr!=NULL)
    {
        ptr=ptr->next;
        count++;
    }
    return count;
}
void display(struct node*p,int a,int b,int c)
{
    for(int i=a;i<b;i++)
    {
        printf(""%d\t"",p->data);
        p=p->next;
    }
    printf(""\n"");
    for(int i=b;i<c;i++)
    {
        printf(""%d\t"",p->data);
        p=p->next;
    }
}
int main() {
    int n,l1,m;
    struct node* p=NULL;
    scanf(""%d"",&n);
    p=create(n);
    l1=length(p);
    if(l1%2!=0)
        m=l1/2+1;
    else
        m=l1/2;
    display(p,0,m,l1);
    return 0;
}
"
22631345,PES1UG22CS490,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
typedef struct st
{
    int n,m;
    struct st* next;
}node;
node* insl(node* head)
{
    node* a=malloc(sizeof(node));
    if(a==NULL)
    {
        printf(""Failed"");
        return NULL;
    }
    scanf(""%d %d"",&a->n,&a->m);
    a->next=NULL;
    if(head==NULL)
        return a;
    node* h=head;
    while(head->next)
        head=head->next;
    head->next=a;
    return h;
}
void printer(node* head1,node* head2)
{
    int v=(head1->m<head2->m)?head2->m:head1->m;
    int s=0;
    while(head1 && head2)
    {
        if(head1->m!=v && head2->m!=v)
        {
            printf(""%d "",s);
            v=(head1->m<head2->m)?head2->m:head1->m;
            s=0;
        }
        if(v==head1->m)
        {
            s=s+head1->n;
            head1=head1->next;
        }
        if(v==head2->m)
        {
            s=s+head2->n;
            head2=head2->next;
        }
    }
    if(head1==NULL)
    {
        while(head2)
        {
            if(head2->m!=v)
            {
                printf(""%d "",s);
                v=head2->m;
                s=0;
            }
            if(v==head2->m)
            {
                s=s+head2->n;
                head2=head2->next;
            }
        }
    }
    if(head2==NULL)
    {
        head2=head1;
        while(head2)
        {
            if(head2->m!=v)
            {
                printf(""%d "",s);
                v=head2->m;
                s=0;
            }
            if(v==head2->m)
            {
                s=s+head2->n;
                head2=head2->next;
            }
        }
    }
    printf(""%d "",s);
}
void display(node* head)
{
    if(head==NULL)
        return;
    printf(""%d %d\n"",head->n,head->m);
    display(head->next);
}
int main()
{
    int a;
    int b;
    node* head1=NULL;
    node* head2=NULL;
    scanf(""%d %d"",&a,&b);
    for(int i=0;i<a;i++)
        head1=insl(head1);
    for(int i=0;i<b;i++)
        head2=insl(head2);
    printer(head1,head2);
    return 0;
}"
22631345,PES1UG22CS490,Divide Linked List 2,15,"
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node*next;
};
struct node* create(int n)
{
    struct node* head=(struct node*)malloc(sizeof(struct node));
    struct node*ptr=head;
    head->next=NULL;
    scanf(""%d"",&head->data);
    for(int i=1;i<n;i++)
    {   
        ptr->next=(struct node*)malloc(sizeof(struct node));
        scanf(""%d"",&(ptr->next->data));
        ptr->next->next=NULL;
        ptr=ptr->next;
    }
    return head;
}
int length(struct node*head)
{
    struct node*ptr=head;
    int count=0;
    while(ptr!=NULL)
    {
        ptr=ptr->next;
        count++;
    }
    return count;
}
void display(struct node*p,int a,int b,int c)
{
    for(int i=a;i<b;i++)
    {
        printf(""%d\t"",p->data);
        p=p->next;
    }
    printf(""\n"");
    for(int i=b;i<c;i++)
    {
        printf(""%d\t"",p->data);
        p=p->next;
    }
}
int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n,l1,m;
    struct node* p=NULL;
    scanf(""%d"",&n);
    p=create(n);
    l1=length(p);
    if(l1%2!=0)
        m=l1/2+1;
    else
        m=l1/2;
    display(p,0,m,l1);
    return 0;
}
"
22728895,PES1UG22CS463,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node
{
    int coeff;
    int exp;
    struct Node *link;
};

typedef struct Node NODE;

NODE *createNode(int coeff, int exp)
{
    NODE *newNode = (NODE *)malloc(sizeof(NODE));
    newNode->coeff = coeff;
    newNode->exp = exp;
    newNode->link = NULL;
    return newNode;
}

void create_poly(NODE **poly, int coeff, int exp)
{
    NODE *newNode = createNode(coeff, exp);

    if (*poly == NULL || exp > (*poly)->exp)
    {
        newNode->link = *poly;
        *poly = newNode;
    }
    else
    {
        NODE *current = *poly;
        while (current->link != NULL && current->link->exp >= exp)
        {
            current = current->link;
        }
        newNode->link = current->link;
        current->link = newNode;
    }
}

NODE *evaluation_poly(NODE *poly1, NODE *poly2)
{
    NODE *result = NULL;

    while (poly1 != NULL && poly2 != NULL)
    {
        if (poly1->exp > poly2->exp)
        {
            create_poly(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->link;
        }
        else if (poly1->exp < poly2->exp)
        {
            create_poly(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->link;
        }
        else
        {
            int coeffSum = poly1->coeff + poly2->coeff;
            if (coeffSum != 0)
            {
                create_poly(&result, coeffSum, poly1->exp);
            }
            poly1 = poly1->link;
            poly2 = poly2->link;
        }
    }

    while (poly1 != NULL)
    {
        create_poly(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->link;
    }

    while (poly2 != NULL)
    {
        create_poly(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->link;
    }

    return result;
}

void printPoly(NODE *poly)
{
    while (poly != NULL)
    {
        printf(""%d "", poly->coeff);
        poly = poly->link;
    }
    printf(""\n"");
}

int main()
{
    int n, m;
    scanf(""%d %d"", &n, &m);

    NODE *poly1 = NULL;
    NODE *poly2 = NULL;

    for (int i = 0; i < n + m; i++)
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n)
        {
            create_poly(&poly1, coeff, exp);
        }
        else
        {
            create_poly(&poly2, coeff, exp);
        }
    }

    NODE *result = evaluation_poly(poly1, poly2);
    printPoly(result);
    return 0;
}"
22728895,PES1UG22CS463,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Linked_List
{
    int data;
    struct Linked_List *link;
};

typedef struct Linked_List NODE;

NODE *read_link_list(int n)
{
    NODE *temp = NULL;
    NODE *head = NULL;
    NODE *ptr = NULL;

    for (int i = 0; i < n; ++i)
    {
        temp = (NODE *)malloc(sizeof(NODE));
        scanf(""%d"", &temp->data);
        temp->link = NULL;

        if (head == NULL)
        {
            head = temp;
        }
        else
        {
            ptr = head;
            while (ptr->link != NULL)
                ptr = ptr->link;
            ptr->link = temp;
        }
    }

    return head;
}

void fir_link_list_print(NODE *head, int n)
{
    NODE *ptr = head;
    int count = 0;

    while (ptr != NULL)
    {
        count++;
        printf(""%d "", ptr->data);
        ptr = ptr->link;

        if (count == n)
            break;
    }

    printf(""\n"");
}

void sec_link_list_print(NODE *head, int n, int mid)
{
    NODE *ptr = head;

    int count = 0;

    while (ptr != NULL)
    {
        count++;
        if (count > mid)
        {
            printf(""%d "", ptr->data);
        }

        ptr = ptr->link;
    }
}

int main()
{

    NODE *head;
    int numb;
    scanf(""%d"", &numb);
    head = read_link_list(numb);
    int mid_node;

    if (numb % 2 != 0)
        mid_node = (numb / 2) + 1;
    else
        mid_node = (numb / 2);

    fir_link_list_print(head, mid_node);
    sec_link_list_print(head, numb, mid_node);

    return 0;
}"
22739517,PES1UG22CS440,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct NODE {
    int coefficient;
    int exponent;
    struct NODE* next;
};

typedef struct NODE node;

node* createNode(int coeff, int exp) {
    node* newNode = (node*)malloc(sizeof(node));
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(node** poly, int coeff, int exp) {
    node* newNode = createNode(coeff, exp);
    
    if (*poly == NULL || exp > (*poly)->exponent) {
        newNode->next = *poly;
        *poly = newNode;
    } else {
        node* current = *poly;
        while (current->next != NULL && current->next->exponent >= exp) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

node* addPolynomials(node* poly1, node* poly2) {
    node* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int coeffSum = poly1->coefficient + poly2->coefficient;
            if (coeffSum != 0) {
                insertTerm(&result, coeffSum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    
    return result;
}

void printPolynomial(node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    node* poly1 = NULL;
    node* poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }
    
    node* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22739517,PES1UG22CS440,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct NODE{
    int num;
    struct NODE* next;
}*start;

typedef struct NODE node;

node* start1;
node* start2;

node* createNode(int data){
    node* newNode = (node*)malloc(sizeof(node));
    if(newNode == NULL){
        printf(""Overflow\n"");
        return NULL;
    }
    newNode->num = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(int data){
    
    node* temp = createNode(data);
    if(start == NULL){
        start = temp;
        return;
    }
    node *q = start;
    while(q->next != NULL){
        q = q->next;
    }
    q->next = temp;
}

int find_length()
{
    int c=0;
    node *temp=start;
    while(temp!=NULL)
    {
        temp=temp->next;
        c++;
    }
    return c;
}



int main() {
    int n;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++){
        int ele;
        scanf(""%d"",&ele);
        insertEnd(ele);
    }
    int length=find_length();
    int mid;
    if(length%2!=0)
    {
        mid=(int)((length+1)/2);
    }
    else
    {
        mid=(int)(length/2);
    }
    node *temp=start;
    for(int i=0;i<mid;i++)
    {
        
        printf(""%d "",temp->num);
        temp=temp->next;
        
        
    }
    printf(""\n"");
    for(int i=mid;i<length;i++)
    {
        printf(""%d "",temp->num);

        temp=temp->next;
    }
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}"
22744567,PES1UG22CS437,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
#include<math.h>
#include<string.h>
typedef struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
}NODE;

NODE* createNode(int coeff, int exp) {
    NODE *newnode = (NODE*)malloc(sizeof(NODE));
    newnode->coefficient = coeff;
    newnode->exponent = exp;
    newnode->next = NULL;
    return newnode;
}

void insert (NODE **poly, int coeff, int exp) {
    NODE *newnode = createNode(coeff, exp);
    
    if (*poly == NULL || exp > (*poly)->exponent) {
        newnode->next = *poly;
        *poly = newnode;
    } else {
        NODE* current = *poly;
        while (current->next != NULL && current->next->exponent >= exp) {
            current = current->next;
        }
        newnode->next = current->next;
        current->next = newnode;
    }
}

NODE* addPolynomials(NODE* poly1, NODE* poly2) {
    NODE* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insert(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insert(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int coeffSum = poly1->coefficient + poly2->coefficient;
            if (coeffSum != 0) {
                insert(&result, coeffSum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insert(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insert(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    
    return result;
}

void printPolynomial(NODE* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    NODE *poly1 = NULL;
    NODE *poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insert(&poly1, coeff, exp);
        } else {
            insert(&poly2, coeff, exp);
        }
    }
    
    NODE *result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22744567,PES1UG22CS437,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node *link;
}NODE;
NODE *head=NULL;
NODE* createnode(int ele)
{
    NODE *newnode=(NODE*)malloc(sizeof(NODE));
    newnode->data=ele;
    newnode->link=NULL;
    return newnode;
}
int find_length()
{
    int c=0;
    NODE *temp=head;
    while(temp!=NULL)
    {
        temp=temp->link;
        c++;
    }
    return c;
}
int main() {
    int n;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++)
    {
        int ele=0;
        scanf(""%d"",&ele);
        NODE* newnode=createnode(ele);
        if(head==NULL)
        {
            head=newnode;
            }
        else
        {
            NODE *temp=head;
            while(temp->link!=NULL)
            {
                temp=temp->link;
            }
            temp->link=newnode;
        }
    }
    int length=find_length();
    int mid;
    if(length%2!=0)
    {
        mid=(int)((length+1)/2);
    }
    else
    {
        mid=(int)(length/2);
    }
    NODE *temp=head;
    for(int i=0;i<mid;i++)
    {
        
        printf(""%d "",temp->data);
        temp=temp->link;
        
        
    }
    printf(""\n"");
    for(int i=mid;i<length;i++)
    {
        printf(""%d "",temp->data);

        temp=temp->link;
    }
       return 0;     
    }
    

"
22744569,PES2UG22CS560,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct st
{
    int n,m;
    struct st* next;
}node;

node* insl(node* head)
{
    node* a=malloc(sizeof(node));
    if(a==NULL)
    {
        printf(""Failed"");
        return NULL;
    }
    scanf(""%d %d"",&a->n,&a->m);
    a->next=NULL;
    if(head==NULL)
        return a;
    node* h=head;
    while(head->next)
        head=head->next;
    head->next=a;
    return h;
}

void printer(node* head1,node* head2)
{
    int v=(head1->m<head2->m)?head2->m:head1->m;
    int s=0;
    while(head1 && head2)
    {
        if(head1->m!=v && head2->m!=v)
        {
            printf(""%d "",s);
            v=(head1->m<head2->m)?head2->m:head1->m;
            s=0;
        }
        if(v==head1->m)
        {
            s=s+head1->n;
            head1=head1->next;
        }
        if(v==head2->m)
        {
            s=s+head2->n;
            head2=head2->next;
        }
    }
    if(head1==NULL)
    {
        while(head2)
        {
            if(head2->m!=v)
            {
                printf(""%d "",s);
                v=head2->m;
                s=0;
            }
            if(v==head2->m)
            {
                s=s+head2->n;
                head2=head2->next;
            }
        }
    }
    if(head2==NULL)
    {
        head2=head1;
        while(head2)
        {
            if(head2->m!=v)
            {
                printf(""%d "",s);
                v=head2->m;
                s=0;
            }
            if(v==head2->m)
            {
                s=s+head2->n;
                head2=head2->next;
            }
        }
    }
    printf(""%d "",s);
}

void display(node* head)
{
    if(head==NULL)
        return;
    printf(""%d %d\n"",head->n,head->m);
    display(head->next);
}

int main()
{
    int a;
    int b;
    node* head1=NULL;
    node* head2=NULL;
    scanf(""%d %d"",&a,&b);
    for(int i=0;i<a;i++)
        head1=insl(head1);
    for(int i=0;i<b;i++)
        head2=insl(head2);
    printer(head1,head2);
    return 0;
}
"
22744569,PES2UG22CS560,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node *next;
}NODE;

NODE *ll(int n)
{
    NODE *head;
    head=(NODE*)malloc(sizeof(NODE));
    NODE *ptr=head;
    head->next=NULL;
    scanf(""%d"",&head->data);
    for(int i=1;i<n;i++)
    {   
        ptr->next=(NODE*)malloc(sizeof(NODE));
        scanf(""%d"",&(ptr->next->data));
        ptr->next->next=NULL;
        ptr=ptr->next;
    }
    return head;
}

int size(NODE *head)
{
    NODE *ptr=head;
    int count=0;
    while(ptr!=NULL)
    {
        ptr=ptr->next;
        count++;
    }
    return count;
}

void display(NODE *p,int a,int m,int l1)
{
    for(int i=a;i<m;i++)
    {
        printf(""%d "",p->data);
        p=p->next;
    }
    printf(""\n"");
    for(int i=m;i<l1;i++)
    {
        printf(""%d "",p->data);
        p=p->next;
    }
}

int main()
{
    int n,l1,m;
    NODE *p=NULL; 
    scanf(""%d"",&n);
    p=ll(n);
    l1=size(p);
    if(l1%2!=0)
    {
        m=(l1/2)+1;
    }
    else
    {
        m=l1/2;
    }
    display(p,0,m,l1);
    return 0;
}
"
22744571,PES1UG22CS473,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
#include<math.h>


struct term {
    int c;
    int e;
    struct term* link;
};

void insert(struct term** p, int c, int e) {
    struct term* new_term = (struct term*)malloc(sizeof(struct term));
    new_term->c = c;
    new_term->e = e;
    new_term->link = NULL;

    if (*p == NULL) {
        *p = new_term;
    } else {
        struct term* temp = *p;
        while (temp->link != NULL) {
            temp = temp->link;
        }
        temp->link = new_term;
    }
}

struct term* add(struct term* p1, struct term* p2) {
    struct term* result = NULL;

    while (p1 != NULL && p2 != NULL) {
        if (p1->e > p2->e) {
            insert(&result, p1->c, p1->e);
            p1 = p1->link;
        } else if (p1->e < p2->e) {
            insert(&result, p2->c, p2->e);
            p2 = p2->link;
        } else {
            insert(&result, p1->c + p2->c, p1->e);
            p1 = p1->link;
            p2 = p2->link;
        }
    }

    while (p1 != NULL) {
        insert(&result, p1->c, p1->e);
        p1 = p1->link;
    }
    while (p2 != NULL) {
        insert(&result, p2->c, p2->e);
        p2 = p2->link;
    }

    return result;
}

void print(struct term* p) {
    while (p != NULL) {
        printf(""%d "", p->c);
        p = p->link;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct term* p1 = NULL;
    struct term* p2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int c, e;
        scanf(""%d %d"", &c, &e);
        if (i < n) {
            insert(&p1, c, e);
        } else {
            insert(&p2, c, e);
        }
    }

    struct term* result = add(p1, p2);

    print(result);

    return 0;
}
"
22744571,PES1UG22CS473,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct Node{
    int data;
    struct Node *link;
}node;



node *read(int n)
{
    node *temp=NULL;
    node *head=NULL;
    node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct node *)malloc(sizeof(node));
        scanf(""%d"",&temp->data);
        temp->link=NULL;

        if(head==NULL)
        { head=temp;
        }
        else{
        p=head;
        while(p->link!=NULL)
            p=p->link;
        p->link=temp;
        }
    }
    return head;

}

void disp_ll1(node *head,int n)
{
    int c=0;
    node *p=head;
    while(p!=NULL)
    { c++;
        printf(""%d "",p->data);
        p=p->link;
        if(c==n)
            break;
    }
    printf(""\n"");
        
}

void disp_ll2(node *head,int n, int pos)
{
    int c=0;
    node *p=head;
    while(p!=NULL)
    { c++;
        if(c>pos)
        { printf(""%d "",p->data);
        }
     p=p->link;
    }
    
}
int main() {
    
    node *n_node;
    int n;
    scanf(""%d"",&n);
    n_node=read(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    disp_ll1(n_node,mid);
    disp_ll2(n_node,n,mid);
    
    return 0;
}
"
22744577,PES1UG22CS476,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Term 
{
    int c;
    int exp;
    struct Term* n;
};

void inserterm(struct Term** p, int c, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL) 
    {
        *p = newTerm;
    }
    else 
    {
        struct Term* current = *p;
        while (current->n != NULL) 
        {
            current = current->n;
        }
        current->n = newTerm;
    }
}

struct Term* addpolynomials(struct Term* p1, struct Term* p2) 
{
    struct Term* result = NULL;
    struct Term* current1 = p1;
    struct Term* current2 = p2;
    
    while (current1 != NULL && current2 != NULL)
    {
        if (current1->exp > current2->exp) 
        {
            inserterm(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp) 
        {
            inserterm(&result, current2->c, current2->exp);
            current2 = current2->n;
        } 
        else 
        {
            inserterm(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }
    
    while (current1 != NULL) 
    {
        inserterm(&result, current1->c, current1->exp);
        current1 = current1->n;
    }
    
    while (current2 != NULL) 
    {
        inserterm(&result, current2->c, current2->exp);
        current2 = current2->n;
    }
    
    return result;
}

void printpolynomial(struct Term* poly) 
{
    struct Term* current = poly;
    while (current != NULL) 
    {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            inserterm(&poly1, coef, exp);
        } else {
            inserterm(&poly2, coef, exp);
        }
    }
    
    struct Term* result = addpolynomials(poly1, poly2);
    printpolynomial(result);
    
    return 0;
}"
22744577,PES1UG22CS476,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node
{
    int data;
    struct Node *next;
};

struct Node *create(int value) 
{
    struct Node *newnode = (struct Node *)malloc(sizeof(struct Node));
    newnode->data = value;
    newnode->next = NULL;
    return newnode;
}

void insertend(struct Node **head, int value) 
{
    struct Node *newnode = create(value);
    if (*head == NULL) 
    {
        *head = newnode;
    } 
    else 
    {
        struct Node *temp = *head;
        while (temp->next != NULL)
        {
            temp = temp->next;
        }
        temp->next = newnode;
    }
}

void split(struct Node *head)
{
    if (head == NULL) {
        printf(""Empty List\n"");
        return;
    }

    struct Node *slowptr = head;
    struct Node *fastptr = head;

    while (fastptr->next != NULL && fastptr->next->next != NULL) {
        slowptr = slowptr->next;
        fastptr = fastptr->next->next;
    }

    struct Node *firsthalf = head;
    struct Node *secondhalf = slowptr->next;
    slowptr->next = NULL;

    struct Node *temp = firsthalf;
    while (temp != NULL) 
    {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");

    temp = secondhalf;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

int main()
{
    int n;
    scanf(""%d"", &n);
    struct Node *head = NULL;

    int value;
    for (int i = 0; i < n; i++) 
    {
        scanf(""%d"", &value);
        insertend(&head, value);
    }
    split(head);

    return 0;
}"
22744579,PES1UG22CS441,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>


struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

   
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}"
22744579,PES1UG22CS441,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}"
22744580,PES1UG22CS456,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int coef;
    int pow;
    struct node* next;
} NODE;

NODE *p1,*p2,*p3,*temp2,*temp,*temp3;

void insertfront(int n) {
    if (n==1) {
        NODE *ptr=malloc(sizeof(NODE));
        scanf(""%d %d"",&ptr->coef,&ptr->pow);
        ptr->next=NULL;

        if (p1==NULL){
            p1=ptr;
        }
        else{
            temp = p1;
            while(temp->next != NULL){
                temp = temp->next;
            }
            temp->next = ptr;
        }
    } 
    else if (n == 2) {
        NODE *ptr = malloc(sizeof(NODE));
        scanf(""%d %d"", &ptr->coef, &ptr->pow);
        ptr->next = NULL;

        if (p2 == NULL){
            p2 = ptr;
        }
        else{
            temp = p2;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = ptr;
        }
    }
}

int main() {
    int size1, size2;
    scanf(""%d %d"", &size1, &size2);
    for (int i = 0; i < size1; i++) {
        insertfront(1);
    }

    for (int i = 0; i < size2; i++) {
        insertfront(2);
    }
    temp = p1;
    temp2 = p2;
    while (temp != NULL || temp2 != NULL) {
        NODE *ptr = malloc(sizeof(NODE));
        ptr->next = NULL;

        if (temp != NULL && temp2 != NULL) {
            if (temp->pow == temp2->pow) {
                ptr->coef = temp->coef + temp2->coef;
                ptr->pow = temp->pow;
                temp = temp->next;
                temp2 = temp2->next;
            }
            else if (temp->pow > temp2->pow) {
                ptr->coef = temp->coef;
                ptr->pow = temp->pow;
                temp = temp->next;
            }
            else {
                ptr->coef = temp2->coef;
                ptr->pow = temp2->pow;
                temp2 = temp2->next;
            }
        }
        else if (temp != NULL) {
            ptr->coef = temp->coef;
            ptr->pow = temp->pow;
            temp = temp->next;
        } else {
            ptr->coef = temp2->coef;
            ptr->pow = temp2->pow;
            temp2 = temp2->next;
        }

        if (p3 == NULL) {
            p3 = ptr;
            temp3 = p3;
        } else {
            temp3->next = ptr;
            temp3 = temp3->next;
        }
    }

    temp3 = p3;
    while (temp3 != NULL) {
        printf(""%d "", temp3->coef);
        temp3 = temp3->next;
    }


    return 0;
}
"
22744580,PES1UG22CS456,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node*next;
};
struct node* create(int n)
{
    struct node* head=(struct node*)malloc(sizeof(struct node));
    struct node*ptr=head;
    head->next=NULL;
    scanf(""%d"",&head->data);
    for(int i=1;i<n;i++)
    {   
        ptr->next=(struct node*)malloc(sizeof(struct node));
        scanf(""%d"",&(ptr->next->data));
        ptr->next->next=NULL;
        ptr=ptr->next;
    }
    return head;
}
int length(struct node*head)
{
    struct node*ptr=head;
    int count=0;
    while(ptr!=NULL)
    {
        ptr=ptr->next;
        count++;
    }
    return count;
}
void display(struct node*p,int a,int b,int c)
{
    for(int i=a;i<b;i++)
    {
        printf(""%d "",p->data);
        p=p->next;
    }
    printf(""\n"");
    for(int i=b;i<c;i++)
    {
        printf(""%d "",p->data);
        p=p->next;
    }
}
int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n,l1,m;
    struct node* p=NULL;
    scanf(""%d"",&n);
    p=create(n);
    l1=length(p);
    if(l1%2!=0)
        m=l1/2+1;
    else
        m=l1/2;
    display(p,0,m,l1);
    return 0;
}"
22744587,PES1UG22CS457,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
typedef struct st
{
    int n,m;
    struct st* next;
}node;
node* insl(node* head)
{
    node* a=malloc(sizeof(node));
    if(a==NULL)
    {
        printf(""Failed"");
        return NULL;
    }
    scanf(""%d %d"",&a->n,&a->m);
    a->next=NULL;
    if(head==NULL)
        return a;
    node* h=head;
    while(head->next)
        head=head->next;
    head->next=a;
    return h;
}
void printer(node* head1,node* head2)
{
    int v=(head1->m<head2->m)?head2->m:head1->m;
    int s=0;
    while(head1 && head2)
    {
        if(head1->m!=v && head2->m!=v)
        {
            printf(""%d "",s);
            v=(head1->m<head2->m)?head2->m:head1->m;
            s=0;
        }
        if(v==head1->m)
        {
            s=s+head1->n;
            head1=head1->next;
        }
        if(v==head2->m)
        {
            s=s+head2->n;
            head2=head2->next;
        }
    }
    if(head1==NULL)
    {
        while(head2)
        {
            if(head2->m!=v)
            {
                printf(""%d "",s);
                v=head2->m;
                s=0;
            }
            if(v==head2->m)
            {
                s=s+head2->n;
                head2=head2->next;
            }
        }
    }
    if(head2==NULL)
    {
        head2=head1;
        while(head2)
        {
            if(head2->m!=v)
            {
                printf(""%d "",s);
                v=head2->m;
                s=0;
            }
            if(v==head2->m)
            {
                s=s+head2->n;
                head2=head2->next;
            }
        }
    }
    printf(""%d "",s);
}
int main()
{
    int a;
    int b;
    node* head1=NULL;
    node* head2=NULL;
    scanf(""%d %d"",&a,&b);
    for(int i=0;i<a;i++)
        head1=insl(head1);
    for(int i=0;i<b;i++)
        head2=insl(head2);
    printer(head1,head2);
    return 0;
}"
22744587,PES1UG22CS457,Divide Linked List 2,15,"#include<stdio.h>
#include <stdlib.h>
typedef struct st
{
    int val;
    struct st* next;
}node;
node* insl(node* head)
{
    node* a=malloc(sizeof(node));
    scanf(""%d"",&a->val);
    a->next=NULL;
    if(head==NULL)
        return a;
    node* h=head;
    while(head->next)
        head=head->next;
    head->next=a;
    return h;
}
node* midp(node* head,int m)
{
    if(m%2==1)
        m=m/2+1;
    else
        m=m/2;
    int c=1;
    while(c<m)
    {
        head=head->next;
        c++;
    }
    node* r=head->next;
    head->next=NULL;
    return r;
}
void display(node* head)
{
    if(head==NULL)
        return;
    printf(""%d "",head->val);
    display(head->next);
}
int main()
{
    int n;
    scanf(""%d"",&n);
    node* head=NULL;
    for(int i=0;i<n;i++)
        head=insl(head);
    node* h2=midp(head,n);
    display(head);
    printf(""\n"");
    display(h2);
    return 0;
}"
22744588,PES1UG22CS446,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Terms_Poly {
    int c;
    int expt;
    struct Terms_Poly* n;
};

void insert_Poly(struct Terms_Poly** p, int c, int expt) {
    struct Terms_Poly* new_Poly = (struct Terms_Poly*)malloc(sizeof(struct Terms_Poly));
    new_Poly->c = c;
    new_Poly->expt = expt;
    new_Poly->n = NULL;
    
    if (*p == NULL) {
        *p = new_Poly;
    } else {
        struct Terms_Poly* current = *p;
        while (current->n != NULL) {
            current = current->n;
        }
        current->n = new_Poly;
    }
}

struct Terms_Poly* addPolynomials(struct Terms_Poly* p1, struct Terms_Poly* p2) {
    struct Terms_Poly* result = NULL;
    struct Terms_Poly* term1 = p1;
    struct Terms_Poly* term2 = p2;
    
    while (term1 != NULL && term2 != NULL) {
        if (term1->expt > term2->expt) {
            insert_Poly(&result, term1->c, term1->expt);
            term1 = term1->n;
        } else if (term1->expt < term2->expt) {
            insert_Poly(&result, term2->c, term2->expt);
            term2 = term2->n;
        } else {
            insert_Poly(&result, term1->c + term2->c, term1->expt);
            term1 = term1->n;
            term2 = term2->n;
        }
    }
    
    while (term1 != NULL) {
        insert_Poly(&result, term1->c, term1->expt);
        term1 = term1->n;
    }
    
    while (term2 != NULL) {
        insert_Poly(&result, term2->c, term2->expt);
        term2 = term2->n;
    }
    
    return result;
}

// Function to print the polynomial
void printPoly(struct Terms_Poly* poly) {
    struct Terms_Poly* current = poly;
    while (current != NULL) {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Terms_Poly* poly1 = NULL;
    struct Terms_Poly* poly2 = NULL;
    
    int coef, expt;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &expt);
        if (i < n) {
            insert_Poly(&poly1, coef, expt);
        } else {
            insert_Poly(&poly2, coef, expt);
        }
    }
    
    struct Terms_Poly* result = addPolynomials(poly1, poly2);
    printPoly(result);
    
    return 0;
}"
22744588,PES1UG22CS446,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};
int main() {

    int n, m;
    scanf(""%d"", &n);
    struct Node *p = (struct Node*) malloc(sizeof(struct Node));
        scanf(""%d"", &p -> data);
        p -> next = NULL;
    struct Node *q = p;
    for(int i = 1; i < n; i ++)
    {
        struct Node *node = (struct Node*) malloc(sizeof(struct Node));
        scanf(""%d"", &node -> data);
        node -> next = NULL;
        p -> next = node;
        p = p -> next;
    }
    if (n % 2 == 0)
    {
        m = n / 2;
    }
    else
    {
        m = n / 2 + 1;
    }
    for(int j = 0; j < m; j ++)
    {
        printf(""%d "", q -> data);
        q = q -> next;
    }
    printf(""\n"");
    for(int k = 0; k < n - m; k ++)
    {
        printf(""%d "", q -> data);
        q = q -> next;
    }
    return 0;
}"
22744589,PES1UG22CS451,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};
typedef struct Node Node;
Node* createNode(int coefficient, int exponent) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->coefficient = coefficient;
    newNode->exponent = exponent;
    newNode->next = NULL;
    return newNode;
}
void insertTerm(Node** poly, int coefficient, int exponent) {
    Node* newNode = createNode(coefficient, exponent);
    if (*poly == NULL) {
        *poly = newNode;
    } else {
        Node* current = *poly;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}
void addPolynomials(Node* poly1, Node* poly2, Node** result) {
    while (poly1 != NULL || poly2 != NULL) {
        int coeff1 = (poly1 != NULL) ? poly1->coefficient : 0;
        int exp1 = (poly1 != NULL) ? poly1->exponent : -1;
        int coeff2 = (poly2 != NULL) ? poly2->coefficient : 0;
        int exp2 = (poly2 != NULL) ? poly2->exponent : -1;
        if (exp1 == exp2) {
            insertTerm(result, coeff1 + coeff2, exp1);
            poly1 = poly1->next;
            poly2 = poly2->next;
        } else if (exp1 > exp2) {
            insertTerm(result, coeff1, exp1);
            poly1 = poly1->next;
        } else {
            insertTerm(result, coeff2, exp2);
            poly2 = poly2->next;
        }
    }
}
void printPolynomial(Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
}
int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    Node* poly1 = NULL;
    Node* poly2 = NULL;
    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }
    Node* result = NULL;
    addPolynomials(poly1, poly2, &result);
    printPolynomial(result);
    while (result != NULL) {
        Node* temp = result;
        result = result->next;
        free(temp);
    }
    return 0;
}"
22744589,PES1UG22CS451,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node 
{
    int data;
    struct Node* next;
};

typedef struct Node Node;

Node* createnode(int data) {
    Node* newnode=(Node*)malloc(sizeof(Node));
    newnode->data=data;
    newnode->next=NULL;
    return newnode;
}

void insertEnd(Node** head, int data) {
    Node* newnode=createnode(data);
    if (*head==NULL) {
        *head=newnode;
    } else {
        Node* current=*head;
        while (current->next!=NULL) {
            current=current->next;
        }
        current->next=newnode;
    }
}

void printList(Node* head) {
    while (head!=NULL) {
        printf(""%d "",head->data);
        head=head->next;
    }
    printf(""\n"");
}

void splitLinkedList(Node* head, Node** firstHalf, Node** secondHalf) {
    if (head == NULL||head->next==NULL) {
        *firstHalf=head;
        *secondHalf=NULL;
        return;
    }

    Node* slow=head;
    Node* fast=head->next;

    while (fast!=NULL) {
        fast=fast->next;
        if (fast!=NULL) {
            slow=slow->next;
            fast=fast->next;
        }
    }

    *firstHalf=head;
    *secondHalf=slow->next;
    slow->next=NULL;
}

int main() {
    int n;
    scanf(""%d"",&n);

    Node* head=NULL;

    for (int i=0;i<n;i++) {
        int data;
        scanf(""%d"",&data);
        insertEnd(&head,data);
    }

    Node* firstHalf=NULL;
    Node* secondHalf=NULL;

    splitLinkedList(head,&firstHalf,&secondHalf);

    printList(firstHalf);
    printList(secondHalf);

    // Free memory
    while (head!=NULL) {
        Node* temp=head;
        head=head->next;
        free(temp);
    }

    return 0;
}"
22744603,PES1UG22CS450,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node
{
    int coeff, power;
    struct node* next;
};

struct node* new(int coeff, int power)
{
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    newnode->coeff = coeff;
    newnode->power = power;
    newnode->next = NULL;
    return newnode;
}

struct node* insertlast(struct node *head,int coeff,int power)
{
    struct node* newnode = new(coeff,power);
    if(head == NULL){
        return newnode;
    }else{
        struct node* temp = head;
        while(temp->next != NULL){
            temp = temp->next;
        }
        temp->next = newnode;
        return head;
    }
}

void disp(struct node* head)
{
    struct node* temp = head;
    while(temp != NULL)
    {
        printf(""%d "",temp->coeff);
        temp = temp->next;
    }
}

int main() {
    struct node* head = NULL;
    struct node* head1 = NULL;
    struct node* head2 = NULL;
    struct node* temp1;
    struct node* temp2;
    int n, m, i, coeff, power;
    scanf(""%d %d"",&n,&m);
    for(i = 0; i < n; i++)
    {
        scanf(""%d"",&coeff);
        scanf(""%d"",&power);
        head1 = insertlast(head1,coeff,power);
    }
    for(i = 0; i < m; i++)
    {
        scanf(""%d"",&coeff);
        scanf(""%d"",&power);
        head2 = insertlast(head2,coeff,power);
    }
    temp1 = head1;
    temp2 = head2;
    while((temp1 != NULL) && (temp2 != NULL))
    {
        if(temp1->power == temp2->power)
        {
            coeff = temp1->coeff + temp2->coeff;
            head = insertlast(head, coeff, power);
            temp1 = temp1->next;
            temp2 = temp2->next;
        }
        else if(temp1->power > temp2->power)
        {
            head = insertlast(head, temp1->coeff, temp1->power);
            temp1 = temp1->next;
        }
        else
        {
            head = insertlast(head, temp2->coeff, temp2->power);
            temp2 = temp2->next;
        }
    }
    while(temp1 != NULL)
    {
        head = insertlast(head, temp1->coeff, temp1->power);
        temp1 = temp1->next;
    }
    while(temp2 != NULL)
    {
        head = insertlast(head, temp2->coeff, temp2->power);
        temp2 = temp2->next;
    }
    disp(head);
    return 0;
}
"
22744603,PES1UG22CS450,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node* next;
};

struct node* new(int data)
{
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    newnode->data = data;
    newnode->next = NULL;
    return newnode;
}

void display(struct node* head)
{
    struct node* temp = head;
    while(temp != NULL)
    {
        printf(""%d "",temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

struct node* lastinsert(struct node *head, int data)
{
    struct node* newnode = new(data);
    if(head == NULL){
        return newnode;
    }else{
        struct node* temp = head;
        while(temp->next != NULL){
            temp = temp->next;
        }
        temp->next = newnode;
        return head;
    }
}

int main() {

    struct node* head = NULL;
    struct node *fast, *slow, *head2;
    int n, data, i;
    scanf(""%d"",&n);
    for(i = 0; i < n; i++)
    {
        scanf(""%d"", &data);
        head = lastinsert(head, data);
    }
    fast = head;
    slow = head;
    while((fast->next != NULL) && (fast->next->next != NULL))
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    head2 = slow->next;
    slow->next = NULL;
    display(head);
    display(head2);
    return 0;
}
"
22744605,PES1UG22CS439,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct T_rm {
    int coeff;
    int exp;
    struct T_rm* next;
};

struct T_rm* addPolynomials(struct T_rm* p1, struct T_rm* p2) {
    struct T_rm* result = NULL;
    struct T_rm* tail = NULL;
    
    while (p1 != NULL || p2 != NULL) {
        struct T_rm* newT_rm = (struct T_rm*)malloc(sizeof(struct T_rm));
        newT_rm->next = NULL;
        
        if (p1 == NULL || (p2 != NULL && p1->exp < p2->exp)) {
            newT_rm->coeff = p2->coeff;
            newT_rm->exp = p2->exp;
            p2 = p2->next;
        } else if (p2 == NULL || p1->exp > p2->exp) {
            newT_rm->coeff = p1->coeff;
            newT_rm->exp = p1->exp;
            p1 = p1->next;
        } else {
            newT_rm->coeff = p1->coeff + p2->coeff;
            newT_rm->exp = p1->exp;
            p1 = p1->next;
            p2 = p2->next;
        }
        
        if (result == NULL) {
            result = newT_rm;
            tail = newT_rm;
        } else {
            tail->next = newT_rm;
            tail = newT_rm;
        }
    }
    
    return result;
}

void printPolynomial(struct T_rm* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct T_rm* poly1 = NULL;
    struct T_rm* poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        struct T_rm* newT_rm = (struct T_rm*)malloc(sizeof(struct T_rm));
        newT_rm->coeff = coef;
        newT_rm->exp = exp;
        newT_rm->next = NULL;
        
        if (i < n) {
            if (poly1 == NULL) {
                poly1 = newT_rm;
            } else {
                struct T_rm* current = poly1;
                while (current->next != NULL) {
                    current = current->next;
                }
                current->next = newT_rm;
            }
        } else {
            if (poly2 == NULL) {
                poly2 = newT_rm;
            } else {
                struct T_rm* current = poly2;
                while (current->next != NULL) {
                    current = current->next;
                }
                current->next = newT_rm;
            }
        }
    }
    
    struct T_rm* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}
"
22744605,PES1UG22CS439,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};
int main()
{
    int n,m;
    scanf(""%d "",&n);
    struct Node *p = (struct Node*)malloc(sizeof(struct Node));
        scanf(""%d "",&p->data);
        p->next=NULL;
    struct Node *q=p;
    for(int i=1;i<n;i++)
    {
        struct Node *node = (struct Node*)malloc(sizeof(struct Node));
        scanf(""%d "",&node->data);
        node->next=NULL;
        p->next=node;
        p=p->next;
    }
    if(n%2==0)
    {
        m=n/2;
    }
    else
    {
        m=n/2+1;
    }
    for(int j=0;j<m;j++)
    {
        printf(""%d "",q->data);
        q=q->next;
    }
    printf(""\n"");
    for(int k=0;k<n-m;k++)
    {
        printf(""%d "",q->data);
        q=q->next;
    }
    return 0;
}"
22744611,PES1UG22CS467,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to insert a new term at the end of a linked list
void insertTerm(struct Term** head, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*head == NULL) {
        *head = newTerm;
        return;
    }

    struct Term* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;
}

// Function to add two polynomials represented as linked lists
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print a polynomial represented as a linked list
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22744611,PES1UG22CS467,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

typedef struct Node Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(Node** head, int data) {
    Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void printList(Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

void splitLinkedList(Node* head, Node** firstHalf, Node** secondHalf) {
    if (head == NULL || head->next == NULL) {
        *firstHalf = head;
        *secondHalf = NULL;
        return;
    }

    Node* slow = head;
    Node* fast = head->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *firstHalf = head;
    *secondHalf = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    Node* firstHalf = NULL;
    Node* secondHalf = NULL;

    splitLinkedList(head, &firstHalf, &secondHalf);

    printList(firstHalf);
    printList(secondHalf);

    // Free memory
    while (head != NULL) {
        Node* temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}"
22744612,PES1UG22CS486,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Term 
{
    int coefficient;
    int exponent;
    struct Term* next;
};
void insertTerm(struct Term** head, int coefficient, int exponent) 
{
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coefficient;
    newTerm->exponent = exponent;
    newTerm->next = NULL;
    if (*head == NULL) 
    {
        *head = newTerm;
        return;
    }
    struct Term* current = *head;
    while (current->next != NULL) 
    {
        current = current->next;
    }
    current->next = newTerm;
}
struct Term* addPolynomials(struct Term* polynomial1, struct Term* polynomial2) 
{
    struct Term* result = NULL;
    while (polynomial1 != NULL && polynomial2 != NULL) 
    {
        if (polynomial1->exponent > polynomial2->exponent) 
        {
            insertTerm(&result, polynomial1->coefficient, polynomial1->exponent);
            polynomial1 = polynomial1->next;
        } 
        else if (polynomial1->exponent < polynomial2->exponent) 
        {
            insertTerm(&result, polynomial2->coefficient, polynomial2->exponent);
            polynomial2 = polynomial2->next;
        } 
        else 
        {
            insertTerm(&result, polynomial1->coefficient + polynomial2->coefficient, polynomial1->exponent);
            polynomial1 = polynomial1->next;
            polynomial2 = polynomial2->next;
        }
    }
    while (polynomial1 != NULL) 
    {
        insertTerm(&result, polynomial1->coefficient, polynomial1->exponent);
        polynomial1 = polynomial1->next;
    }
    while (polynomial2 != NULL) 
    {
        insertTerm(&result, polynomial2->coefficient, polynomial2->exponent);
        polynomial2 = polynomial2->next;
    }
    return result;
}
void printPolynomial(struct Term* polynomial) 
{
    struct Term* current = polynomial;
    while (current != NULL) 
    {
        printf(""%d "", current->coefficient);
        current = current->next;
        if (current != NULL) 
        {
        }
    }
    printf(""\n"");
}
int main() 
{
    int a, b;
    scanf(""%d %d"", &a, &b);
    struct Term* polynomial1 = NULL;
    struct Term* polynomial2 = NULL;
    for (int i = 0; i < a; i++) 
    {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);
        insertTerm(&polynomial1, coefficient, exponent);
    }
    for (int i = 0; i < b; i++) 
    {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);
        insertTerm(&polynomial2, coefficient, exponent);
    }
    struct Term* result = addPolynomials(polynomial1, polynomial2);
    printPolynomial(result);
    return 0;
}
"
22744612,PES1UG22CS486,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};
typedef struct Node Node;
Node *readlinkedlist(int n)
{
    Node *temp = NULL;
    Node *head = NULL;
    Node *p = NULL;
    
    for(int i = 0;i<n;i++)
    {
        temp = (struct Node*)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next = NULL;
        
        if(head == NULL)
        {
            head = temp;
        }
        else
        {
            p = head;
            while(p->next != NULL)
                p = p->next;
            p->next = temp;
            
        }      
    }
    return head;
}
void printlinkedlist(Node *head, int n)
{
    int count_ = 0;
    Node *p = head;
    while(p != NULL)
    {
        count_++;
        printf(""%d "",p->data);
        p = p->next;
        if(count_ == n)
            break;
    }
    printf(""\n"");
}
void printlinkedlist2nd(Node *head,int n, int middle)
{
    int count_ = 0;
    Node *p = head;
    while(p != NULL)
    {
        count_++;
        if(count_>middle)
        {
            printf(""%d "",p->data);
        }
        p = p->next;
    }
}
int main() {
    Node *x;
    int n;
    scanf(""%d"",&n);
    x = readlinkedlist(n);
    int middle;
    if(n%2 != 0)
        middle = (n/2) + 1;
    else
        middle = (n/2);
    printlinkedlist(x,middle);
    printlinkedlist2nd(x,n,middle);
    
    return 0;
}
"
22744613,PES1UG22CS438,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Poly_term {
    int coeff;
    int exp;
    struct Poly_term *next;
};

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Poly_term *poly1 = NULL;
    struct Poly_term *poly2 = NULL;
    
    struct Poly_term *p1 = NULL;
    struct Poly_term *p2 = NULL;

    for (int i = 0; i < n; i++) {
        struct Poly_term *term = (struct Poly_term*)malloc(sizeof(struct Poly_term));
        scanf(""%d %d"", &term->coeff, &term->exp);
        term->next = NULL;
        
        if (poly1 == NULL) {
            poly1 = term;
            p1 = poly1;
        } else {
            p1->next = term;
            p1 = p1->next;
        }
    }

    for (int k = 0; k < m; k++) {
        struct Poly_term *term = (struct Poly_term*)malloc(sizeof(struct Poly_term));
        scanf(""%d %d"", &term->coeff, &term->exp);
        term->next = NULL;
        
        if (poly2 == NULL) {
            poly2 = term;
            p2 = poly2;
        } else {
            p2->next = term;
            p2 = p2->next;
        }
    }
    
    int coeff, exp;
    if (poly1->exp > poly2->exp) {
        exp = poly1->exp;
    } else {
        exp = poly2->exp;
    }
    
    for (int j = exp; j >= 0; j--) {
        coeff = 0;
        
        if (poly1 != NULL && poly1->exp == j) {
            coeff = poly1->coeff;
            poly1 = poly1->next;
        }
        
        if (poly2 != NULL && poly2->exp == j) {
            coeff = coeff + poly2->coeff;
            poly2 = poly2->next;
        }
        
        if (coeff != 0) {
            printf(""%d "", coeff);
        }
    }
    
    return 0;
}
"
22744613,PES1UG22CS438,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Node{
    int data;
    struct Node *next;
};
int main() {

    int n, m;
    scanf(""%d"", &n);
    struct Node *p = (struct Node*) malloc(sizeof(struct Node));
        scanf(""%d"", &p -> data);
        p -> next = NULL;
    struct Node *q = p;
    for(int i = 1; i < n; i ++)
    {
        struct Node *node = (struct Node*) malloc(sizeof(struct Node));
        scanf(""%d"", &node -> data);
        node -> next = NULL;
        p -> next = node;
        p = p -> next;
    }
    if (n % 2 == 0)
    {
        m = n / 2;
    }
    else
    {
        m = n / 2 + 1;
    }
    for(int j = 0; j < m; j ++)
    {
        printf(""%d "", q -> data);
        q = q -> next;
    }
    printf(""\n"");
    for(int k = 0; k < n - m; k ++)
    {
        printf(""%d "", q -> data);
        q = q -> next;
    }
    return 0;
}
"
22744614,PES1UG22CS492,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node
{
    int coefficient;
    int exponent;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp)
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;
    return newNode;
}

void create_polynomial(struct Node** poly, int coeff, int exp)
{
    struct Node* newNode = createNode(coeff, exp);
    
    if (*poly == NULL || exp > (*poly)->exponent)
    {
        newNode->next = *poly;
        *poly = newNode;
    } else 
    {
        struct Node* current = *poly;
        while (current->next != NULL && current->next->exponent >= exp)
        {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

struct Node* evaluation_polynomial(struct Node* poly1, struct Node* poly2) 
{
    struct Node* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent)
        {
            create_polynomial(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) 
        {
            create_polynomial(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else 
        {
            int coeffSum = poly1->coefficient + poly2->coefficient;
            if (coeffSum != 0)
            {
                create_polynomial(&result, coeffSum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL)
    {
        create_polynomial(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        create_polynomial(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    
    return result;
}

void display(struct Node* poly)
{
    while (poly != NULL)
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main()
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            create_polynomial(&poly1, coeff, exp);
        }
        else
        {
            create_polynomial(&poly2, coeff, exp);
        }
    }
    
    struct Node* result = evaluation_polynomial(poly1, poly2);
    display(result);
    
    return 0;
}"
22744614,PES1UG22CS492,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node *link;
}NODE;
NODE *head=NULL;
NODE* createnode(int ele)
{
    NODE *newnode=(NODE*)malloc(sizeof(NODE));
    newnode->data=ele;
    newnode->link=NULL;
    return newnode;
}
int find_length()
{
    int c=0;
    NODE *temp=head;
    while(temp!=NULL)
    {
        temp=temp->link;
        c++;
    }
    return c;
}
int main() {
    int n;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++)
    {
        int ele=0;
        scanf(""%d"",&ele);
        NODE* newnode=createnode(ele);
        if(head==NULL)
        {
            head=newnode;
            }
        else
        {
            NODE *temp=head;
            while(temp->link!=NULL)
            {
                temp=temp->link;
            }
            temp->link=newnode;
        }
    }
    int length=find_length();
    int mid;
    if(length%2!=0)
    {
        mid=(int)((length+1)/2);
    }
    else
    {
        mid=(int)(length/2);
    }
    NODE *temp=head;
    for(int i=0;i<mid;i++)
    {
        
        printf(""%d "",temp->data);
        temp=temp->link;
        
        
    }
    printf(""\n"");
    for(int i=mid;i<length;i++)
    {
        printf(""%d "",temp->data);

        temp=temp->link;
    }
       return 0;     
    }"
22744620,PES1UG22CS448,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
}Node;


Node* createNode(int coefficient, int exponent) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->coefficient = coefficient;
    newNode->exponent = exponent;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(Node** poly, int coefficient, int exponent) {
    Node* newNode = createNode(coefficient, exponent);
    if (*poly == NULL) {
        *poly = newNode;
    } 
    else {
        Node* current = *poly;
        while (current->next != NULL) 
        {
            current = current->next;
        }
        current->next = newNode;
    }
}

void addPolynomials(Node* poly1, Node* poly2, Node** result) 
{
    while (poly1 != NULL || poly2 != NULL) 
    {
        int coeff1 = (poly1 != NULL) ? poly1->coefficient : 0;
        int exp1 = (poly1 != NULL) ? poly1->exponent : -1;
        int coeff2 = (poly2 != NULL) ? poly2->coefficient : 0;
        int exp2 = (poly2 != NULL) ? poly2->exponent : -1;

        if (exp1 == exp2) 
        {
            insertTerm(result, coeff1 + coeff2, exp1);
            poly1 = poly1->next;
            poly2 = poly2->next;
        } else if (exp1 > exp2)
        {
            insertTerm(result, coeff1, exp1);
            poly1 = poly1->next;
        } else
        {
            insertTerm(result, coeff2, exp2);
            poly2 = poly2->next;
        }
    }
}

void printPolynomial(Node* poly) {
    while (poly != NULL)
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Node* poly1 = NULL;
    Node* poly2 = NULL;
    
    for (int i = 0; i < n + m; i++)
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    Node* result = NULL;
    addPolynomials(poly1, poly2, &result);

    printPolynomial(result);

    while (result != NULL) {
        Node* temp = result;
        result = result->next;
        free(temp);
    }

    return 0;
}
"
22744620,PES1UG22CS448,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
}Node;

struct node *head,*newNode;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(Node** head, int data) {
    Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void printList(Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

void splitLinkedList(Node* head, Node** firstHalf, Node** secondHalf) {
    if (head == NULL || head->next == NULL) {
        *firstHalf = head;
        *secondHalf = NULL;
        return;
    }

    Node* slow = head;
    Node* fast = head->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *firstHalf = head;
    *secondHalf = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    Node* firstHalf = NULL;
    Node* secondHalf = NULL;

    splitLinkedList(head, &firstHalf, &secondHalf);

    printList(firstHalf);
    printList(secondHalf);

    while (head != NULL) {
        Node* temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}
"
22744623,PES1UG22CS445,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>


struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** head, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*head == NULL) {
        *head = newTerm;
        return;
    }

    struct Term* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newTerm;
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22744623,PES1UG22CS445,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

typedef struct Node Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(Node** head, int data) {
    Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void printList(Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

void splitLinkedList(Node* head, Node** firstHalf, Node** secondHalf) {
    if (head == NULL || head->next == NULL) {
        *firstHalf = head;
        *secondHalf = NULL;
        return;
    }

    Node* slow = head;
    Node* fast = head->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *firstHalf = head;
    *secondHalf = slow->next;
    slow->next = NULL;
}

int main() {
    int n;
    scanf(""%d"", &n);

    Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }

    Node* firstHalf = NULL;
    Node* secondHalf = NULL;

    splitLinkedList(head, &firstHalf, &secondHalf);

    printList(firstHalf);
    printList(secondHalf);

    
    while (head != NULL) {
        Node* temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}"
22744626,pes1202202088,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

typedef struct Term Polynomial;


void insertTerm(Polynomial** poly, int coefficient, int exponent) {
    Polynomial* newTerm = (Polynomial*)malloc(sizeof(Polynomial));
    newTerm->coefficient = coefficient;
    newTerm->exponent = exponent;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } 
    else {
        Polynomial* current = *poly;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newTerm;
    }
}


Polynomial* addPolynomials(Polynomial* poly1, Polynomial* poly2) {
    Polynomial* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } 
        else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Append any remaining terms from poly1 and poly2
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void displayPolynomial(Polynomial* poly) {
    if (poly == NULL) {
        printf(""0\n"");
        return;
    }

    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
       
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Polynomial* poly1 = NULL;
    Polynomial* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);
        if (i < n) {
            insertTerm(&poly1, coefficient, exponent);
        } else {
            insertTerm(&poly2, coefficient, exponent);
        }
    }

    Polynomial* result = addPolynomials(poly1, poly2);

    displayPolynomial(result);

    return 0;
}"
22744626,pes1202202088,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node{
    int data;
    struct node *next;
};



struct node *readLL(int n)
{
    struct node *temp=NULL;
    struct node *head=NULL;
    struct node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct node *)malloc(sizeof(struct node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printLL(struct node *head,int n)
{
    int count=0;
    struct node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printLL2(struct node *head,int n, int mid)
{
    int count=0;
    struct node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    struct node *h;
    int n;
    scanf(""%d"",&n);
    h=readLL(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printLL(h,mid);
    printLL2(h,n,mid);
    
    return 0;
}"
22744628,PES1UG22CS454,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

struct Term* addPolynomials(struct Term* p1, struct Term* p2) {
    struct Term* result = NULL;
    struct Term* tail = NULL;
    
    while (p1 != NULL || p2 != NULL) {
        struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
        newTerm->next = NULL;
        
        if (p1 == NULL || (p2 != NULL && p1->exponent < p2->exponent)) {
            newTerm->coefficient = p2->coefficient;
            newTerm->exponent = p2->exponent;
            p2 = p2->next;
        } else if (p2 == NULL || p1->exponent > p2->exponent) {
            newTerm->coefficient = p1->coefficient;
            newTerm->exponent = p1->exponent;
            p1 = p1->next;
        } else {
            newTerm->coefficient = p1->coefficient + p2->coefficient;
            newTerm->exponent = p1->exponent;
            p1 = p1->next;
            p2 = p2->next;
        }
        
        if (result == NULL) {
            result = newTerm;
            tail = newTerm;
        } else {
            tail->next = newTerm;
            tail = newTerm;
        }
    }
    
    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
        newTerm->coefficient = coef;
        newTerm->exponent = exp;
        newTerm->next = NULL;
        
        if (i < n) {
            if (poly1 == NULL) {
                poly1 = newTerm;
            } else {
                struct Term* current = poly1;
                while (current->next != NULL) {
                    current = current->next;
                }
                current->next = newTerm;
            }
        } else {
            if (poly2 == NULL) {
                poly2 = newTerm;
            } else {
                struct Term* current = poly2;
                while (current->next != NULL) {
                    current = current->next;
                }
                current->next = newTerm;
            }
        }
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}
"
22744628,PES1UG22CS454,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};
int main() {

    int n, m;
    scanf(""%d"", &n);
    struct Node *p = (struct Node*) malloc(sizeof(struct Node));
        scanf(""%d"", &p -> data);
        p -> next = NULL;
    struct Node *q = p;
    for(int i = 1; i < n; i ++)
    {
        struct Node *node = (struct Node*) malloc(sizeof(struct Node));
        scanf(""%d"", &node -> data);
        node -> next = NULL;
        p -> next = node;
        p = p -> next;
    }
    if (n % 2 == 0)
    {
        m = n / 2;
    }
    else
    {
        m = n / 2 + 1;
    }
    for(int j = 0; j < m; j ++)
    {
        printf(""%d "", q -> data);
        q = q -> next;
    }
    printf(""\n"");
    for(int k = 0; k < n - m; k ++)
    {
        printf(""%d "", q -> data);
        q = q -> next;
    }
    return 0;
}
"
22744638,PES1UG22CS458,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int coeff;
    int pow;
    struct node* next;
} node;

void add(node** head, int c, int p){
    node* new = (node*)malloc(sizeof(node));
    new->coeff = c;
    new->pow = p;
    new->next = NULL;
    node* h = *head;
    if(h==NULL){
        *head = new;
        return;
    }
    while(h->next!=NULL){
        h = h->next;
    }
    h->next = new;
}

void add1(node** head, int c, int p){
    node* h = *head;
    int i = 0;
    while(h!=NULL){
        if(i==p){
            h->coeff = h->coeff + c;
            break;
        }
        h = h->next;
        i++;
    }
}

int main() {
    node* res = NULL;
    for(int i = 0; i<1000; i++){
        add(&res, 0, i);
    }
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    for(int i = 0; i<n; i++){
        int c, p;
        scanf(""%d %d"", &c, &p);
        add1(&res, c, p);
    }
    for(int i = 0; i<m; i++){
        int c, p;
        scanf(""%d %d"", &c, &p);
        add1(&res, c, p);
    }
    int a[1000];
    memset(a, 0, sizeof(a));
    int i = 0;
    while(res!=NULL){
        if(res->pow==i){
            a[i] = res->coeff;
        }
        res = res->next;
        i++;
    }
    for(int i = 999; i>=0; i--){
        if(a[i] != 0){
            printf(""%d "", a[i]);
        }
    }
    return 0;
}
"
22744638,PES1UG22CS458,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int val;
    struct node* next;
} node;

void add(node** head, int e){
    node* new = (node*)malloc(sizeof(node));
    new->val = e;
    new->next = NULL;
    node* h = *head;
    if(h==NULL){
        *head = new;
        return;
    }
    while(h->next!=NULL){
        h = h->next;
    }
    h->next = new;
}

int main() {
    node* h = NULL;
    int n;
    scanf(""%d"", &n);
    for(int i = 0; i<n; i++){
        int e;
        scanf(""%d"", &e);
        add(&h, e);
    }
    for(int i = 0; i< (n+1)/2; i++){
        printf(""%d "", h->val);
        h = h->next;
    }
    printf(""\n"");
    while(h!=NULL){
        printf(""%d "", h->val);
        h = h->next;
    }
    return 0;
}































"
22744639,PES1UG22CS487,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to insert a new term into the polynomial
void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Add any remaining terms from poly1 or poly2
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}"
22744639,PES1UG22CS487,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}"
22744641,PES1UG22CS455,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct term {
    int coef;
    int exp;
    struct term* next;
};


void insertterm(struct term** head, int coef, int exp) {
    struct term* newterm = (struct term*)malloc(sizeof(struct term));
    newterm->coef = coef;
    newterm->exp = exp;
    newterm->next = NULL;
    
    if (*head == NULL) {
        *head = newterm;
        return;
    }
    
    struct term* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    
    current->next = newterm;
}


struct term* addPolynomials(struct term* poly1, struct term* poly2) {
    struct term* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertterm(&result, poly1->coef, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertterm(&result, poly2->coef, poly2->exp);
            poly2 = poly2->next;
        } else {
            insertterm(&result, poly1->coef + poly2->coef, poly1->exp);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertterm(&result, poly1->coef, poly1->exp);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertterm(&result, poly2->coef, poly2->exp);
        poly2 = poly2->next;
    }
    
    return result;
}


void printPolynomial(struct term* poly) {
    struct term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->coef);
        current = current->next;
        if (current != NULL) {
        }
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct term* poly1 = NULL;
    struct term* poly2 = NULL;
    
    for (int i = 0; i < n; i++) {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        insertterm(&poly1, coef, exp);
    }
    
    for (int i = 0; i < m; i++) {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        insertterm(&poly2, coef, exp);
    }
    
    struct term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}
"
22744641,PES1UG22CS455,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}"
22744642,PES1UG22CS468,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Term{
    int coefficient,exponent;
    struct Term* next;
}T;

void insertTerm(T** poly,int coeff,int exp) 
{
    T* newTerm = (T*)malloc(sizeof(T));
    newTerm->coefficient=coeff;
    newTerm->exponent=exp;
    newTerm->next=NULL;

    if (*poly==NULL) *poly=newTerm; 
    else 
    {
        T* curr=*poly;
        while(curr->next!=NULL) 
        {
            curr=curr->next;
        }
        curr->next=newTerm;
    }
}

T* addPolynomials(T* p1,T* p2)
{
    T* result=NULL;
    while(p1!=NULL && p2!=NULL)
    {
        if(p1->exponent>p2->exponent)
        {
            insertTerm(&result,p1->coefficient,p1->exponent);
            p1=p1->next;
        } 
        else if(p1->exponent<p2->exponent) 
        {
            insertTerm(&result,p2->coefficient,p2->exponent);
            p2=p2->next;
        } 
        else 
        {
            insertTerm(&result,p1->coefficient+p2->coefficient,p1->exponent);
            p1=p1->next;
            p2=p2->next;
        }
    }
    while(p1!=NULL)
    {
        insertTerm(&result,p1->coefficient,p1->exponent);
        p1=p1->next;
    }
    while(p2!=NULL)
    {
        insertTerm(&result,p2->coefficient,p2->exponent);
        p2=p2->next;
    }
    return result;
}

void printPolynomial(T* poly) 
{
    while(poly!=NULL) 
    {
        printf(""%d "",poly->coefficient);
        poly=poly->next;
    }
    printf(""\n"");
}

int main() 
{
    int n, m;
    scanf(""%d %d"",&n,&m);

    T* p1=NULL;
    T* p2=NULL;

    for (int i=0;i<n+m;i++)
    {
        int coeff,exp;
        scanf(""%d %d"",&coeff,&exp);
        if(i<n) insertTerm(&p1, coeff, exp);
        else  insertTerm(&p2, coeff, exp);
    }

    T* result=addPolynomials(p1, p2);

    printPolynomial(result);

    return 0;
}"
22744642,PES1UG22CS468,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node 
{
    int data;
    struct Node* next;
}N;
void insertEnd(N** head, int data) 
{
    N* newNode = (N*)malloc(sizeof(struct Node));
    newNode->data=data;
    newNode->next=NULL;

    if(*head==NULL) *head=newNode;
    else
    {
        N* temp=*head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newNode;
    }
}
N* findMidpoint(N* head)
{
    if (head==NULL || head->next==NULL)
    {
        return head;
    }

    N* slow = head;
    N* fast = head;

    while(fast->next!=NULL && fast->next->next != NULL)
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
}

void splitLinkedList(N* source, N** firstHalf, N** secondHalf)
{
    N* midpoint = findMidpoint(source);
    *firstHalf = source;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}

void printList(N* head) {
    N* temp = head;
    while (temp!=NULL) {
        printf(""%d "",temp->data);
        temp=temp->next;
    }
    printf(""\n"");
}

int main()
{
    int n, data;
    N* head=NULL;
    scanf(""%d"",&n);
    for (int i=0; i<n; i++)
    {
        scanf(""%d"", &data);
        insertEnd(&head,data);
    }
    N* firstHalf = NULL;
    N* secondHalf = NULL;
    splitLinkedList(head, &firstHalf, &secondHalf);
    
    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22744646,PES1UG22CS491,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct node {
    int c;  // Coefficient
    int p;  // Power
    struct node *n;  // Next
};

struct node *cn(int c, int p) {  //cn is create node
    struct node *nd = (struct node *)malloc(sizeof(struct node));  //*nd is node ptr
    nd->c = c;
    nd->p = p;  // p is power
    nd->n = NULL;
    return nd;
}

struct node *insert(struct node *poly, int c, int p) {
    struct node *nd = cn(c, p);

    if (poly == NULL) {
        return nd;
    } else {
        struct node *temp = poly;
        while (temp->n != NULL) {
            temp = temp->n;
        }
        temp->n = nd;
        return poly;
    }
}

struct node *addPoly(struct node *p1, struct node *p2) {  // Pointer to the first polynomial
    struct node *res = NULL;
                                                         // Pointer to the second polynomial
    while (p1 != NULL && p2 != NULL) {
        if (p1->p == p2->p) {
            res = insert(res, p1->c + p2->c, p1->p);
            p1 = p1->n;
            p2 = p2->n;
        } else if (p1->p > p2->p) {
            res = insert(res, p1->c, p1->p);
            p1 = p1->n;
        } else {
            res = insert(res, p2->c, p2->p);
            p2 = p2->n;
        }
    }

    while (p1 != NULL) {
        res = insert(res, p1->c, p1->p);
        p1 = p1->n;
    }

    while (p2 != NULL) {
        res = insert(res, p2->c, p2->p);
        p2 = p2->n;
    }

    return res;
}

void display(struct node *poly) {
    struct node *temp = poly;
    while (temp != NULL) {
        printf(""%d "", temp->c);
        temp = temp->n;
    }
    printf(""\n"");
}

int main() {
    int t1, t2;  //t1 is term1 and t2 is term2
    scanf(""%d %d"", &t1, &t2);

    struct node *p1 = NULL;   // Pointer to the first polynomial
    struct node *p2 = NULL;  // Pointer to the second polynomial

    int c, p;
    for (int i = 0; i < t1 + t2; i++) {
        scanf(""%d %d"", &c, &p);
        if (i < t1) {
            p1 = insert(p1, c, p);
        } else {
            p2 = insert(p2, c, p);
        }
    }

    struct node *result = addPoly(p1, p2);

    display(result);

    return 0;
}

"
22744646,PES1UG22CS491,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int d;  // Data
    struct Node *n;  // Next
};

struct Node *cn(int val) { //val is value  //cn is create node function
    struct Node *newN = (struct Node *)malloc(sizeof(struct Node));  //newN here is newnode
    newN->d = val;
    newN->n = NULL;
    return newN;
}

struct Node *insE(struct Node *hd, int val) {  //insert at end function   //hd is head
    struct Node *newN = cn(val);
    if (hd == NULL) {
        return newN;
    } else {
        struct Node *tmp = hd;   //tmp is temporary variable
        while (tmp->n != NULL) {
            tmp = tmp->n;
        }
        tmp->n = newN;
        return hd;
    }
}

void splitAndPrint(struct Node *hd) {
    if (hd == NULL) {
        printf(""Empty List\n"");
        return;
    }

    struct Node *sp = hd;    //sp is slowpointer
    struct Node *fp = hd;    //fp is fastpointer

    while (fp->n != NULL && fp->n->n != NULL) {  
        sp = sp->n;
        fp = fp->n->n;
    }

    struct Node *fstHf = hd;
    struct Node *sndHf = sp->n;
    sp->n = NULL;

    struct Node *tmp = fstHf;  //fstHf is firsthalf
    while (tmp != NULL) {
        printf(""%d "", tmp->d);
        tmp = tmp->n;
    }
    printf(""\n"");

    tmp = sndHf;   //sndHf is secondhalf
    while (tmp != NULL) {
        printf(""%d "", tmp->d);
        tmp = tmp->n;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node *hd = NULL;

    int val;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &val);
        hd = insE(hd, val);
    }

    splitAndPrint(hd);

    return 0;
}
"
22744652,PES1UG22CS478,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct node 
{
    int coeff;
    int pow;
    struct node* next;
} node;

node* add(node* head, int co, int po)
{
    node* newnode = (node*)malloc(sizeof(node));
    newnode->coeff = co;
    newnode->pow = po;
    newnode->next = NULL;

    if (head == NULL)
    {
        return newnode;
    }
    else
    {
        node* temp = head;
        while (temp->next != NULL)
        {
            temp = temp->next;
        }
        temp->next = newnode;
        return head;
    }
}

void display(node* head)
{
    node* temp = head;
    while (temp != NULL)
    {
        printf(""%d "", temp->coeff);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n ,m;
    node *h1=NULL;
    node *h2=NULL;
    node *sumlin=NULL;

    scanf(""%d %d"",&n,&m);

    int sum[101]; 
    for (int i = 0; i < 101; i++)
    {
        sum[i] = 0;
    }

    for (int i = 0; i < n; i++)
    {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        h1 = add(h1, coeff, pow);
        sum[pow] += coeff;
    }

    for (int i = 0; i < m; i++)
    {
        int coeff, pow;
        scanf(""%d %d"", &coeff, &pow);
        h2 = add(h2, coeff, pow);
        sum[pow] += coeff;
    }

    for (int i = 100; i >= 0; i--)
    {
        if (sum[i] != 0)
        {
            sumlin = add(sumlin, sum[i], i);
        }
    }

    display(sumlin);

    return 0;
}
"
22744652,PES1UG22CS478,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int value;
    struct node*  next;
    
}node;
node* addnode(node *head)
{
   
   
   if(head==NULL)
   {
        node *temp=(node*)malloc(sizeof(node));
        int a;
        scanf(""%d"",&a);
        temp->value=a;
        temp->next=NULL;
        head=temp;
        return head ;
   }
   else
   {
    node *temp=(node*)malloc(sizeof(node));
    temp=head;
    while(temp->next!=NULL)
    {
        temp=temp->next;

    }
    node *newnode=(node*)malloc(sizeof(node));
    int a;
    scanf(""%d"",&a);
    newnode->value=a;
    newnode->next=NULL;
    temp->next=newnode;
    return head;
   }
}
int lengthlist(node* head)
{
    node* temp=head;
    int l=0;
    
    while(temp!=NULL)
    {
        l++;
        temp=temp->next;
    }
    return l;
}
node* divide2(node* head1,node* head2,int l)
{
    node *temp=head1;
    for(int i=0;i<l-1;i++)
    {
        temp=temp->next;
    }
    head2=temp->next;
    return head2;
}
node* divide1(node* head1,int l)
{
    node *temp=head1;
    for(int i=0;i<l-1;i++)
    {
        temp=temp->next;
    }
    temp->next=NULL;
    return head1;
}
void display(node* head)
{
    node *temp=(node*)malloc(sizeof(node));
    temp=head;
    while(temp!=NULL)
    {
        printf(""%d "",temp->value);
        temp=temp->next;
    }
}
int main() {
    node *head=NULL;
    int n;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++)
    {
        head=addnode(head);
    }
    int l=lengthlist(head);
    int m=(l+1)/2;
    node *head2=NULL;
    head2=divide2(head,head2,m);
    head=divide1(head,m);
    display(head);
    printf(""\n"");
    display(head2);
    

    
}
"
22744655,PES1UG22CS443,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct pol{
    int coeff;
    int power;
    struct pol* next;
}term;

term* createNode(int coeff, int pow)
{
    term* newNode = (term*) malloc(sizeof(term));
    newNode->coeff = coeff;
    newNode->power = pow;
    newNode->next = NULL;
    return newNode;
}

term* insertNode(term* head, int coeff, int pow)
{
    term* newNode = createNode(coeff, pow);
    if(head == NULL)
    {
        head = newNode;
    }
    else
    {
        term* temp = head;
        while(temp->next != NULL)
            temp = temp->next;
        temp->next = newNode;
    }
    return head;
}

term* adding(term* pt1, term* pt2, term* pt3)
{
    if(pt1 == NULL)
    {
        return pt2;
    }
    if(pt2 == NULL)
    {
        return pt1;
    }
    else
    {
        while(1)
        {
            if(pt1 != NULL && pt2 != NULL)
            {
                if(pt1->power == pt2->power)
                {
                    pt3 = insertNode(pt3, pt1->coeff + pt2->coeff, pt1->power);
                    pt1 = pt1->next;
                    pt2 = pt2->next;
                }
                else if(pt1->power > pt2->power)
                {
                    pt3 = insertNode(pt3, pt1->coeff, pt1->power);
                    pt1 = pt1->next;
                }
                else
                {
                    pt3 = insertNode(pt3, pt2->coeff, pt2->power);
                    pt2 = pt2->next;
                }
            }
            else
                break;
        }
        if(pt1 != NULL)
        {
            while(pt1 != NULL)
            {
                pt3 = insertNode(pt3, pt1->coeff, pt1->power);
                pt1 = pt1->next;
            }
        }
        if(pt2 != NULL)
        {
            while(pt2 != NULL)
            {
                pt3 = insertNode(pt3, pt2->coeff, pt2->power);
                pt2 = pt2->next;
            }
        }
    }
    return pt3;
}

void display(term* polynom)
{
    term* temp = polynom;
    while(temp != NULL)
    {
        printf(""%d "", temp->coeff);
        temp = temp->next;
    }
}

int main() {
    int n, m, inp1, inp2;
    term* pt1, *pt2, *pt3;
    pt1 = NULL;
    pt2 = NULL;
    pt3 = NULL;
    scanf(""%d %d"", &n, &m);
    for(int i = 0; i < n; i++)
    {
        scanf(""%d %d"", &inp1, &inp2);
        pt1 = insertNode(pt1, inp1, inp2);
    }
    for(int i = n; i < (n + m); i++)
    {
        scanf(""%d %d"", &inp1, &inp2);
        pt2 = insertNode(pt2, inp1, inp2);
    }
    pt3 = adding(pt1, pt2, pt3);
    display(pt3);
    return 0;
}
"
22744655,PES1UG22CS443,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct LL
{
    int data;
    struct LL *next;
}node;

node* createNode(int data)
{
    node* newNode = (node*) malloc(sizeof(node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

node* insertNode(node* head, int data)
{
    node* newNode = createNode(data);
    if(head == NULL)
    {
        head = newNode;
    }
    else
    {
        node* temp = head;
        while(temp->next != NULL)
            temp = temp->next;
        temp->next = newNode;
    }
    return head;
}

void display(node* ll)
{
    while(ll != NULL)
    {
        printf(""%d "", ll->data);
        ll = ll->next;
    }
}

int main() {
    int n, inp;
    scanf(""%d"", &n);
    node* first, *second;
    first = NULL;
    second = NULL;
    int sep = ceil((float)(n / 2.0));
    for(int i = 0; i < sep; i++)
    {
        scanf(""%d"", &inp);
        first = insertNode(first, inp);
    }
    for(int i = sep; i < n; i++)
    {
        scanf(""%d"", &inp);
        second = insertNode(second, inp);
    }
    
    display(first);
    printf(""\n"");
    display(second);
    
    return 0;
}
"
22744660,PES1UG22CS493,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Term {
    int coeff;
    int exp;
    struct Term* next;
};


void insert(struct Term** head, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coeff = coeff;
    newTerm->exp = exp;
    newTerm->next = NULL;
    
    if (*head == NULL) {
        *head = newTerm;
        return;
    }
    
    struct Term* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    
    current->next = newTerm;
}

struct Term* adder(struct Term* pol1, struct Term* pol2) {
    struct Term* result = NULL;
    
    while (pol1 != NULL && pol2 != NULL) {
        if (pol1->exp > pol2->exp) {
            insert(&result, pol1->coeff, pol1->exp);
            pol1 = pol1->next;
        } else if (pol1->exp < pol2->exp) {
            insert(&result, pol2->coeff, pol2->exp);
            pol2 = pol2->next;
        } else {
            insert(&result, pol1->coeff + pol2->coeff, pol1->exp);
            pol1 = pol1->next;
            pol2 = pol2->next;
        }
    }
    
    while (pol1 != NULL) {
        insert(&result, pol1->coeff, pol1->exp);
        pol1 = pol1->next;
    }
    
    while (pol2 != NULL) {
        insert(&result, pol2->coeff, pol2->exp);
        pol2 = pol2->next;
    }
    
    return result;
}

void print(struct Term* pol) {
    struct Term* current = pol;
    while (current != NULL) {
        printf(""%d "", current->coeff);
        current = current->next;
        if (current != NULL) {
        }
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* pol1 = NULL;
    struct Term* pol2 = NULL;
    
    for (int i = 0; i < n; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insert(&pol1, coeff, exp);
    }
    
    for (int i = 0; i < m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insert(&pol2, coeff, exp);
    }
    
    struct Term* result = adder(pol1, pol2);
    print(result);
    
    return 0;
}"
22744660,PES1UG22CS493,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node{
    int data;
    struct node* next;
};

typedef struct node node;
      

node *read(int n)
{
    node* temp=NULL;
    node* head=NULL;
    node *pt=NULL;
    
    for(int i=0;i<n;i++)
    {
        temp=(struct node*)malloc(sizeof(struct node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;
        
        if(head==NULL)
        {
            head=temp;
        }
        
        else{
            pt=head;
            while(pt->next!=NULL)
                pt=pt->next;
            pt->next=temp;
            
        }
        
    }
    return head;
}

void print1(node* head,int n)
{
    int count=0;
    node* pt=head;
    while(pt!=NULL){

        count++;
    printf(""%d "",pt->data);
    pt=pt->next;
    if(count==n)
        break;
    }
    printf(""\n"");
}


void print2(node* head,int n,int mid)
{
    int count=0;
    node* pt=head;
    while(pt!=NULL)
    {
        count++;
        if(count>mid)
        {
            printf(""%d "",pt->data);
            
        }
        pt=pt->next;
        
      
        }
    
}
    
    
    
    
int main() {
node *h;
    int n;
    scanf(""%d"",&n);
    h=read(n);
    int mid;
    if(n%2!=0)
        mid=(n/2)+1;
    else
        mid=(n/2);
    print1(h,mid);
    print2(h,n,mid);
    
    return 0;
     
    
}
"
22744662,PES1UG22CS465,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int c;
    int exp;
    struct Term* n;
};

void insertTerm(struct Term** p, int c, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL) {
        *p = newTerm;
    } else {
        struct Term* current = *p;
        while (current->n != NULL) {
            current = current->n;
        }
        current->n = newTerm;
    }
}

struct Term* addPolynomials(struct Term* p1, struct Term* p2) {
    struct Term* result = NULL;
    struct Term* current1 = p1;
    struct Term* current2 = p2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            insertTerm(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp) {
            insertTerm(&result, current2->c, current2->exp);
            current2 = current2->n;
        } else {
            insertTerm(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }
    
    while (current1 != NULL) {
        insertTerm(&result, current1->c, current1->exp);
        current1 = current1->n;
    }
    
    while (current2 != NULL) {
        insertTerm(&result, current2->c, current2->exp);
        current2 = current2->n;
    }
    
    return result;
}


void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22744662,PES1UG22CS465,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        { 
              head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    return 0;
}"
22744668,PES1UG22CS435,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Term 
{
    int coefficient;
    int exponent;
    struct Term *next;
};


void insertTerm(struct Term **head, int coeff, int exp) 
{
    struct Term *newTerm = (struct Term *)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*head == NULL) 
    {
        *head = newTerm;
    } 
    else 
    {
        struct Term *current = *head;
        while (current->next != NULL) 
        {
            current = current->next;
        }
        current->next = newTerm;
    }
}


struct Term *addPolynomials(struct Term *poly1, struct Term *poly2) 
{
    struct Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->exponent > poly2->exponent) 
        {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } 
        else if (poly1->exponent < poly2->exponent) 
        {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else 
        {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) 
            {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) 
    {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) 
    {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void printPolynomial(struct Term *poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term *poly1 = NULL;
    struct Term *poly2 = NULL;

    for (int i = 0; i < n; i++) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly1, coeff, exp);
    }

    for (int i = 0; i < m; i++) 
    {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly2, coeff, exp);
    }

    struct Term *result = addPolynomials(poly1, poly2);


    printPolynomial(result);

    return 0;
}


"
22744668,PES1UG22CS435,Divide Linked List 2,7.5,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Node 
{
    int data;
    struct Node *next;
};


void insert(struct Node **head, int value) 
{
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;

    if (*head == NULL) 
    {
        *head = newNode;
        return;
    }

    struct Node *current = *head;
    while (current->next != NULL) 
    {
        current = current->next;
    }
    current->next = newNode;
}


struct Node *findMidpoint(struct Node *head) 
{
    struct Node *slow = head;
    struct Node *fast = head;

    while (fast != NULL && fast->next != NULL) 
    {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}


void printList(struct Node *head) 
{
    struct Node *current = head;
    while (current != NULL) 
    {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() 
{
    int n;
   
    scanf(""%d"", &n);
    
    if(n==0)
    {
        exit(0);
    }
    
    struct Node *head = NULL;

    for (int i = 0; i < n; i++) 
    {
        
        int value;
        scanf(""%d"", &value);
        insert(&head, value);
    }

    struct Node *midpoint = findMidpoint(head);
    struct Node *secondHalf = midpoint->next;
    midpoint->next = NULL;

    printList(head);
    printList(secondHalf);

    return 0;
}


"
22744671,PES1UG22CS462,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int c;
    int exp;
    struct Term* n;
};

void insertTerm(struct Term** p, int c, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL) {
        *p = newTerm;
    } else {
        struct Term* current = *p;
        while (current->n != NULL) {
            current = current->n;
        }
        current->n = newTerm;
    }
}

struct Term* addPolynomials(struct Term* p1, struct Term* p2) {
    struct Term* result = NULL;
    struct Term* current1 = p1;
    struct Term* current2 = p2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            insertTerm(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp) {
            insertTerm(&result, current2->c, current2->exp);
            current2 = current2->n;
        } else {
            insertTerm(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }
    
    while (current1 != NULL) {
        insertTerm(&result, current1->c, current1->exp);
        current1 = current1->n;
    }
    
    while (current2 != NULL) {
        insertTerm(&result, current2->c, current2->exp);
        current2 = current2->n;
    }
    
    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22744671,PES1UG22CS462,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        { 
              head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    return 0;
}"
22744679,PES1UG22CS461,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct Node {
    int val;
    struct Node *next;
} Node;

void add(Node **head, int val) {
    if (*head == NULL) {
        Node *tmp = (Node*) malloc(sizeof(Node));
        tmp -> val = val;
        tmp -> next = NULL;
        *head = tmp;
        return;
    }
       
    Node *tmp = *head;
    while (tmp -> next != NULL) {
        tmp = tmp -> next;
    }
    
    Node *newNode = (Node*) malloc(sizeof(Node));
    newNode -> val = val;
    newNode -> next = NULL;
    tmp -> next = newNode;
}   

void modify(Node *head, int coeff, int power) {
    int curpower = 0;
    while (head != NULL) {
        if (power == curpower) {
            head -> val += coeff;
        }
        head = head -> next;
        curpower++;
    }
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    Node *head = NULL;
    for (int i = 0; i < 1000; i++) {
        add(&head, 0);
    }
    
    for (int i = 0; i < n + m; i++) {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        modify(head, coeff, power);
    }
    
    int arr[1000];
    memset(arr, 0, sizeof(arr));
        
    int ptr = 0;
    while (head != NULL) {
        if (head -> val != 0) {
            arr[ptr] = head -> val;
            ptr++;
        }
        head = head -> next;
    }
    
    ptr--;
    for (int i = ptr; i >= 0; i--) {
        printf(""%d "", arr[i]);
    }
    printf(""\n"");
    return 0;
}
































"
22744679,PES1UG22CS461,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct Node {
    int val;
    struct Node *next;
} Node;    

void add(Node **head, int val) {
    if (*head == NULL) {
        Node *tmp = (Node*) malloc(sizeof(Node));
        tmp -> val = val;
        tmp -> next = NULL;
        *head = tmp;
        return;
    }
       
    Node *tmp = *head;
    while (tmp -> next != NULL) {
        tmp = tmp -> next;
    }
    
    Node *newNode = (Node*) malloc(sizeof(Node));
    newNode -> val = val;
    newNode -> next = NULL;
    tmp -> next = newNode;
}   
    
int main() {
    int n;
    scanf(""%d"", &n);
        
    Node *head = NULL;
    for (int i = 0; i < n; i++) {
        int val;
        scanf(""%d"", &val);
        add(&head, val);
    }
    
    int pos = 0;
     
    // 1 2 3 4
    
    while (head != NULL) {
        if (n % 2 == 0) {
            if (pos >= n/2) break; 
        } else {
            if (pos > n/2) break;
        }
        printf(""%d "", head -> val);
        head = head -> next;
        pos++;
    }
    
    printf(""\n"");
    while (head != NULL) {
        printf(""%d "", head -> val);
        head = head -> next;
    }
    
    return 0;
}
"
22744681,PES1UG22CS481,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int c;
    int exp;
    struct Term* n;
};

void insertTerm(struct Term** p, int c, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL) {
        *p = newTerm;
    } else {
        struct Term* current = *p;
        while (current->n != NULL) {
            current = current->n;
        }
        current->n = newTerm;
    }
}

struct Term* addPolynomials(struct Term* p1, struct Term* p2) {
    struct Term* result = NULL;
    struct Term* current1 = p1;
    struct Term* current2 = p2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            insertTerm(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp) {
            insertTerm(&result, current2->c, current2->exp);
            current2 = current2->n;
        } else {
            insertTerm(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }
    
    while (current1 != NULL) {
        insertTerm(&result, current1->c, current1->exp);
        current1 = current1->n;
    }
    
    while (current2 != NULL) {
        insertTerm(&result, current2->c, current2->exp);
        current2 = current2->n;
    }
    
    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}
"
22744681,PES1UG22CS481,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

struct Node *createNode(int value) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node **head, int value) {
    struct Node *newNode = createNode(value);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node *temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void splitAndPrint(struct Node *head) {
    if (head == NULL) {
        printf(""Empty List\n"");
        return;
    }

    struct Node *slowPtr = head;
    struct Node *fastPtr = head;

    while (fastPtr->next != NULL && fastPtr->next->next != NULL) {
        slowPtr = slowPtr->next;
        fastPtr = fastPtr->next->next;
    }

    struct Node *firstHalf = head;
    struct Node *secondHalf = slowPtr->next;
    slowPtr->next = NULL;

    struct Node *temp = firstHalf;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");

    temp = secondHalf;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node *head = NULL;

    int value;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    splitAndPrint(head);

    return 0;
}"
22744687,PES1UG22CS480,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node 
{
    int c;
    int exp;
    struct Node *n;
};

void ins(struct Node **p,int c,int exp) 
{
    struct Node *newNode=(struct Node*)malloc(sizeof(struct Node));
    newNode->c=c;
    newNode->exp=exp;
    newNode->n=NULL;
    
    if (*p==NULL) 
    {
        *p=newNode;
    } 
    else 
    {
        struct Node *temp=*p;
        while (temp->n!=NULL) 
        {
            temp=temp->n;
        }
        temp->n=newNode;
    }
}

struct Node *add(struct Node *p1,struct Node *p2) 
{
    struct Node *result=NULL;
    struct Node *temp1=p1;
    struct Node *temp2=p2;
    
    while(temp1!=NULL && temp2!= NULL) 
    {
        if(temp1->exp>temp2->exp) 
        {
            ins(&result,temp1->c,temp1->exp);
            temp1=temp1->n;
        } 
        else if(temp1->exp<temp2->exp) 
        {
            ins(&result,temp2->c,temp2->exp);
            temp2 = temp2->n;
        } 
        else 
        {
            ins(&result, temp1->c+ temp2->c,temp1->exp);
            temp1=temp1->n;
            temp2=temp2->n;
        }
    }
    
    while(temp1 != NULL) 
    {
        ins(&result,temp1->c,temp1->exp);
        temp1=temp1->n;
    }
    
    while(temp2 != NULL) 
    {
        ins(&result,temp2->c,temp2->exp);
        temp2=temp2->n;
    }
    
    return result;
}


void disp(struct Node *poly) 
{
    struct Node *temp=poly;
    while(temp!=NULL) 
    {
        printf(""%d "",temp->c);
        temp=temp->n;
    }
    printf(""\n"");
}

int main() 
{
    int n,m;
    scanf(""%d %d"",&n,&m);
    
    struct Node *p1=NULL;
    struct Node *p2=NULL;
    
    int coef, exp;
    for(int i=0;i<n+m;i++) 
    {
        scanf(""%d %d"", &coef, &exp);
        if(i<n) 
        {
            ins(&p1,coef,exp);
        } 
        else 
        {
            ins(&p2,coef,exp);
        }
    }
    
    struct Node *result=add(p1,p2);
    disp(result);
    
    return 0;
}"
22744687,PES1UG22CS480,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node 
{
    int data;
    struct Node *next;
};

struct Node *Create(int val) 
{
    struct Node *newnode=(struct Node *)malloc(sizeof(struct Node));
    newnode->data=val;
    newnode->next=NULL;
    return newnode;
}

void ins(struct Node **head,int val) 
{
    struct Node *newnode=Create(val);
    if (*head==NULL) 
    {
        *head=newnode;
    } 
    else 
    {
        struct Node *temp=*head;
        while (temp->next!=NULL) 
        {
            temp=temp->next;
        }
        temp->next=newnode;
    }
}

void list(struct Node *head) 
{
    if (head==NULL) 
    {
        printf(""Empty List\n"");
        return;
    }

    struct Node *slow=head;
    struct Node *fast=head;

    while (fast->next!=NULL && fast->next->next!=NULL) 
    {
        slow=slow->next;
        fast=fast->next->next;
    }

    struct Node *first_half = head;
    struct Node *second_half = slow->next;
    slow->next=NULL;

    struct Node *temp=first_half;
    while (temp != NULL) 
    {
        printf(""%d "",temp->data);
        temp=temp->next;
    }
    printf(""\n"");

    temp=second_half;
    while(temp!=NULL) 
    {
        printf(""%d "",temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() 
{
    int n;
    scanf(""%d"",&n);

    struct Node *head=NULL;

    int val;
    for (int i=0;i<n;i++) 
    {
        scanf(""%d"",&val);
        ins(&head,val);
    }

    list(head);

    return 0;
}"
22744688,PES1UG22CS475,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Term {
    int coeff;
    int exp;
    struct Term* next;
};


void insertTerm(struct Term** head, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coeff = coeff;
    newTerm->exp = exp;
    newTerm->next = NULL;
    
    if (*head == NULL) {
        *head = newTerm;
        return;
    }
    
    struct Term* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    
    current->next = newTerm;
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertTerm(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertTerm(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coeff + poly2->coeff, poly1->exp);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }
    
    return result;
}


void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->coeff);
        current = current->next;
        if (current != NULL) {
        }
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    for (int i = 0; i < n; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly1, coeff, exp);
    }
    
    for (int i = 0; i < m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly2, coeff, exp);
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}
"
22744688,PES1UG22CS475,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    
    current->next = newNode;
}

// Function to find the midpoint of the linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head;
    
    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

// Function to split the linked list into two parts at the given node
void splitLinkedList(struct Node* head, struct Node* mid, struct Node** firstHalf, struct Node** secondHalf) {
    if (mid == NULL) {
        *firstHalf = NULL;
        *secondHalf = NULL;
        return;
    }
    
    *secondHalf = mid->next;
    mid->next = NULL;
    *firstHalf = head;
}

// Function to print the linked list
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }
    
    struct Node* mid = findMidpoint(head);
    struct Node* firstHalf = head;
    struct Node* secondHalf = NULL;
    splitLinkedList(head, mid, &firstHalf, &secondHalf);
    
    printLinkedList(firstHalf);
    printLinkedList(secondHalf);
    
    return 0;
}
"
22744699,PES1UG22CS433,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int c;
    int exp;
    struct Term* n;
};

void insertTerm(struct Term** p, int c, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL) {
        *p = newTerm;
    } else {
        struct Term* current = *p;
        while (current->n != NULL) {
            current = current->n;
        }
        current->n = newTerm;
    }
}

struct Term* addPolynomials(struct Term* p1, struct Term* p2) {
    struct Term* result = NULL;
    struct Term* current1 = p1;
    struct Term* current2 = p2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            insertTerm(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp) {
            insertTerm(&result, current2->c, current2->exp);
            current2 = current2->n;
        } else {
            insertTerm(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }
    
    while (current1 != NULL) {
        insertTerm(&result, current1->c, current1->exp);
        current1 = current1->n;
    }
    
    while (current2 != NULL) {
        insertTerm(&result, current2->c, current2->exp);
        current2 = current2->n;
    }
    
    return result;
}

void printPoly(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPoly(result);
    
    return 0;
}"
22744699,PES1UG22CS433,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *po=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        po=head;
        while(po->next!=NULL)
            po=po->next;
        po->next=temp;
        }
    }
    return head;

}

void printll1(Node *head,int n)
{
    int c=0;
    Node *po=head;
    while(po!=NULL)
    {   c++;
        printf(""%d "",po->data);
        po=po->next;
        if(c==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int c=0;
    Node *po=head;
    while(po!=NULL)
    {   c++;
        if(c>mid)
        {    printf(""%d "",po->data);
        }
     po=po->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int midpoint;
    if(n%2!=0)     
        midpoint=(n/2)+1;
    else
        midpoint=(n/2);
    printll1(h,midpoint);
    printll2(h,n,midpoint);
    
    return 0;
}

















"
22744701,PES1UG22CS477,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct term {
    int coeff;
    int exp;
    struct term* num;
};

void insert_term(struct term** p, int coeff, int exp) {
    struct term* new_term = (struct term*)malloc(sizeof(struct term));
    new_term->coeff = coeff;
    new_term->exp = exp;
    new_term->num = NULL;
    
    if (*p == NULL) {
        *p = new_term;
    } else {
        struct term* current = *p;
        while (current->num != NULL) {
            current = current->num;
        }
        current->num = new_term;
    }
}

struct term* add_Polynomials(struct term* p1, struct term* p2) {
    struct term* result = NULL;
    struct term* current1 = p1;
    struct term* current2 = p2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            insert_term(&result, current1->coeff, current1->exp);
            current1 = current1->num;
        } else if (current1->exp < current2->exp) {
            insert_term(&result, current2->coeff, current2->exp);
            current2 = current2->num;
        } else {
            insert_term(&result, current1->coeff + current2->coeff, current1->exp);
            current1 = current1->num;
            current2 = current2->num;
        }
    }
    
    while (current1 != NULL) {
        insert_term(&result, current1->coeff, current1->exp);
        current1 = current1->num;
    }
    
    while (current2 != NULL) {
        insert_term(&result, current2->coeff, current2->exp);
        current2 = current2->num;
    }
    
    return result;
}

void print_Polynomial(struct term* poly) {
    struct term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->coeff);
        current = current->num;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct term* poly1 = NULL;
    struct term* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insert_term(&poly1, coef, exp);
        } else {
            insert_term(&poly2, coef, exp);
        }
    }
    
    struct term* result = add_Polynomials(poly1, poly2);
    print_Polynomial(result);
    
    return 0;
}"
22744701,PES1UG22CS477,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

struct Node *create_node(int value) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

void insert_end(struct Node **head, int value) {
    struct Node *newNode = create_node(value);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node *temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void split_Print(struct Node *head) {
    if (head == NULL) {
        printf(""Empty List\n"");
        return;
    }

    struct Node *slow_Ptr = head;
    struct Node *fast_Ptr = head;

    while (fast_Ptr->next != NULL && fast_Ptr->next->next != NULL) {
        slow_Ptr = slow_Ptr->next;
        fast_Ptr = fast_Ptr->next->next;
    }

    struct Node *first_Half = head;
    struct Node *second_Half = slow_Ptr->next;
    slow_Ptr->next = NULL;

    struct Node *temp = first_Half;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");

    temp = second_Half;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node *head = NULL;

    int value;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &value);
        insert_end(&head, value);
    }

    split_Print(head);

    return 0;
}"
22744702,PES1UG22CS444,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to insert a new term into the polynomial
void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Add any remaining terms from poly1 or poly2
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}"
22744702,PES1UG22CS444,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {   head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    return 0;
}
"
22744705,PES1UG22CS472,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct value{
    int c;
    int exponent;
    struct value* n;
};

void insertvalue(struct value** p, int c, int exponent) {
    struct value* newvalue = (struct value*)malloc(sizeof(struct value));
    newvalue->c = c;
    newvalue->exponent = exponent;
    newvalue->n = NULL;
    
    if (*p == NULL) {
        *p = newvalue;
    } else {
        struct value* now = *p;
        while (now->n != NULL) {
            now = now->n;
        }
        now->n = newvalue;
    }
}

struct value* addPolynomials(struct value* p1, struct value* p2) {
    struct value* result = NULL;
    struct value* now1 = p1;
    struct value* now2 = p2;
    
    while (now1 != NULL && now2 != NULL) {
        if (now1->exponent > now2->exponent) {
            insertvalue(&result, now1->c, now1->exponent);
            now1 = now1->n;
        } else if (now1->exponent < now2->exponent) {
            insertvalue(&result, now2->c, now2->exponent);
            now2 = now2->n;
        } else {
            insertvalue(&result, now1->c + now2->c, now1->exponent);
            now1 = now1->n;
            now2 = now2->n;
        }
    }
    
    while (now1 != NULL) {
        insertvalue(&result, now1->c, now1->exponent);
        now1 = now1->n;
    }
    
    while (now2 != NULL) {
        insertvalue(&result, now2->c, now2->exponent);
        now2 = now2->n;
    }
    
    return result;
}

// Function to print the polynomial
void printPolynomial(struct value* poly) {
    struct value* now = poly;
    while (now != NULL) {
        printf(""%d "", now->c);
        now = now->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct value* poly1 = NULL;
    struct value* poly2 = NULL;
    
    int coef, exponent;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exponent);
        if (i < n) {
            insertvalue(&poly1, coef, exponent);
        } else {
            insertvalue(&poly2, coef, exponent);
        }
    }
    
    struct value* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22744705,PES1UG22CS472,Divide Linked List 2,7.5,"#include <stdio.h>
#include <stdlib.h>


struct Node {
    int info;
    struct Node* next;
};


void insert_node(struct Node** head, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->info = value;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* now = *head;
        while (now->next != NULL) {
            now = now->next;
        }
        now->next = newNode;
    }
}


struct Node* finding_middle(struct Node* head) {
    struct Node* slow = head;
    struct Node* fast = head;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}


void split_linked_list(struct Node* head, struct Node** first, struct Node** second) {
    struct Node* middle = finding_middle(head);
    *first = head;
    *second = middle->next;
    middle->next = NULL;
}

void print_linked_list(struct Node* head) {
    struct Node* now = head;
    while (now != NULL) {
        printf(""%d "", now->info);
        now = now->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insert_node(&head, value);
    }

    struct Node* first = NULL;
    struct Node* second = NULL;

    split_linked_list(head, &first, &second);

    print_linked_list(first);
    print_linked_list(second);

    return 0;
}"
22744712,PES1UG22CS488,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct t {
    int c;
    int exp;
    struct t* n;
};

void ins_t(struct t** p, int c, int exp) {
    struct t* nt = (struct t*)malloc(sizeof(struct t));
    nt->c = c;
    nt->exp = exp;
    nt->n = NULL;
    
    if (*p == NULL) {
        *p = nt;
    } else {
        struct t* c = *p;
        while (c->n != NULL) {
            c = c->n;
        }
        c->n = nt;
    }
}

struct t* addPolynomials(struct t* p1, struct t* p2) {
    struct t* result = NULL;
    struct t* c1 = p1;
    struct t* c2 = p2;
    
    while (c1 != NULL && c2 != NULL) {
        if (c1->exp > c2->exp) {
            ins_t(&result, c1->c, c1->exp);
            c1 = c1->n;
        } else if (c1->exp < c2->exp) {
            ins_t(&result, c2->c, c2->exp);
            c2 = c2->n;
        } else {
            ins_t(&result, c1->c + c2->c, c1->exp);
            c1 = c1->n;
            c2 = c2->n;
        }
    }
    
    while (c1 != NULL) {
        ins_t(&result, c1->c, c1->exp);
        c1 = c1->n;
    }
    
    while (c2 != NULL) {
        ins_t(&result, c2->c, c2->exp);
        c2 = c2->n;
    }
    
    return result;
}

void printPolynomial(struct t* poly) {
    struct t* c = poly;
    while (c != NULL) {
        printf(""%d "", c->c);
        c = c->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct t* poly1 = NULL;
    struct t* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            ins_t(&poly1, coef, exp);
        } else {
            ins_t(&poly2, coef, exp);
        }
    }
    
    struct t* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22744712,PES1UG22CS488,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node*next;
};
struct node* create(int n)
{
    struct node* head=(struct node*)malloc(sizeof(struct node));
    struct node*ptr=head;
    head->next=NULL;
    scanf(""%d"",&head->data);
    for(int i=1;i<n;i++)
    {   
        ptr->next=(struct node*)malloc(sizeof(struct node));
        scanf(""%d"",&(ptr->next->data));
        ptr->next->next=NULL;
        ptr=ptr->next;
    }
    return head;
}
int length(struct node*head)
{
    struct node*ptr=head;
    int count=0;
    while(ptr!=NULL)
    {
        ptr=ptr->next;
        count++;
    }
    return count;
}
void display(struct node*p,int a,int b,int c)
{
    for(int i=a;i<b;i++)
    {
        printf(""%d\t"",p->data);
        p=p->next;
    }
    printf(""\n"");
    for(int i=b;i<c;i++)
    {
        printf(""%d\t"",p->data);
        p=p->next;
    }
}
int main() {

    int n,l1,m;
    struct node* p=NULL;
    scanf(""%d"",&n);
    p=create(n);
    l1=length(p);
    if(l1%2!=0)
        m=l1/2+1;
    else
        m=l1/2;
    display(p,0,m,l1);
    return 0;
}"
22744720,PES1UG22CS482,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int c;
    int exp;
    struct Term* n;
};

void insertTerm(struct Term** p, int c, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL) {
        *p = newTerm;
    } else {
        struct Term* current = *p;
        while (current->n != NULL) {
            current = current->n;
        }
        current->n = newTerm;
    }
}

struct Term* addPolynomials(struct Term* p1, struct Term* p2) {
    struct Term* result = NULL;
    struct Term* current1 = p1;
    struct Term* current2 = p2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            insertTerm(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp) {
            insertTerm(&result, current2->c, current2->exp);
            current2 = current2->n;
        } else {
            insertTerm(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }
    
    while (current1 != NULL) {
        insertTerm(&result, current1->c, current1->exp);
        current1 = current1->n;
    }
    
    while (current2 != NULL) {
        insertTerm(&result, current2->c, current2->exp);
        current2 = current2->n;
    }
    
    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22744720,PES1UG22CS482,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

struct Node *createNode(int value) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node **head, int value) {
    struct Node *newNode = createNode(value);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node *temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void splitAndPrint(struct Node *head) {
    if (head == NULL) {
        printf(""Empty List\n"");
        return;
    }

    struct Node *slowPtr = head;
    struct Node *fastPtr = head;

    while (fastPtr->next != NULL && fastPtr->next->next != NULL) {
        slowPtr = slowPtr->next;
        fastPtr = fastPtr->next->next;
    }

    struct Node *firstHalf = head;
    struct Node *secondHalf = slowPtr->next;
    slowPtr->next = NULL;

    struct Node *temp = firstHalf;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");

    temp = secondHalf;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node *head = NULL;

    int value;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    splitAndPrint(head);

    return 0;
}"
22744723,PES1UG22CS434,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct T
{
    int c;
    int exp;
    struct T* n;
};
void insertTerm(struct T** p, int c, int exp)
{
    struct T* newTerm = (struct T*)malloc(sizeof(struct T));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL)
    {
        *p = newTerm;
    } else 
    {
        struct T* current = *p;
        while (current->n != NULL) 
        {
            current = current->n;
        }
        current->n = newTerm;
    }
}
struct T* add(struct T* p1, struct T* p2)
{
    struct T* result = NULL;
    struct T* current1 = p1;
    struct T* current2 = p2;    
    while (current1 != NULL && current2 != NULL)
    {
        if (current1->exp > current2->exp)
        {
            insertTerm(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp)
        {
            insertTerm(&result, current2->c, current2->exp);
            current2 = current2->n;
        } else
        {
            insertTerm(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }    
    while (current1!=NULL) 
    {
        insertTerm(&result, current1->c, current1->exp);
        current1 = current1->n;
    }    
    while (current2!=NULL) 
    {
        insertTerm(&result, current2->c, current2->exp);
        current2 = current2->n;
    }    
    return result;
}
void print(struct T* poly) 
{
    struct T* current = poly;
    while (current!=NULL) {
        printf(""%d "", current->c);
        current=current->n;
    }
    printf(""\n"");
}
int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);   
    struct T* poly1 = NULL;
    struct T* poly2 = NULL;    
    int coef, exp;
    for (int i=0;i<n+m;i++)
    {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) 
        {
            insertTerm(&poly1, coef, exp);
        } else 
        {
            insertTerm(&poly2, coef, exp);
        }
    }   
    struct T* result=add(poly1, poly2);
    print(result);     
    return 0;
}"
22744723,PES1UG22CS434,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
struct Node
{
    int data;
    struct Node *link;
};
struct Node *createNode(int value) 
{
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->link = NULL;
    return newNode;
}
void addEnd(struct Node **head,int value) 
{
    struct Node *newNode = createNode(value);
    if (*head == NULL) 
    {
        *head = newNode;
    } else 
    {
        struct Node *temp = *head;
        while (temp->link != NULL) 
        {
            temp = temp->link;
        }
        temp->link = newNode;
    }
}

void print(struct Node *head) 
{
    if (head == NULL) 
    {
        printf(""Empty List\n"");
        return;
    }
    struct Node *Sptr =head;
    struct Node *fptr =head;
    while(fptr->link != NULL && fptr->link->link != NULL) 
    {
        Sptr=Sptr->link;
        fptr=fptr->link->link;
    }
    struct Node *firstHalf = head;
    struct Node *secondHalf = Sptr->link;
    Sptr->link = NULL;
    struct Node *temp = firstHalf;
    while(temp!=NULL) 
    {
        printf(""%d "", temp->data);
        temp = temp->link;
    }
    printf(""\n"");
    temp=secondHalf;
    while(temp != NULL) 
    {
        printf(""%d "",temp->data);
        temp=temp->link;
    }
    printf(""\n"");
}
int main() 
{
    int n;
    scanf(""%d"", &n);
    struct Node *head=NULL;
    int value;
    for (int i=0;i<n;i++) 
    {
        scanf(""%d"", &value);
        addEnd(&head, value);
    }
    print(head);
    return 0;
}"
22744725,PESIUG22CS459,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coef, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coef;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    while (poly1 != NULL || poly2 != NULL) {
        int coef = 0, exp = 0;

        if (poly1 != NULL && poly2 != NULL) {
            if (poly1->exponent > poly2->exponent) {
                coef = poly1->coefficient;
                exp = poly1->exponent;
                poly1 = poly1->next;
            } else if (poly1->exponent < poly2->exponent) {
                coef = poly2->coefficient;
                exp = poly2->exponent;
                poly2 = poly2->next;
            } else {
                coef = poly1->coefficient + poly2->coefficient;
                exp = poly1->exponent;
                poly1 = poly1->next;
                poly2 = poly2->next;
            }
        } else if (poly1 != NULL) {
            coef = poly1->coefficient;
            exp = poly1->exponent;
            poly1 = poly1->next;
        } else if (poly2 != NULL) {
            coef = poly2->coefficient;
            exp = poly2->exponent;
            poly2 = poly2->next;
        }

        insertTerm(&result, coef, exp);
    }
    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22744725,PESIUG22CS459,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};


void insertEnd(struct Node** head, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}


struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}


void splitLinkedList(struct Node* source, struct Node** firstHalf, struct Node** secondHalf) {
    struct Node* mid = findMidpoint(source);
    *firstHalf = source;
    *secondHalf = mid->next;
    mid->next = NULL;
}


void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;

    splitLinkedList(head, &firstHalf, &secondHalf);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22744735,PES1UG22CS469,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coef, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coef;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    while (poly1 != NULL || poly2 != NULL) {
        int coef = 0, exp = 0;

        if (poly1 != NULL && poly2 != NULL) {
            if (poly1->exponent > poly2->exponent) {
                coef = poly1->coefficient;
                exp = poly1->exponent;
                poly1 = poly1->next;
            } else if (poly1->exponent < poly2->exponent) {
                coef = poly2->coefficient;
                exp = poly2->exponent;
                poly2 = poly2->next;
            } else {
                coef = poly1->coefficient + poly2->coefficient;
                exp = poly1->exponent;
                poly1 = poly1->next;
                poly2 = poly2->next;
            }
        } else if (poly1 != NULL) {
            coef = poly1->coefficient;
            exp = poly1->exponent;
            poly1 = poly1->next;
        } else if (poly2 != NULL) {
            coef = poly2->coefficient;
            exp = poly2->exponent;
            poly2 = poly2->next;
        }

        insertTerm(&result, coef, exp);
    }
    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22744735,PES1UG22CS469,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

// Define the structure for a linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to find the midpoint of the linked list
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

// Function to split the linked list into two parts at the midpoint
void splitLinkedList(struct Node* source, struct Node** firstHalf, struct Node** secondHalf) {
    struct Node* mid = findMidpoint(source);
    *firstHalf = source;
    *secondHalf = mid->next;
    mid->next = NULL;
}

// Function to print the elements of a linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;

    splitLinkedList(head, &firstHalf, &secondHalf);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22744758,PES1UG22CS485,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct term{
    int coeff;
    int exp;
    struct term* next;
};
void insertterm(struct term** head,int coeff,int exp){
    struct term* newterm=(struct term*)malloc(sizeof(struct term));
    newterm->coeff=coeff;
    newterm->exp=exp;
    newterm->next=NULL;
    if(*head==NULL){
        *head=newterm;
        return;
    }
    struct term* current=*head;
    while(current->next!=NULL)
        current=current->next;
    current->next=newterm;
}
struct term* addpoly(struct term* poly1,struct term* poly2){
    struct term* result=NULL;
    while(poly1!=NULL&&poly2!=NULL){
        if(poly1->exp>poly2->exp){
            insertterm(&result,poly1->coeff,poly1->exp);
            poly1=poly1->next;
        }
        else if(poly1->exp<poly2->exp){
            insertterm(&result, poly2->coeff, poly2->exp);
            poly2=poly2->next;
        }
        else{
            insertterm(&result,poly1->coeff + poly2->coeff,poly1->exp);
            poly1=poly1->next;
            poly2=poly2->next;
        }
    }
    while(poly1!=NULL){
        insertterm(&result,poly1->coeff,poly1->exp);
        poly1=poly1->next;
    }
    while(poly2!=NULL){
        insertterm(&result,poly2->coeff,poly2->exp);
        poly2=poly2->next;
    }
    return result;
}
void printpoly(struct term *poly){
    struct term *current=poly;
    while(current!=NULL){
        printf(""%d "",current->coeff);
        current=current->next;
        if(current!=NULL){
        }
    }
    printf(""\n"");
}
int main() {
    int n,m;
    scanf(""%d%d"",&n,&m);
    struct term* poly1 = NULL;
    struct term* poly2 = NULL;
    for(int i=0;i<n;i++){
        int coeff,exp;
        scanf(""%d%d"",&coeff,&exp);
        insertterm(&poly1,coeff,exp);   
    }
    for(int i=0;i<m;i++){
        int coeff,exp;
        scanf(""%d%d"",&coeff,&exp);
        insertterm(&poly2,coeff,exp);   
    }
    struct term* result=addpoly(poly1,poly2);
    printpoly(result);
    return 0;
}"
22744758,PES1UG22CS485,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node
{
    int data;
    struct Node *next;
};
typedef struct Node Node;
Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;i++)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;
        if(head==NULL)
        {
            head=temp;
        }
        else
        {
            p=head;
            while(p->next!=NULL)
            {
                p=p->next;
            }
            p->next=temp;
        }
    }
    return head;
}
void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {
        count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;   
    }
    printf(""\n"");
}
void printll2(Node *head,int n,int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {
        count++;
        if(count>mid)
        {
            printf(""%d "",p->data);
        }
        p=p->next;
    }
}
int main() 
{
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)
    {
        mid=(n/2)+1;  
    }
    else{
        mid=(n/2);
    }
    printll(h,mid);
    printll2(h,n,mid);
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}"
22744760,PES1UG22CS483,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
typedef struct st
{
    int n,m;
    struct st* next;
}node;
node* insl(node* head)
{
    node* a=malloc(sizeof(node));
    if(a==NULL)
    {
        printf(""Failed"");
        return NULL;
    }
    scanf(""%d %d"",&a->n,&a->m);
    a->next=NULL;
    if(head==NULL)
        return a;
    node* h=head;
    while(head->next)
        head=head->next;
    head->next=a;
    return h;
}
void printer(node* head1,node* head2)
{
    int v=(head1->m<head2->m)?head2->m:head1->m;
    int s=0;
    while(head1 && head2)
    {
        if(head1->m!=v && head2->m!=v)
        {
            printf(""%d "",s);
            v=(head1->m<head2->m)?head2->m:head1->m;
            s=0;
        }
        if(v==head1->m)
        {
            s=s+head1->n;
            head1=head1->next;
        }
        if(v==head2->m)
        {
            s=s+head2->n;
            head2=head2->next;
        }
    }
    if(head1==NULL)
    {
        while(head2)
        {
            if(head2->m!=v)
            {
                printf(""%d "",s);
                v=head2->m;
                s=0;
            }
            if(v==head2->m)
            {
                s=s+head2->n;
                head2=head2->next;
            }
        }
    }
    if(head2==NULL)
    {
        head2=head1;
        while(head2)
        {
            if(head2->m!=v)
            {
                printf(""%d "",s);
                v=head2->m;
                s=0;
            }
            if(v==head2->m)
            {
                s=s+head2->n;
                head2=head2->next;
            }
        }
    }
    printf(""%d "",s);
}
void display(node* head)
{
    if(head==NULL)
        return;
    printf(""%d %d\n"",head->n,head->m);
    display(head->next);
}
int main()
{
    int a;
    int b;
    node* head1=NULL;
    node* head2=NULL;
    scanf(""%d %d"",&a,&b);
    for(int i=0;i<a;i++)
        head1=insl(head1);
    for(int i=0;i<b;i++)
        head2=insl(head2);
    printer(head1,head2);
    return 0;
}"
22744760,PES1UG22CS483,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node*next;
};
struct node* create(int n)
{
    struct node* head=(struct node*)malloc(sizeof(struct node));
    struct node*ptr=head;
    head->next=NULL;
    scanf(""%d"",&head->data);
    for(int i=1;i<n;i++)
    {   
        ptr->next=(struct node*)malloc(sizeof(struct node));
        scanf(""%d"",&(ptr->next->data));
        ptr->next->next=NULL;
        ptr=ptr->next;
    }
    return head;
}
int length(struct node*head)
{
    struct node*ptr=head;
    int count=0;
    while(ptr!=NULL)
    {
        ptr=ptr->next;
        count++;
    }
    return count;
}
void display(struct node*p,int a,int b,int c)
{
    for(int i=a;i<b;i++)
    {
        printf(""%d\t"",p->data);
        p=p->next;
    }
    printf(""\n"");
    for(int i=b;i<c;i++)
    {
        printf(""%d\t"",p->data);
        p=p->next;
    }
}
int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n,l1,m;
    struct node* p=NULL;
    scanf(""%d"",&n);
    p=create(n);
    l1=length(p);
    if(l1%2!=0)
        m=l1/2+1;
    else
        m=l1/2;
    display(p,0,m,l1);
    return 0;
}"
22744779,PES1UG22CS452,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct te {
    int c;
    int ex;
    struct te* n;
};

void insertte(struct te** p, int c, int ex) {
    struct te* newte = (struct te*)malloc(sizeof(struct te));
    newte->c = c;
    newte->ex = ex;
    newte->n = NULL;
    
    if (*p == NULL) {
        *p = newte;
    } else {
        struct te* cu = *p;
        while (cu->n != NULL) {
            cu = cu->n;
        }
        cu->n = newte;
    }
}

struct te* addPolynomials(struct te* p1, struct te* p2) {
    struct te* result = NULL;
    struct te* cu1 = p1;
    struct te* cu2 = p2;
    
    while (cu1 != NULL && cu2 != NULL) {
        if (cu1->ex > cu2->ex) {
            insertte(&result, cu1->c, cu1->ex);
            cu1 = cu1->n;
        } else if (cu1->ex < cu2->ex) {
            insertte(&result, cu2->c, cu2->ex);
            cu2 = cu2->n;
        } else {
            insertte(&result, cu1->c + cu2->c, cu1->ex);
            cu1 = cu1->n;
            cu2 = cu2->n;
        }
    }
    
    while (cu1 != NULL) {
        insertte(&result, cu1->c, cu1->ex);
        cu1 = cu1->n;
    }
    
    while (cu2 != NULL) {
        insertte(&result, cu2->c, cu2->ex);
        cu2 = cu2->n;
    }
    
    return result;
}

void printPoly(struct te* poly) {
    struct te* cu = poly;
    while (cu != NULL) {
        printf(""%d "", cu->c);
        cu = cu->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct te* poly1 = NULL;
    struct te* poly2 = NULL;
    
    int coef, ex;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &ex);
        if (i < n) {
            insertte(&poly1, coef, ex);
        } else {
            insertte(&poly2, coef, ex);
        }
    }
    
    struct te* result = addPolynomials(poly1, poly2);
    printPoly(result);
    
    return 0;
}"
22744779,PES1UG22CS452,Divide Linked List 2,15,"#include<stdio.h>
#include<stdlib.h>

struct list 
{
    int a;
    struct list *b;
};

int main()
{
    int n;
    scanf(""%d"",&n);
    struct list *h;
    h=(struct list *)(malloc(sizeof(struct list *)));
    struct list *temp=h;
    for (int i=0; i<n; i++)
    {
        scanf(""%d"",&temp->a);
        
        if (i==n-1)
        {
            temp->b=NULL;
        }
        else
        {
            temp->b=(struct list *)(malloc(sizeof(struct list *)));
            temp=temp->b;
        }
    }
    temp=h;
    
    int q=(n+1)/2;

    for (int i=0; i<q; i++)
    {
        printf(""%d "",temp->a);
        temp=temp->b;
    }

    printf(""\n"");

    for (int i=q; i<n; i++)
    {
        printf(""%d "",temp->a);
        temp=temp->b;
    }
    return 0;
}"
22744781,PES1UG22CS466,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct poly {
    int coeff;
    int exp;
    struct poly *next;
} poly;

int main() {
    int n, m;

   // printf(""Enter the number of terms in polynomial 1 and polynomial 2 respectively: "");
    scanf(""%d %d"", &n, &m);

    poly *p1 = NULL;
    poly *p2 = NULL;
    poly *p3 = NULL;

    //printf(""Enter coefficients and exponents for polynomial 1:\n"");
    for (int i = 0; i < n; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);

        poly *newTerm = (poly *)malloc(sizeof(poly));
        newTerm->coeff = coeff;
        newTerm->exp = exp;
        newTerm->next = NULL;

        if (p1 == NULL) {
            p1 = newTerm;
        } else {
            poly *current = p1;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = newTerm;
        }
    }

    //printf(""Enter coefficients and exponents for polynomial 2:\n"");
    for (int i = 0; i < m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);

        poly *newTerm = (poly *)malloc(sizeof(poly));
        newTerm->coeff = coeff;
        newTerm->exp = exp;
        newTerm->next = NULL;

        if (p2 == NULL) {
            p2 = newTerm;
        } else {
            poly *current = p2;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = newTerm;
        }
    }

    //printf(""The sum of the polynomials is:\n"");
    p3 = NULL;
    poly *tail = NULL;

    while (p1 != NULL && p2 != NULL) {
        poly *newTerm = (poly *)malloc(sizeof(poly));
        newTerm->next = NULL;

        if (p1->exp > p2->exp) {
            newTerm->coeff = p1->coeff;
            newTerm->exp = p1->exp;
            p1 = p1->next;
        } else if (p1->exp < p2->exp) {
            newTerm->coeff = p2->coeff;
            newTerm->exp = p2->exp;
            p2 = p2->next;
        } else {
            newTerm->coeff = p1->coeff + p2->coeff;
            newTerm->exp = p1->exp;
            p1 = p1->next;
            p2 = p2->next;
        }

        if (p3 == NULL) {
            p3 = tail = newTerm;
        } else {
            tail->next = newTerm;
            tail = tail->next;
        }
    }

    // Append remaining terms of p1 or p2, if any
    while (p1 != NULL) {
        poly *newTerm = (poly *)malloc(sizeof(poly));
        newTerm->coeff = p1->coeff;
        newTerm->exp = p1->exp;
        newTerm->next = NULL;

        if (p3 == NULL) {
            p3 = tail = newTerm;
        } else {
            tail->next = newTerm;
            tail = tail->next;
        }

        p1 = p1->next;
    }

    while (p2 != NULL) {
        poly *newTerm = (poly *)malloc(sizeof(poly));
        newTerm->coeff = p2->coeff;
        newTerm->exp = p2->exp;
        newTerm->next = NULL;

        if (p3 == NULL) {
            p3 = tail = newTerm;
        } else {
            tail->next = newTerm;
            tail = tail->next;
        }

        p2 = p2->next;
    }

    // Print the coefficients of the resultant polynomial in the specified format
    while (p3 != NULL) {
        printf(""%d "", p3->coeff);
        p3 = p3->next;
    }
    printf(""\n"");

    // Free allocated memory for the polynomials
    while (p1 != NULL) {
        poly *temp = p1;
        p1 = p1->next;
        free(temp);
    }

    while (p2 != NULL) {
        poly *temp = p2;
        p2 = p2->next;
        free(temp);
    }

    while (p3 != NULL) {
        poly *temp = p3;
        p3 = p3->next;
        free(temp);
    }

    return 0;
}
"
22744781,PES1UG22CS466,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
};

struct node *create_node(int data) {
    struct node *n_node = (struct node *)malloc(sizeof(struct node));
    n_node->data = data;
    n_node->next = NULL;
    return n_node;
}

void end_insert(struct node **head, int data) {
    struct node *n_node = create_node(data);
    if (*head == NULL) {
        *head = n_node;
    } else {
        struct node *temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = n_node;
    }
}

void spp(struct node *head) {
    if (head == NULL) {
        printf(""Empty List\n"");
        return;
    }

    struct node *sp = head;
    struct node *fp = head;

    while (fp->next != NULL && fp->next->next != NULL) {
        sp = sp->next;
        fp = fp->next->next;
    }

    struct node *h1 = head;
    struct node *h2 = sp->next;
    sp->next = NULL;

    struct node *temp = h1;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");

    temp = h2;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct node *head = NULL;

    int data;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &data);
        end_insert(&head, data);
    }

    spp(head);

    return 0;
}"
22744843,PES1UG22CS484,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
};

struct Term *createTerm(int coeff, int exp) {
    struct Term *newTerm = (struct Term *)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    return newTerm;
}

void insertTerm(struct Term **poly, int coeff, int exp) {
    struct Term *newTerm = createTerm(coeff, exp);

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term *temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

void addPolynomials(struct Term **result, struct Term *poly1, struct Term *poly2) {
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent == poly2->exponent) {
            insertTerm(result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        } else if (poly1->exponent > poly2->exponent) {
            insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else {
            insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
}

void display(struct Term *poly) {
    struct Term *temp = poly;
    while (temp != NULL) {
        printf(""%d "", temp->coefficient);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int terms1, terms2;
    scanf(""%d %d"", &terms1, &terms2);

    struct Term *poly1 = NULL;
    struct Term *poly2 = NULL;
    
    int coeff, exp;
    for (int i = 0; i < terms1 + terms2; i++) {
        scanf(""%d %d"", &coeff, &exp);
        if (i < terms1) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term *result = NULL;
    addPolynomials(&result, poly1, poly2);

    display(result);

    return 0;
}
"
22744843,PES1UG22CS484,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

struct Node *createNode(int value) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node **head, int value) {
    struct Node *newNode = createNode(value);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node *temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void splitAndPrint(struct Node *head) {
    if (head == NULL) {
        printf(""Empty List\n"");
        return;
    }

    struct Node *slowPtr = head;
    struct Node *fastPtr = head;

    while (fastPtr->next != NULL && fastPtr->next->next != NULL) {
        slowPtr = slowPtr->next;
        fastPtr = fastPtr->next->next;
    }

    struct Node *firstHalf = head;
    struct Node *secondHalf = slowPtr->next;
    slowPtr->next = NULL;

    struct Node *temp = firstHalf;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");

    temp = secondHalf;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node *head = NULL;

    int value;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    splitAndPrint(head);

    return 0;
}
"
22744884,PES1UG21CS519,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Term {
    int coeff;
    int exp;
    struct Term* next;
};

// Function to insert a term into the polynomial linked list
void insertTerm(struct Term** head, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coeff = coeff;
    newTerm->exp = exp;
    newTerm->next = NULL;
    
    if (*head == NULL) {
        *head = newTerm;
        return;
    }
    
    struct Term* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    
    current->next = newTerm;
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertTerm(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertTerm(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coeff + poly2->coeff, poly1->exp);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }
    
    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->coeff);
        current = current->next;
        if (current != NULL) {
        }
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    for (int i = 0; i < n; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly1, coeff, exp);
    }
    
    for (int i = 0; i < m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly2, coeff, exp);
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22744884,PES1UG21CS519,Divide Linked List 2,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    
    current->next = newNode;
}

// Function to find the midpoint of the linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head;
    
    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

// Function to split the linked list into two parts at the given node
void splitLinkedList(struct Node* head, struct Node* mid, struct Node** firstHalf, struct Node** secondHalf) {
    if (mid == NULL) {
        *firstHalf = NULL;
        *secondHalf = NULL;
        return;
    }
    
    *secondHalf = mid->next;
    mid->next = NULL;
    *firstHalf = head;
}

// Function to print the linked list
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }
    
    struct Node* mid = findMidpoint(head);
    struct Node* firstHalf = head;
    struct Node* secondHalf = NULL;
    splitLinkedList(head, mid, &firstHalf, &secondHalf);
    
    printLinkedList(firstHalf);
    printLinkedList(secondHalf);
    
    return 0;
}"
22744953,pes1202203659,Polynomial Addition,15,"
#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct pol {
    int coef;
    int power;
    struct pol *next;
};

// Create a new term node with given coefficient and exponent
struct pol *createpol(int coeff, int exp) {
    struct pol *newpol = (struct pol *)malloc(sizeof(struct pol));
    newpol->coef = coeff;
    newpol->power = exp;
    newpol->next = NULL;
    return newpol;
}

// Insert a term at the end of the polynomial
void insertpol(struct pol **poly, int coeff, int exp) {
    struct pol *newpol = createpol(coeff, exp);

    if (*poly == NULL) {
        *poly = newpol;
    } else {
        struct pol *temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newpol;
    }
}

// Add two polynomials and store the result in the result polynomial
void addPolynomials(struct pol **result, struct pol *poly1, struct pol *poly2) {
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->power == poly2->power) {
            insertpol(result, poly1->coef + poly2->coef, poly1->power);
            poly1 = poly1->next;
            poly2 = poly2->next;
        } else if (poly1->power > poly2->power) {
            insertpol(result, poly1->coef, poly1->power);
            poly1 = poly1->next;
        } else {
            insertpol(result, poly2->coef, poly2->power);
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertpol(result, poly1->coef, poly1->power);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertpol(result, poly2->coef, poly2->power);
        poly2 = poly2->next;
    }
}

// Display the coefficients of the polynomial
void display(struct pol *poly) {
    struct pol *temp = poly;
    while (temp != NULL) {
        printf(""%d "", temp->coef);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int term1, term2;
    scanf(""%d %d"", &term1, &term2);

    struct pol *poly1 = NULL;
    struct pol *poly2 = NULL;
    
    int coeff, exp;
    for (int i = 0; i < term1 + term2; i++) {
        scanf(""%d %d"", &coeff, &exp);
        if (i < term1) {
            insertpol(&poly1, coeff, exp);
        } else {
            insertpol(&poly2, coeff, exp);
        }
    }

    struct pol *result = NULL;
    addPolynomials(&result, poly1, poly2);

    display(result);

    return 0;
}

"
22744953,pes1202203659,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
};

struct node *createnode(int ele) {
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    newnode->data = ele;
    newnode->next = NULL;
    return newnode;
}

void insertlast(struct node **head, int ele) {
    struct node *newnode = createnode(ele);
    if (*head == NULL) {
        *head = newnode;
    } else {
        struct node *temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newnode;
    }
}

void split(struct node *head) {
    if (head == NULL) {
        printf(""Empty List\n"");
        return;
    }

    struct node *sptr = head;
    struct node *fptr = head;

    while (fptr->next != NULL && fptr->next->next != NULL) {
        sptr = sptr->next;
        fptr = fptr->next->next;
    }

    struct node *H1 = head;
    struct node *H2 = sptr->next;
    sptr->next = NULL;

    struct node *temp = H1;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");

    temp = H2;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct node *head = NULL;

    int ele;
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &ele);
        insertlast(&head, ele);
    }

    split(head);

    return 0;
}
"
22837243,PES1UG22CS479,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    
    if (*poly == NULL || exp > (*poly)->exponent) {
        newNode->next = *poly;
        *poly = newNode;
    } else {
        struct Node* current = *poly;
        while (current->next != NULL && current->next->exponent >= exp) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int coeffSum = poly1->coefficient + poly2->coefficient;
            if (coeffSum != 0) {
                insertTerm(&result, coeffSum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    
    return result;
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }
    
    struct Node* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}
"
22837243,PES1UG22CS479,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head;

    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}
void splitLinkedList(struct Node* source, struct Node** firstHalf, struct Node** secondHalf) {
    struct Node* midpoint = findMidpoint(source);
    *firstHalf = source;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}

void printList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf(""%d "", temp->data);
        temp = temp->next;
    }
    printf(""\n"");
}

int main() {
    int n, data;
    struct Node* head = NULL;

    scanf(""%d"", &n);
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &data);
        insertEnd(&head, data);
    }
    
    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;
    splitLinkedList(head, &firstHalf, &secondHalf);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22837814,PES1UG22CS449_P,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>


struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coef, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coef;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    while (poly1 != NULL || poly2 != NULL) {
        int coef = 0, exp = 0;

        if (poly1 != NULL && poly2 != NULL) {
            if (poly1->exponent > poly2->exponent) {
                coef = poly1->coefficient;
                exp = poly1->exponent;
                poly1 = poly1->next;
            } else if (poly1->exponent < poly2->exponent) {
                coef = poly2->coefficient;
                exp = poly2->exponent;
                poly2 = poly2->next;
            } else {
                coef = poly1->coefficient + poly2->coefficient;
                exp = poly1->exponent;
                poly1 = poly1->next;
                poly2 = poly2->next;
            }
        } else if (poly1 != NULL) {
            coef = poly1->coefficient;
            exp = poly1->exponent;
            poly1 = poly1->next;
        } else if (poly2 != NULL) {
            coef = poly2->coefficient;
            exp = poly2->exponent;
            poly2 = poly2->next;
        }

        insertTerm(&result, coef, exp);
    }
    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22837814,PES1UG22CS449_P,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};


void insertEnd(struct Node** head, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}


struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}


void splitLinkedList(struct Node* source, struct Node** firstHalf, struct Node** secondHalf) {
    struct Node* mid = findMidpoint(source);
    *firstHalf = source;
    *secondHalf = mid->next;
    mid->next = NULL;
}


void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;

    splitLinkedList(head, &firstHalf, &secondHalf);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22837875,PES1UG22CS900,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
typedef struct st
{
    int n, m;
    struct st *next;
} node;
node *insl(node *head)
{
    node *a = malloc(sizeof(node));
    if (a == NULL)
    {
        printf(""Failed"");
        return NULL;
    }
    scanf(""%d %d"", &a->n, &a->m);
    a->next = NULL;
    if (head == NULL)
        return a;
    node *h = head;
    while (head->next)
        head = head->next;
    head->next = a;
    return h;
}
void printer(node *head1, node *head2)
{
    int v = (head1->m < head2->m) ? head2->m : head1->m;
    int s = 0;
    while (head1 && head2)
    {
        if (head1->m != v && head2->m != v)
        {
            printf(""%d "", s);
            v = (head1->m < head2->m) ? head2->m : head1->m;
            s = 0;
        }
        if (v == head1->m)
        {
            s = s + head1->n;
            head1 = head1->next;
        }
        if (v == head2->m)
        {
            s = s + head2->n;
            head2 = head2->next;
        }
    }
    if (head1 == NULL)
    {
        while (head2)
        {
            if (head2->m != v)
            {
                printf(""%d "", s);
                v = head2->m;
                s = 0;
            }
            if (v == head2->m)
            {
                s = s + head2->n;
                head2 = head2->next;
            }
        }
    }
    if (head2 == NULL)
    {
        head2 = head1;
        while (head2)
        {
            if (head2->m != v)
            {
                printf(""%d "", s);
                v = head2->m;
                s = 0;
            }
            if (v == head2->m)
            {
                s = s + head2->n;
                head2 = head2->next;
            }
        }
    }
    printf(""%d "", s);
}
void display(node *head)
{
    if (head == NULL)
        return;
    printf(""%d %d\n"", head->n, head->m);
    display(head->next);
}
int main()
{
    int a;
    int b;
    node *head1 = NULL;
    node *head2 = NULL;
    scanf(""%d %d"", &a, &b);
    for (int i = 0; i < a; i++)
        head1 = insl(head1);
    for (int i = 0; i < b; i++)
        head2 = insl(head2);
    printer(head1, head2);
    return 0;
}
"
22837875,PES1UG22CS900,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
};
struct node *create(int n)
{
    struct node *head = (struct node *)malloc(sizeof(struct node));
    struct node *ptr = head;
    head->next = NULL;
    scanf(""%d"", &head->data);
    for (int i = 1; i < n; i++)
    {
        ptr->next = (struct node *)malloc(sizeof(struct node));
        scanf(""%d"", &(ptr->next->data));
        ptr->next->next = NULL;
        ptr = ptr->next;
    }
    return head;
}
int length(struct node *head)
{
    struct node *ptr = head;
    int count = 0;
    while (ptr != NULL)
    {
        ptr = ptr->next;
        count++;
    }
    return count;
}
void display(struct node *p, int a, int b, int c)
{
    for (int i = a; i < b; i++)
    {
        printf(""%d "", p->data);
        p = p->next;
    }
    printf(""\n"");
    for (int i = b; i < c; i++)
    {
        printf(""%d "", p->data);
        p = p->next;
    }
}
int main()
{
    int n, l1, m;
    struct node *p = NULL;
    // printf(""Enter number\n"");
    scanf(""%d"", &n);
    p = create(n);
    l1 = length(p);
    if (l1 % 2 != 0)
        m = l1 / 2 + 1;
    else
        m = l1 / 2;
    display(p, 0, m, l1);
    return 0;
}
"
22837883,preethamkh23,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* current = *poly;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newTerm;
    }
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    struct Term* current1 = poly1;
    struct Term* current2 = poly2;

    while (current1 != NULL && current2 != NULL) {
        if (current1->exponent > current2->exponent) {
            insertTerm(&result, current1->coefficient, current1->exponent);
            current1 = current1->next;
        } else if (current1->exponent < current2->exponent) {
            insertTerm(&result, current2->coefficient, current2->exponent);
            current2 = current2->next;
        } else {
            insertTerm(&result, current1->coefficient + current2->coefficient, current1->exponent);
            current1 = current1->next;
            current2 = current2->next;
        }
    }

    while (current1 != NULL) {
        insertTerm(&result, current1->coefficient, current1->exponent);
        current1 = current1->next;
    }

    while (current2 != NULL) {
        insertTerm(&result, current2->coefficient, current2->exponent);
        current2 = current2->next;
    }

    return result;
}

void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->coefficient);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    int coeff, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}

"
22837883,preethamkh23,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        { 
              head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    return 0;
}"
22837969,ruthwinvenkatesh,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Term {
    int coeff;
    int exp;
    struct Term* next;
};

void insertTerm(struct Term** head, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coeff = coeff;
    newTerm->exp = exp;
    newTerm->next = NULL;
    
    if (*head == NULL) {
        *head = newTerm;
        return;
    }
    
    struct Term* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    
    current->next = newTerm;
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertTerm(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertTerm(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coeff + poly2->coeff, poly1->exp);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }
    
    return result;
}

void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->coeff);
        current = current->next;
        if (current != NULL) {
        }
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    for (int i = 0; i < n; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly1, coeff, exp);
    }
    
    for (int i = 0; i < m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly2, coeff, exp);
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22837969,ruthwinvenkatesh,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    
    current->next = newNode;
}

// Function to find the midpoint of the linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    
    struct Node* slow = head;
    struct Node* fast = head;
    
    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

// Function to split the linked list into two parts at the given node
void splitLinkedList(struct Node* head, struct Node* mid, struct Node** firstHalf, struct Node** secondHalf) {
    if (mid == NULL) {
        *firstHalf = NULL;
        *secondHalf = NULL;
        return;
    }
    
    *secondHalf = mid->next;
    mid->next = NULL;
    *firstHalf = head;
}

// Function to print the linked list
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct Node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }
    
    struct Node* mid = findMidpoint(head);
    struct Node* firstHalf = head;
    struct Node* secondHalf = NULL;
    splitLinkedList(head, mid, &firstHalf, &secondHalf);
    
    printLinkedList(firstHalf);
    printLinkedList(secondHalf);
    
    return 0;
}"
22838036,PES1UG22CS470,Polynomial Addition,15,"#include <stdio.h>
#include<string.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coef, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coef;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    while (poly1 != NULL || poly2 != NULL) {
        int coef = 0, exp = 0;

        if (poly1 != NULL && poly2 != NULL) {
            if (poly1->exponent > poly2->exponent) {
                coef = poly1->coefficient;
                exp = poly1->exponent;
                poly1 = poly1->next;
            } else if (poly1->exponent < poly2->exponent) {
                coef = poly2->coefficient;
                exp = poly2->exponent;
                poly2 = poly2->next;
            } else {
                coef = poly1->coefficient + poly2->coefficient;
                exp = poly1->exponent;
                poly1 = poly1->next;
                poly2 = poly2->next;
            }
        } else if (poly1 != NULL) {
            coef = poly1->coefficient;
            exp = poly1->exponent;
            poly1 = poly1->next;
        } else if (poly2 != NULL) {
            coef = poly2->coefficient;
            exp = poly2->exponent;
            poly2 = poly2->next;
        }

        insertTerm(&result, coef, exp);
    }
    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coef, exp;
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22838036,PES1UG22CS470,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

// Define the structure for a linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertEnd(struct Node** head, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to find the midpoint of the linked list
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

// Function to split the linked list into two parts at the midpoint
void splitLinkedList(struct Node* source, struct Node** firstHalf, struct Node** secondHalf) {
    struct Node* mid = findMidpoint(source);
    *firstHalf = source;
    *secondHalf = mid->next;
    mid->next = NULL;
}

// Function to print the elements of a linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertEnd(&head, value);
    }

    struct Node* firstHalf = NULL;
    struct Node* secondHalf = NULL;

    splitLinkedList(head, &firstHalf, &secondHalf);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"