studentId,studentUserName,challenge,score,code
12261546,sutejask,Reversing a Linked List 1,7.5,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node{
    int val;
    struct Node* next;
}Node;

void reverse(Node** head){
    Node* current = *head;
    if(current == NULL) return;
    Node* prev = NULL;
    Node* next = current->next;

    while(next!=NULL){
        current->next = prev;
        prev = current;
        current = next;
        next = next->next;
    }
    current->next = prev;
    (*head) = current;

}

int main(){
    int n,x;
    scanf(""%d"",&n);
    Node* head = NULL;
    Node* copy = NULL;
    for(int i=0;i<n;i++){
        scanf(""%d"",&x);
        Node* temp = malloc(sizeof(Node));
        temp->val = x;
        if(copy == NULL){
            head = temp;
            copy = temp;
        }
        else{
            copy->next = temp;
            copy = copy->next;
        }
    }

    reverse(&head);
    copy = head;
    while(copy!=NULL){
        printf(""%d"",copy->val);
        copy = copy->next;
    }
    return 0;
}
"
22689774,PES1UG22CS285,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node{
    int data;
    struct node* next;
};

void display(struct node* head){
    struct node* curr = head;
    while (curr){
        printf(""%d"", curr->data);
        curr = curr->next;
    }
}

struct node* rev(struct node* head){
    struct node* prev = NULL;
    struct node* curr = head;
    while(curr){
        struct node* new = curr->next;
        curr->next = prev;
        prev = curr;
        curr = new;
    }
    return prev;
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct node* head = NULL;
    struct node* current = NULL;
    for(int i=0; i<n; i++){
        int val;
        scanf(""%d"", &val);
        struct node* new = (struct node*)malloc(sizeof(struct node));
        new->data = val;
        new->next = NULL;
        if (current==NULL){
            head = new;
            current = new;
        }else{
            current->next = new;
            current = new;
        }
    }
    struct node* revHead = rev(head);
    display(revHead);
    
    current = revHead;
    while(current){
        struct node* temp = current;
        current = current->next;
        free(temp);
    }
    
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
"
22689774,PES1UG22CS285,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct node
{
    long int data;
    struct node* next;
};

typedef struct node node;

void insert(node** head,int value)
{
    node* new=(node*)malloc(sizeof(node));
    new->data=value;
    new->next=NULL;
    if(*head==NULL)
        *head=new;
    else
    {
        node* current=*head;
        while(current->next!=NULL)
        {
            current=current->next;
        }
        current->next=new;
    }
}
node* addlists(node* list1,node* list2)
{
    node* sum_head=NULL;
    int car=0;
    while(list1||list2||car>0)
    {
        int val1=(list1!=NULL)?list1->data:0;
        int val2=(list2!=NULL)?list2->data:0;
        int current_sum=val1+val2+car;
        car=current_sum/10;
        int digit=current_sum%10;
        insert(&sum_head,digit);
        if(list1!=NULL)list1=list1->next;
        if(list2!=NULL)list2=list2->next;
    }
    return sum_head;
}
void printlist(node* head)
{
    while(head)
    {
        printf(""%ld "",head->data);
        head=head->next;
    }
}
int main() {

    long int n1,n2;
    scanf(""%ld %ld"",&n1,&n2);
    node* l1=NULL;
    node* l2=NULL;
    for(int i=0;i<n1;i++)
    {
        long int value;
        scanf(""%ld"",&value);
        insert(&l1,value);
    }
    for(int j=0;j<n2;j++)
    {
        long int value;
        scanf(""%ld"",&value);
        insert(&l2,value);
    }
    node* sum=addlists(l1,l2);
    printlist(sum);
    return 0;
}
"
22732209,pes1UG22CS295,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct node{
    int data;
    struct node* next;
};
struct node* reverse(struct node *head){
    struct node*prev=NULL;
    struct node* current=head;
    struct node* nextnode;
    while(current){
        nextnode=current->next;
        current->next=prev;
        prev=current;
        current=nextnode;
    }
    return prev;
}
void display(struct node *head) {
    struct node* current = head;
    while (current != NULL) {
        printf(""%d"", current->data);
        current = current->next;
    }
}
int main() {
    int numNodes;
    scanf(""%d"", &numNodes);
    
    struct node* head = NULL;
    struct node* current = NULL;
    
    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct node* newnode = (struct node*)malloc(sizeof(struct node));
        newnode->data = value;
        newnode->next = NULL;
        
        if (head == NULL) {
            head = newnode;
            current = head;
        } else {
            current->next = newnode;
            current = newnode;
        }
    }
    head = reverse(head);
    display(head);
    current = head;
    while (current != NULL) {
        struct node* temp = current;
        current = current->next;
        free(temp);
    }
}
"
22732209,pes1UG22CS295,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct node
{
    long int val;
    struct node* next;
};

typedef struct node node;

void insert(node** head,long int val)
{
    node* new=(node*)malloc(sizeof(node));
    new->val=val;
    new->next=NULL;
    if(*head==NULL)
        *head=new;
    else
    {
        node* curr=*head;
        while(curr->next!=NULL)
        {
            curr=curr->next;
        }
        curr->next=new;
    }
}
node* add(node* list1,node* list2)
{
    node* sum_head=NULL;
    long int car=0;
    while(list1!=NULL||list2!=NULL||car>0)
    {
        long int val1=(list1!=NULL)?list1->val:0;
        long int val2=(list2!=NULL)?list2->val:0;
        long int curr_sum=val1+val2+car;
        car=curr_sum/10;
        long int digit=curr_sum%10;
        insert(&sum_head,digit);
        if(list1!=NULL)list1=list1->next;
        if(list2!=NULL)list2=list2->next;
    }
    return sum_head;
}
void print(node* head)
{
    while(head!=NULL)
    {
        printf(""%ld "",head->val);
        head=head->next;
    }
}
int main() {

    long int n1,n2;
    scanf(""%ld %ld"",&n1,&n2);
    node* l1=NULL;
    node* l2=NULL;
    for(int i=0;i<n1;i++)
    {
        long int val;
        scanf(""%ld"",&val);
        insert(&l1,val);
    }
    for(int j=0;j<n2;j++)
    {
        long int val;
        scanf(""%ld"",&val);
        insert(&l2,val);
    }
    node* sum=add(l1,l2);
    print(sum);
    return 0;
}
"
22732261,PES1UG22CS275,Reversing a Linked List 1,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *link;
};
struct node *reverselist(struct node *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->link;
        cur->link=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->link;
    }
}
int main(){
    int n;
    int data;
    scanf(""%d"",&n);
    if (n < 0 || n > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<n;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->link=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->link=newnode;
        }
        prev=newnode;
    }
    struct node* reversedHead = reverselist(head);
    printlist(reversedHead);
    
    
    return 0;
}"
22732261,PES1UG22CS275,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Node
{
    int value;
    struct Node* next;
};

typedef struct Node Node;

void insert(Node** head,int value)
{
    Node* new_node=(Node*)malloc(sizeof(Node));
    new_node->value=value;
    new_node->next=NULL;
    if(*head==NULL)
        *head=new_node;
    else
    {
        Node* current=*head;
        while(current->next!=NULL)
        {
            current=current->next;
        }
        current->next=new_node;
    }
}
Node* addlists(Node* list1,Node* list2)
{
    Node* sum_head=NULL;
    int car=0;
    while(list1!=NULL||list2!=NULL||car>0)
    {
        int val1=(list1!=NULL)?list1->value:0;
        int val2=(list2!=NULL)?list2->value:0;
        int current_sum=val1+val2+car;
        car=current_sum/10;
        int digit=current_sum%10;
        insert(&sum_head,digit);
        if(list1!=NULL)list1=list1->next;
        if(list2!=NULL)list2=list2->next;
    }
    return sum_head;
}
void printlist(Node* head)
{
    while(head!=NULL)
    {
        printf(""%d "",head->value);
        head=head->next;
    }
}
int main() {

    int n1,n2;
    scanf(""%d %d"",&n1,&n2);
    Node* l1=NULL;
    Node* l2=NULL;
    for(int i=0;i<n1;i++)
    {
        int value;
        scanf(""%d"",&value);
        insert(&l1,value);
    }
    for(int j=0;j<n2;j++)
    {
        int value;
        scanf(""%d"",&value);
        insert(&l2,value);
    }
    Node* sum=addlists(l1,l2);
    printlist(sum);
    return 0;
}"
22732266,PES1UG22CS272,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode {
    int val;
    struct ListNode* next;
} NODE;

NODE* reverseLinkedList(NODE* head)
{
    NODE* prev = NULL;
    NODE* current = head;
    while (current != NULL) {
        NODE* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    return prev;
}

void printLinkedListValues(NODE* head)
{
    NODE* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        current = current->next;
    }
}

int main()
{
    int num_nodes;
    scanf(""%d"", &num_nodes);
    NODE* head = NULL;
    NODE* current = NULL;
    for (int i = 0; i < num_nodes; i++) {
        int val;
        scanf(""%d"", &val);
        NODE* newNode = (NODE*)malloc(sizeof(NODE));
        newNode->val = val;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = head;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }
    NODE* reversedHead = reverseLinkedList(head);
    
    printLinkedListValues(reversedHead);
    while (reversedHead != NULL) {
        NODE* temp = reversedHead;
        reversedHead = reversedHead->next;
        free(temp);
    }
    return 0;
}"
22732266,PES1UG22CS272,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode {
    int value;
    struct ListNode* next;
} NODE;

NODE* addReversedDigitLists(NODE* list1, NODE* list2) {
    NODE* result = NULL;
    NODE* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry != 0) {
        int sum = carry;
        
        if (list1 != NULL) {
            sum += list1->value;
            list1 = list1->next;
        }
        
        if (list2 != NULL) {
            sum += list2->value;
            list2 = list2->next;
        }
        
        carry = sum / 10;
        sum %= 10;

        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = sum;
        new_node->next = NULL;

        if (result == NULL) {
            result = new_node;
            current = result;
        } else {
            current->next = new_node;
            current = current->next;
        }
    }

    return result;
}

void printLinkedList(NODE* head) {
    NODE* current = head;
    while (current != NULL) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

void freeLinkedList(NODE* head) {
    while (head != NULL) {
        NODE* temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    int num_digits_list1, num_digits_list2;
    scanf(""%d %d"", &num_digits_list1, &num_digits_list2);

    NODE* list1 = NULL;
    NODE* current1 = NULL;
    int value;

    for (int i = 0; i < num_digits_list1; i++) {
        scanf(""%d"", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;

        if (list1 == NULL) {
            list1 = new_node;
            current1 = list1;
        } else {
            current1->next = new_node;
            current1 = current1->next;
        }
    }

    NODE* list2 = NULL;
    NODE* current2 = NULL;

    for (int i = 0; i < num_digits_list2; i++) {
        scanf(""%d"", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;

        if (list2 == NULL) {
            list2 = new_node;
            current2 = list2;
        } else {
            current2->next = new_node;
            current2 = current2->next;
        }
    }

    NODE* result = addReversedDigitLists(list1, list2);
    printLinkedList(result);
    freeLinkedList(result);

    return 0;
}
"
22732293,PES1UG22CS286,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* reverseLinkedList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    struct ListNode* nextNode = NULL;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printReversedLinkedList(struct ListNode* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct ListNode* head = NULL;
    struct ListNode* tail = NULL;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    struct ListNode* newHead = reverseLinkedList(head);
    printReversedLinkedList(newHead);

    // Clean up memory
    while (newHead != NULL) {
        struct ListNode* temp = newHead;
        newHead = newHead->next;
        free(temp);
    }

    return 0;
}"
22732293,PES1UG22CS286,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

// Definition for singly-linked list.
struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}

// Helper function to create a linked list from an array of digits
struct ListNode* create_linked_list(int* digits, int num_digits) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return dummy->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct ListNode* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct ListNode* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct ListNode* result = add_linked_lists(l1, l2);

    // Print the result
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}"
22732333,PES1UG22CS271,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* reverseLinkedList(struct ListNode* head) {
    struct ListNode* llink = NULL;
    struct ListNode* current = head;
    struct ListNode* rlink = NULL;

    while (current != NULL) {
        rlink = current->next;
        current->next = llink;
        llink = current;
        current = rlink;
    }

    return llink;
}

void printReversedLinkedList(struct ListNode* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct ListNode* head = NULL;
    struct ListNode* tail = NULL;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    struct ListNode* newHead = reverseLinkedList(head);
    printReversedLinkedList(newHead);

    
    while (newHead != NULL) {
        struct ListNode* temp = newHead;
        newHead = newHead->next;
        free(temp);
    }

    return 0;
}
"
22732333,PES1UG22CS271,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}

struct ListNode* create_linked_list(int* digits, int num_digits) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return dummy->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct ListNode* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct ListNode* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct ListNode* result = add_linked_lists(l1, l2);

    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}"
22732343,pes1202201267,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Node
{
    int value;
    struct Node* next;
};
typedef struct Node Node;

void insert(Node** head,int value)
{
    Node* new_node=(Node*)malloc(sizeof(Node));
    new_node->value=value;
    new_node->next=NULL;
    if(*head==NULL)
    {
        *head=new_node;
    }
    else
    {
        Node* current=*head;
        while(current->next!=NULL)
        {
            current=current->next;
        }
        current->next=new_node;
    }
}
void revprint(Node** head)
{
    Node* prev=NULL;
    Node* current=*head;
    Node* next_node;
    while(current!=NULL)
    {
        next_node=current->next;
        current->next=prev;
        prev=current;
        current=next_node;
    }
    *head=prev;
    current=*head;
    while(current!=NULL)
    {
        printf(""%d"",current->value);
        current=current->next;
    }
}
int main() {

    int n;
    scanf(""%d"",&n);
    if (n< 0 || n > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    Node* head=NULL;
    for(int i=0;i<n;i++)
    {
        int value;
        scanf(""%d "",&value);
        insert(&head,value);
    }
    revprint(&head);
    return 0;
}"
22732343,pes1202201267,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}


struct ListNode* create_linked_list(int* digits, int num_digits) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return dummy->next;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);
     if (n1 < 0 || n1 > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
      if (n2 < 0 || n2 > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    int digits_l1[n1];
    int digits_l2[n2];

    for (int i = 0; i < n1; i++) {
        scanf(""%d"", &digits_l1[i]);
    }

    for (int i = 0; i < n2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct ListNode* l1 = create_linked_list(digits_l1, n1);
    struct ListNode* l2 = create_linked_list(digits_l2, n2);

    struct ListNode* result = add_linked_lists(l1, l2);

    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}
"
22732365,PES1UG22CS296,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *link;
};

struct node *newNode(int data) {
    struct node *Node = malloc(sizeof(struct node));
    Node->data = data;
    Node->link = NULL;
    return Node;
}

void printlist(struct node *head) {
    while (head) {
        printf(""%d"", head->data);
        head = head->link;
    }
}

void reverse(struct node **head) {
    struct node *temp1 = NULL;
    struct node *temp2 = *head;
    
    while (temp2 != NULL) {
        struct node *temp3 = temp2->link;
        temp2->link = temp1;
        temp1 = temp2;
        temp2 = temp3;
    }
    
    *head = temp1;
}

int main() {
    struct node *head = NULL;
    struct node *p = head;
    int n, ele;
    
    scanf(""%d"", &n);
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &ele);
        if (head == NULL) {
            head = newNode(ele);
            p = head;
        } else {
            p->link = newNode(ele);
            p = p->link;
        }
    }
    
    reverse(&head);
    printlist(head);
    
    return 0;
}"
22732365,PES1UG22CS296,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *link;
};

struct node *newNode(int data) {
    struct node *Node = malloc(sizeof(struct node));
    Node->data = data;
    Node->link = NULL;
    return Node;
}

void printlist(struct node *head) {
    while (head) {
        printf(""%d "", head->data);
        head = head->link;
    }
}

struct node *add(struct node *head1, struct node *head2) {
    struct node *head3 = NULL;
    struct node *temp3 = NULL;
    int carry = 0;
    
    while (head1 != NULL || head2 != NULL || carry != 0) {
        int sum = carry;
        
        if (head1 != NULL) {
            sum += head1->data;
            head1 = head1->link;
        }
        
        if (head2 != NULL) {
            sum += head2->data;
            head2 = head2->link;
        }
        
        carry = sum / 10;
        sum %= 10;
        
        if (head3 == NULL) {
            head3 = newNode(sum);
            temp3 = head3;
        } else {
            temp3->link = newNode(sum);
            temp3 = temp3->link;
        }
    }
    
    return head3;
}

int main() {
    struct node *head1 = NULL;
    struct node *head2 = NULL;
    struct node *head3 = NULL;
    struct node *p = NULL;
    int n1, n2, ele;
    
    scanf(""%d %d"", &n1, &n2);
    for (int i = 0; i < n1; i++) {
        scanf(""%d"", &ele);
        if (head1 == NULL) {
            head1 = newNode(ele);
            p = head1;
        } else {
            p->link = newNode(ele);
            p = p->link;
        }
    }
    for (int j = 0; j < n2; j++) {
        scanf(""%d"", &ele);
        if (head2 == NULL) {
            head2 = newNode(ele);
            p = head2;
        } else {
            p->link = newNode(ele);
            p = p->link;
        }
    }
    head3 = add(head1, head2);
   
    printlist(head3);
    
    return 0;
}"
22732377,PES1UG22CS255,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* reverseLinkedList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;

    while (current != NULL) {
        struct ListNode* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct ListNode* head = NULL;
    struct ListNode* current = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);

        if (head == NULL) {
            head = (struct ListNode*)malloc(sizeof(struct ListNode));
            head->value = value;
            head->next = NULL;
            current = head;
        } else {
            current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
            current = current->next;
            current->value = value;
            current->next = NULL;
        }
    }

    struct ListNode* newHead = reverseLinkedList(head);
    printLinkedList(newHead);

    
    current = newHead;
    while (current != NULL) {
        struct ListNode* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}"
22732377,PES1UG22CS255,ADD TWO NUMBERS 104,7.5,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int data;
    struct node *next;
}NODE;

NODE* createnode(int ele)
{
    NODE *newnode = malloc(sizeof(NODE*));
    newnode->data=ele;
    newnode->next=NULL;
    return newnode;
}

NODE* addlists(NODE *l1, NODE *l2)
{
    NODE temp; NODE *p=&temp;
    int carry=0;
    
    while(l1||l2||carry)
    {
        int sum=carry;
        if(l1)
        {
            sum += l1->data;
            l1=l1->next;
        }
        if(l2)
        {
            sum += l2->data;
            l2=l2->next;
        }
        
        carry = sum/10;
        p->next=createnode(sum%10);
        p=p->next;
    }
    return temp.next;
}

void printlists(NODE* head)
{
    while(head!=NULL)
    {
        printf(""%d "", head->data);
        head=head->next;
    }
}
int main() 
{
    int num1, num2, n1, n2, n3, n4, n5, n6;
    scanf(""%d %d\n"", &num1,&num2);
    scanf(""%d %d %d\n"",&n1, &n2, &n3);
    scanf(""%d %d %d"",&n4, &n5, &n6);
    NODE *l1 = createnode(n1);
    l1->next=createnode(n2);
    l1->next->next=createnode(n3);
    
    NODE *l2= createnode(n4);
    l2->next=createnode(n5);
    l2->next->next=createnode(n6);
    
    NODE *answer=addlists(l1,l2);
    printlists(answer);
}
"
22732392,PES1UG22CS305,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

struct ListNode* reverseLinkedList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    
    while (current != NULL) {
        struct ListNode* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    
    return prev;
}

void printLinkedListValues(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        current = current->next;
    }
}

int main() {
    
    int num_nodes;
    scanf(""%d"", &num_nodes);

    
    struct ListNode* head = NULL;
    struct ListNode* current = NULL;
    for (int i = 0; i < num_nodes; i++) {
        int val;
        scanf(""%d"", &val);
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->val = val;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = head;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }

    
    struct ListNode* reversedHead = reverseLinkedList(head);

  
    printLinkedListValues(reversedHead);

    
    while (reversedHead != NULL) {
        struct ListNode* temp = reversedHead;
        reversedHead = reversedHead->next;
        free(temp);
    }

    return 0;
}"
22732392,PES1UG22CS305,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode {
    int value;
    struct ListNode* next;
} NODE;

NODE* addReversedDigitLists(NODE* list1, NODE* list2) {
    NODE* result = NULL;
    NODE* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry != 0) {
        int sum = carry;
        
        if (list1 != NULL) {
            sum += list1->value;
            list1 = list1->next;
        }
        
        if (list2 != NULL) {
            sum += list2->value;
            list2 = list2->next;
        }
        
        carry = sum / 10;
        sum %= 10;

        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = sum;
        new_node->next = NULL;

        if (result == NULL) {
            result = new_node;
            current = result;
        } else {
            current->next = new_node;
            current = current->next;
        }
    }

    return result;
}

void printLinkedList(NODE* head) {
    NODE* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

void freeLinkedList(NODE* head) {
    while (head != NULL) {
        NODE* temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    int num_digits_list1, num_digits_list2;
    scanf(""%d %d"", &num_digits_list1, &num_digits_list2);

    NODE* list1 = NULL;
    NODE* current1 = NULL;
    int value;

    for (int i = 0; i < num_digits_list1; i++) {
        scanf(""%d"", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;

        if (list1 == NULL) {
            list1 = new_node;
            current1 = list1;
        } else {
            current1->next = new_node;
            current1 = current1->next;
        }
    }

    NODE* list2 = NULL;
    NODE* current2 = NULL;

    for (int i = 0; i < num_digits_list2; i++) {
        scanf(""%d"", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;

        if (list2 == NULL) {
            list2 = new_node;
            current2 = list2;
        } else {
            current2->next = new_node;
            current2 = current2->next;
        }
    }

    NODE* result = addReversedDigitLists(list1, list2);
    printLinkedList(result);
    freeLinkedList(result);

    return 0;
}"
22732415,PES1UG22CS257,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    long int element;
    struct node *next;
}NODE;

NODE* insert_last(NODE* head, int ele){
    NODE* new_node = (NODE*)malloc(sizeof(NODE));
    if (head == NULL){
        new_node->element = ele;
        new_node->next = NULL;
        head = new_node;        
    }
    else{
    NODE* ptr = head;
    while (ptr->next != NULL){
        ptr = ptr->next;
    }
    new_node->element = ele;
    new_node->next = NULL;
    ptr->next = new_node;
    }
    return head;
}

int main() {
    long int n;
    scanf(""%d"", &n);
    NODE *head = NULL;
    for (int i=0; i<n; i++){
        long int elem;
        scanf(""%d"", &elem);
        head = insert_last(head, elem);
    }
    
    long int arr[n];
    
    for (int i=n-1; i>=0; i--){
        arr[i] = head->element;
        head = head->next;
    }
    
    for(int i=0; i<n; i++){
        printf(""%d"", arr[i]);
    }
    
    return 0;
}
"
22732415,PES1UG22CS257,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int element;
    struct node* next;
}NODE;

NODE* insert_last(NODE* head, int ele){
    NODE* new_node = (NODE*)malloc(sizeof(NODE));
    if (head == NULL){
        new_node->element = ele;
        new_node->next = NULL;
        head = new_node;        
    }
    else{
    NODE* ptr = head;
    while (ptr->next != NULL){
        ptr = ptr->next;
    }
    new_node->element = ele;
    new_node->next = NULL;
    ptr->next = new_node;
    }
    return head;
}

NODE* insert_front(NODE* head, int ele){
    NODE* new_node = (NODE*)malloc(sizeof(NODE));
    if (head == NULL){
        new_node->element = ele;
        new_node->next = NULL;
        head = new_node;
    }
    else{
        new_node->element = ele;
        new_node->next = head;
        head = new_node;
    }
    return head;
}

int main() {
    long int n1, n2;
    scanf(""%ld %ld"",&n1, &n2);
    NODE *head1 = NULL;
    NODE *head2 = NULL;
    // NODE *dummy1 = head1;
    // NODE *dummy2 = head2;
    for (int i=0; i<n1; i++){
        long int ele1;
        scanf(""%ld"", &ele1);
        head1 = insert_front(head1, ele1);
    }

    for (int i=0; i<n2; i++){
        long int ele;
        scanf(""%ld"", &ele);
        head2 = insert_front(head2, ele);
    }
    
    long int number1 = 0;
    while(head1->next!=NULL){
        number1+=head1->element;
        head1 = head1->next;
        number1 *= 10;
    }
    number1 += head1->element;
    
    long int number2 = 0;
    while(head2->next!=NULL){
        number2+=head2->element;
        head2 = head2->next;
        number2 *= 10;
    }
    number2 += head2->element;
    
    long int final_number = number1 + number2;
    // printf(""%d"", final_number);
    // printf(""%d"", final_number);
    int array[1000];
    int count=0;
    while(final_number!=0){
        array[count] = final_number%10;
        final_number/=10;
        count++;
    }
    
    NODE *head3 = NULL;
    
    for (int i=0; i<count; i++){
        head3 = insert_last(head3, array[i]);
    }
    
    while (head3 != NULL){
        printf(""%d "", head3->element);
        head3=head3->next;
    }
    
    return 0;
}
"
22732423,PES1UG22CS301,Reversing a Linked List 1,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *reverselist(struct node *head){
    struct node *prev=NULL;
    struct node *pie=head;
    while(pie!=NULL){
        struct node *newnode=pie->next;
        pie->next=prev;
        prev=pie;
        pie=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *pie=head;
    while(pie!=NULL){
        printf(""%d"",pie->data);
        pie=pie->next;
    }
}
int main(){
    int noofnodes;
    int data;
    scanf(""%d"",&noofnodes);
    if (noofnodes < 0 || noofnodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<noofnodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    struct node* reversedHead = reverselist(head);
    printlist(reversedHead);
    
    
    return 0;
}"
22732423,PES1UG22CS301,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include<string.h>
#include<math.h>
#include <stdlib.h>


struct node {
    int val;
    struct node *next;
};

struct node* add_linked_lists(struct node* l1, struct node* l2) {
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    struct node* current = temp;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct node* result = temp->next;
    free(temp);
    return result;
}


struct node* create_linked_list(int* digits, int num_digits) {
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    struct node* current = temp;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return temp->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);
    if(num_digits_l1<0 || num_digits_l2>1000){
        printf(""Invalid\n"");
        return 1;
    }

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
        
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct node* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct node* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct node* result = add_linked_lists(l1, l2);

    
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}"
22732432,pes1202203879_K,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Node
{
    int data;
    struct Node* next;
};
typedef struct Node Node;

void insert(Node** head,int data)
{
    Node* new_node=(Node*)malloc(sizeof(Node));
    new_node->data=data;
    new_node->next=NULL;
    if(*head==NULL)
    {
        *head=new_node;
    }
    else
    {
        Node* temp=*head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=new_node;
    }
}
void reverse(Node** head)
{
    Node* prev=NULL;
    Node* temp=*head;
    Node* next_node;
    while(temp!=NULL)
    {
        next_node=temp->next;
        temp->next=prev;
        prev=temp;
        temp=next_node;
    }
    *head=prev;
    temp=*head;
    while(temp!=NULL)
    {
        printf(""%d"",temp->data);
        temp=temp->next;
    }
}
int main() {

    int n;
    scanf(""%d"",&n);
    Node* head=NULL;
    for(int i=0;i<n;i++)
    {
        int data;
        scanf(""%d "",&data);
        insert(&head,data);
    }
    reverse(&head);
    return 0;
}"
22732432,pes1202203879_K,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Node
{
    int data;
    struct Node* next;
};

typedef struct Node Node;

void insert(Node** head,int data)
{
    Node* new_node=(Node*)malloc(sizeof(Node));
    new_node->data=data;
    new_node->next=NULL;
    if(*head==NULL)
        *head=new_node;
    else
    {
        Node* current=*head;
        while(current->next!=NULL)
        {
            current=current->next;
        }
        current->next=new_node;
    }
}
Node* insert1(Node* l1,Node* l2)
{
    Node* sum_head=NULL;
    int car=0;
    while(l1!=NULL||l2!=NULL||car>0)
    {
        int val1=(l1!=NULL)?l1->data:0;
        int val2=(l2!=NULL)?l2->data:0;
        int current_sum=val1+val2+car;
        car=current_sum/10;
        int digit=current_sum%10;
        insert(&sum_head,digit);
        if(l1!=NULL)l1=l1->next;
        if(l2!=NULL)l2=l2->next;
    }
    return sum_head;
}
void printlist(Node* head)
{
    while(head!=NULL)
    {
        printf(""%d "",head->data);
        head=head->next;
    }
}
int main() {

    int n1,n2;
    scanf(""%d %d"",&n1,&n2);
    Node* l1=NULL;
    Node* l2=NULL;
    for(int i=0;i<n1;i++)
    {
        int data;
        scanf(""%d"",&data);
        insert(&l1,data);
    }
    for(int j=0;j<n2;j++)
    {
        int data;
        scanf(""%d"",&data);
        insert(&l2,data);
    }
    Node* sum=insert1(l1,l2);
    printlist(sum);
    return 0;
}"
22732454,PES1UG22CS250,Reversing a Linked List 1,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *reverselist(struct node *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->next;
    }
}
int main(){
    int noofnodes;
    int data;
    scanf(""%d"",&noofnodes);
    if (noofnodes < 0 || noofnodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<noofnodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    struct node* reversedHead = reverselist(head);
    printlist(reversedHead);
    
    
    return 0;
}"
22732454,PES1UG22CS250,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}

struct ListNode* create_linked_list(int* digits, int num_digits) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return dummy->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct ListNode* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct ListNode* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct ListNode* result = add_linked_lists(l1, l2);

 
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}"
22732456,PES1UG22CS300,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node *link;
}node;
node *head=NULL;
void insert_node(int data)
{
 
    node *ptr;
    ptr= (node *)malloc(sizeof(node));
    ptr->data = data;
    ptr->link = NULL;
    if(head==NULL)
    {
        head=ptr;
    }
    else
    {
        node *temp=head;
        while(temp->link!=NULL)
        {
            temp=temp->link;
        }
        temp->link=ptr;
    }

}
void display()
 {
    node *temp;
    temp=head;
    while(temp!=NULL)
    {
        printf(""%d"",temp->data);
        temp=temp->link;
    }
}
void reverse()
{
    node *ptr=NULL;
    node *temp=head;
    node *update;
    while(temp !=NULL)
    {
        update= temp->link;
        temp->link=ptr;
        ptr=temp;
        temp=update;
    }
    head=ptr;
}


int main() {

    int n,data;
    scanf(""%d"",&n);
    for(int i=1;i<=n;i++)
    {
        scanf(""%d"",&data);
        insert_node(data);
    }
    reverse();
    display();
    return 0;
}
"
22732456,PES1UG22CS300,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node *link;
}node;
node *head1=NULL;
node *head2=NULL;
node *sum=NULL;
void insert_node(node **head,int data)
{
 
    node *ptr;
    ptr= (node *)malloc(sizeof(node));
    ptr->data = data;
    ptr->link = NULL;
    if(*head==NULL)
    {
        *head=ptr;
    }
    else
    {
        node *temp=*head;
        while(temp->link!=NULL)
        {
            temp=temp->link;
        }
        temp->link=ptr;
    }

}
void add() {
    int car = 0;
    node *ptr1, *ptr2;
    ptr1 = head1;
    ptr2 = head2;
    while (ptr1 != NULL || ptr2 != NULL || car) {
        int sum_digit = car;
        if (ptr1 != NULL) {
            sum_digit += ptr1->data;
            ptr1 = ptr1->link;
        }
        if (ptr2 != NULL) {
            sum_digit += ptr2->data;
            ptr2 = ptr2->link;
        }

        car = sum_digit / 10;
        sum_digit %= 10;

        insert_node(&sum, sum_digit);
    }
}
void display(node *head)
 {
    node *temp;
    temp=head;
    while(temp!=NULL)
    {
        printf(""%d "",temp->data);
        temp=temp->link;
    }
}


int main() {

    int n,m,data;
    scanf(""%d"",&n);
    scanf(""%d"",&m);
    for(int i=1;i<=n;i++)
    {
        scanf(""%d"",&data);
        insert_node(&head1,data);
    }
    for(int i=1;i<=m;i++)
    {
        scanf(""%d"",&data);
        insert_node(&head2,data);
    }
    add();
    
    display(sum);
    return 0;
}"
22732458,PES1UG22CS289,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int data;
   
    struct node *link;
}NODE;
NODE *head;
void  beginsert()
    
{
    int item;
     NODE *newnode = (NODE*)malloc(sizeof(NODE));
     if(newnode == NULL)
     {
         printf(""error"");
     }
    
     scanf(""%d"",&item);
     if(item<-1000||item>1000)
     {
         printf(""node invalid"");
     }
    else
    {
    newnode->data=item;
     newnode->link=head;
     head = newnode;
    }
}
    
void display()
{
    NODE *temp;
    temp = head ;
    while(temp!=NULL)
    {
        printf(""%d"",temp->data);
        temp = temp->link;
        
    }
}

int main()
{
    int n;
    scanf(""%d"",&n);
    if(n<0||n>1000)
    {
        printf(""node invalid"");
    }
    for(int i=0;i<n;i++)
    {
        beginsert();
    }
    display();
       
    return 0;
}
"
22732458,PES1UG22CS289,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include<string.h>
#include<math.h>
#include <stdlib.h>


struct node {
    int val;
    struct node *next;
};

struct node* add_linked_lists(struct node* l1, struct node* l2) {
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    struct node* current = temp;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct node* result = temp->next;
    free(temp);
    return result;
}


struct node* create_linked_list(int* digits, int num_digits) {
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    struct node* current = temp;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return temp->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);
    if(num_digits_l1<0 || num_digits_l2>1000){
        printf(""Invalid\n"");
        return 1;
    }

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
        
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct node* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct node* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct node* result = add_linked_lists(l1, l2);

    
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}"
22732473,PES1UG22CS261,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node* head;
void read(){
    struct node *ptr,*temp;
    ptr=(struct node *)malloc(sizeof(struct node));
    scanf(""%d"",&ptr->data);
    if(head==NULL){
        head=ptr;
        ptr->next=NULL;
    }
    else{
        temp=head;
        while(temp->next!=NULL){
            temp=temp->next;
        }
        temp->next=ptr;
        ptr->next=NULL;
    }
}

void reverse(){
    struct node*curr=head;
    struct node*prev=NULL;
    struct node*next=NULL;
    while(curr!=NULL){
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    head=prev;
}

void display(){
    while(head!=NULL){
        printf(""%d"",head->data);
        head=head->next;
    }
}

int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    int n;
    scanf(""%d"",&n);
    if(n>1000||n<0){
        return 1;
    }
    for(int i=0;i<n;i++){
        read();
    }
    reverse();
    display();
    return 0;
}
"
22732473,PES1UG22CS261,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include<string.h>
#include<math.h>
#include <stdlib.h>


struct node {
    int val;
    struct node *next;
};

struct node* add(struct node* l1, struct node* l2) {
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    struct node* current = temp;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct node* result = temp->next;
    free(temp);
    return result;
}


struct node* create(int* digits, int num_digits) {
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    struct node* current = temp;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return temp->next;
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    if(n<0 ||n>1000||m<0|| m>1000){
        printf(""Invalid\n"");
        return 1;
    }

    int digits_l1[n];
    int digits_l2[m];

    for (int i = 0; i < n; i++) {
        scanf(""%d"", &digits_l1[i]);
        
    }

    for (int i = 0; i <m; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct node* l1 = create(digits_l1, n);
    struct node* l2 = create(digits_l2, m);

    struct node* result = add(l1, l2);

    
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}"
22732475,PES1UG22CS294,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node* next;
}NODE;

NODE* createNode(int ele){
    NODE* newNode=(NODE*)malloc(sizeof(struct node));
    newNode->data=ele;
    newNode->next=NULL;
    return newNode;
}

NODE* insertLast(NODE* head,int ele){
    if(head==NULL){
        NODE* newNode=createNode(ele);
        head=newNode;
        return head;
    }
    else{
        NODE* newNode=createNode(ele);
        newNode->next=head;
        head=newNode;
        return head;
    }
}
int main() {

    long int n;
    scanf(""%d"",&n);
    long int d;
    NODE* head=NULL;
    for (int i=0;i<n;i++){
        scanf(""%d"",&d);
        head=insertLast(head,d);
    }
    
    
    NODE*p=head;
    while(p!=NULL){
        printf(""%d"",p->data);
        p=p->next;
    }
    return 0;
}


"
22732475,PES1UG22CS294,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node* next;
}NODE;

NODE* createNode(int ele){
    NODE* newNode=(NODE*)malloc(sizeof(struct node));
    newNode->data=ele;
    newNode->next=NULL;
    return newNode;
}

NODE* insertFront(NODE* head,int ele){
    if(head==NULL){
        NODE* newNode=createNode(ele);
        head=newNode;
        return head;
    }
    else{
        NODE* newNode=createNode(ele);
        newNode->next=head;
        head=newNode;
        return head;
    }
}

NODE* insertLast(NODE* head,int ele){
    if (head==NULL){
        NODE* newNode=createNode(ele);
        head=newNode;
        return head;
    }
    else{
        NODE* newNode=createNode(ele);
        NODE*p=head;
        while(p->next!=NULL){
            p=p->next;
        }
        p->next=newNode;
        return head;
    }
}
int main() {
  
    int n,m;
    long int ele;
    NODE* head1=NULL;
    NODE* head2=NULL;
    scanf(""%d%d"",&n,&m);
    for (int i=0;i<n;i++){
        scanf(""%ld"",&ele);
        head1=insertFront(head1,ele);
    }
    
    for (int j=0;j<m;j++){
        scanf(""%ld"",&ele);
        head2=insertFront(head2,ele);
    }
    
    NODE* p1=head1;
    NODE* p2=head2;
    long int num1=0;
    long int num2=0;
    for (int i=0;i<n;i++){
        num1+=p1->data;
        p1=p1->next;
        num1=num1*10;
    }

    for (int j=0;j<m;j++){
        num2+=p2->data;
        p2=p2->next;
        num2=num2*10;
    }
    
    num1/=10;
    num2/=10;
    // printf(""%d"",num1+num2);
    
    NODE* head3=NULL;
    long int sum=num1+num2;
    while (sum!=0){
        long int res=sum%10;
        head3=insertLast(head3,res);
        sum/=10;
    }
    
    NODE*p3=head3;
    while(p3!=NULL){
        printf(""%d "",p3->data);
        p3=p3->next;
    }
    return 0;
}

"
22732476,PES1UG22CS278,Reversing a Linked List 1,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *revlist(struct node *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->next;
    }
}
int main(){
    int nnodes;
    int data;
    scanf(""%d"",&nnodes);
    if (nnodes < 0 || nnodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<nnodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    struct node* revHead = revlist(head);
    printlist(revHead);
    
    
    return 0;
}"
22732476,PES1UG22CS278,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

// Definition for singly-linked list.
struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}

// Helper function to create a linked list from an array of digits
struct ListNode* create_linked_list(int* digits, int num_digits) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return dummy->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct ListNode* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct ListNode* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct ListNode* result = add_linked_lists(l1, l2);

    // Print the result
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}"
22732480,PES1UG22CS292,Reversing a Linked List 1,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *revlist(struct node *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->next;
    }
}
int main(){
    int numofnodes;
    int data;
    scanf(""%d"",&numofnodes);
    if (numofnodes < 0 || numofnodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<numofnodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    struct node* revhead = revlist(head);
    printlist(revhead);
    
    
    return 0;
}"
22732480,PES1UG22CS292,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>


struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}


struct ListNode* create_linked_list(int* digits, int num_digits) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return dummy->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct ListNode* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct ListNode* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct ListNode* result = add_linked_lists(l1, l2);

    
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}"
22732481,PES1UG22CS249,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node{
    int data;
    struct node* next;
}NODE;
NODE* createNode(int ele){
    NODE* newNode=(NODE*)malloc(sizeof(struct node));
    newNode->data=ele;
    newNode->next=NULL;
    return newNode;
}
NODE* insertLast(NODE* head,int ele){
    if(head==NULL){
        NODE* newNode=createNode(ele);
        head=newNode;
        return head;
    }
    else{
        NODE* newNode=createNode(ele);
        newNode->next=head;
        head=newNode;
        return head;
    }
}
int main() {
    long int n;
    scanf(""%d"",&n);
    long int d;
    NODE* head=NULL;
    for (int i=0;i<n;i++){
        scanf(""%d"",&d);
        head=insertLast(head,d);
    }    
    NODE*p=head;
    while(p!=NULL){
        printf(""%d"",p->data);
        p=p->next;
    }
    return 0;
}"
22732481,PES1UG22CS249,ADD TWO NUMBERS 104,0,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node{
    int element;
    struct node* next;
}NODE;
NODE* insert_last(NODE* head, int ele){
    NODE* new_node = (NODE*)malloc(sizeof(NODE));
    if (head == NULL){
        new_node->element = ele;
        new_node->next = NULL;
        head = new_node;        
    }
    else{
    NODE* ptr = head;
    while (ptr->next != NULL){
        ptr = ptr->next;
    }
    new_node->element = ele;
    new_node->next = NULL;
    ptr->next = new_node;
    }
    return head;
}
int main() {
    long int n1, n2;
    scanf(""%d %d"",&n1, &n2);
    NODE *head1 = NULL;
    NODE *head2 = NULL;
    for (int i=0; i<n1; i++){
        long int ele1;
        scanf(""%d"", &ele1);
        head1 = insert_last(head1, ele1);
    }
    for (int i=0; i<n2; i++){
        long int ele;
        scanf(""%d"", &ele);
        head2 = insert_last(head2, ele);
    }
    long int num1 = 0;
    while(head1->next!=NULL){
        num1+=head1->element;
        head1 = head1->next;
        num1 *= 10;
    }
    num1 += head1->element;
    long int num2 = 0;
    while(head2->next!=NULL){
        num2+=head2->element;
        head2 = head2->next;
        num2 *= 10;
    }
    num2 += head2->element;
    
    long int final_num = num1 + num2;
    int array[1000];
    int count=0;
    while(final_num!=0){
        array[count] = final_num%10;
        final_num/=10;
        count++;
    }
    for (int i=0; i<count; i++){
        printf(""%d "", array[i]);
    }
    NODE *final = NULL;
    return 0;
}"
22732493,PES1UG22CS280,Reversing a Linked List 1,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *reverselist(struct node *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->next;
    }
}
int main(){
    int noofnodes;
    int data;
    scanf(""%d"",&noofnodes);
    if (noofnodes < 0 || noofnodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<noofnodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    struct node* reversedHead = reverselist(head);
    printlist(reversedHead);
    
    
    return 0;
}"
22732493,PES1UG22CS280,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include<string.h>
#include<math.h>
#include <stdlib.h>


struct node {
    int val;
    struct node *next;
};

struct node* add_linked_lists(struct node* l1, struct node* l2) {
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    struct node* current = temp;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct node* result = temp->next;
    free(temp);
    return result;
}


struct node* create_linked_list(int* digits, int num_digits) {
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    struct node* current = temp;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return temp->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);
    if(num_digits_l1<0 || num_digits_l2>1000){
        printf(""Invalid\n"");
        return 1;
    }

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
        
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct node* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct node* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct node* result = add_linked_lists(l1, l2);

    
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}
"
22732498,PES1UG22CS302,Reversing a Linked List 1,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

typedef struct node{
    int data;
    struct node *next;
}node;
node* reverselist(node* head){
    node *prev=NULL;
    node *cur=head;
    while(cur!=NULL){
        node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void print(node *head){
    node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->next;
    }
}
int main(){
    int n;
    int data;
    scanf(""%d"",&n);
    if (n < 0 ||  n> 1000) {
        printf(""Invalid"");
        return 1;
    }
    node *head=NULL;
    node *prev=NULL;
    for(int i=0;i<n;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid"");
            return 1;
        }
        node *newn=(node*)malloc(sizeof(node));
        newn->data=data;
        newn->next=NULL;
        if(prev==NULL){
            head=newn;
        }
        else{
            prev->next=newn;
        }
        prev=newn;
    }
    node* reverseHead = reverselist(head);
    print(reverseHead);
    
    
    return 0;
}"
22732498,PES1UG22CS302,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

typedef struct Node Node;

void insert(Node** head, int value) {
    Node* new_node = (Node*)malloc(sizeof(Node));
    new_node->value = value;
    new_node->next = NULL;

    if (*head == NULL) {
        *head = new_node;
    } else {
        Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = new_node;
    }
}

Node* addLists(Node* num1, Node* num2) {
    Node* result = NULL;
    Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum = sum % 10;

        insert(&result, sum);
        if (current == NULL) {
            current = result;
        } else {
            current = current->next;
        }
    }

    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    Node* num1 = NULL;
    Node* num2 = NULL;

    for (int i = 0; i < num_digits1; i++) {
        int digit;
        scanf(""%d"", &digit);
        insert(&num1, digit);
    }

    for (int i = 0; i < num_digits2; i++) {
        int digit;
        scanf(""%d"", &digit);
        insert(&num2, digit);
    }

    Node* result = addLists(num1, num2);
    printList(result);

    return 0;
}
"
22732500,PES1UG22CS299,Reversing a Linked List 1,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *link;
};
struct node *reverselist(struct node *head){
    struct node *prev=NULL;
    struct node *current=head;
    while(current!=NULL){
        struct node *newnode=current->link;
        current->link=prev;
        prev=current;
        current=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *current=head;
    while(current!=NULL){
        printf(""%d"",current->data);
        current=current->link;
    }
}
int main(){
    int number;
    int data;
    scanf(""%d"",&number);
    if (number < 0 || number > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<number;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->link=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->link=newnode;
        }
        prev=newnode;
    }
    struct node* reversedHead = reverselist(head);
    printlist(reversedHead);
    
    
    return 0;
}
"
22732500,PES1UG22CS299,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int head;
    struct ListNode *next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->head : 0;
        int y = l2 ? l2->head : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->head = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}

struct ListNode* create_linked_list(int* digits, int num_digits) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->head = digits[i];
        current->next = NULL;
    }
    return dummy->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct ListNode* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct ListNode* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct ListNode* result = add_linked_lists(l1, l2);

    while (result) {
        printf(""%d "", result->head);
        result = result->next;
    }

    return 0;
}
"
22732504,PES1UG22CS270,Reversing a Linked List 1,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *reverselist(struct node *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->next;
    }
}
int main(){
    int noofnodes;
    int data;
    scanf(""%d"",&noofnodes);
    if (noofnodes < 0 || noofnodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<noofnodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    struct node* reversedHead = reverselist(head);
    printlist(reversedHead);
    
    
    return 0;
}"
22732504,PES1UG22CS270,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}

struct ListNode* create_linked_list(int* digits, int num_digits) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return dummy->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct ListNode* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct ListNode* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct ListNode* result = add_linked_lists(l1, l2);

    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}
"
22732512,PES1UG22CS252,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node* next;
}NODE;

NODE* createNode(int ele){
    NODE* newNode=(NODE*)malloc(sizeof(struct node));
    newNode->data=ele;
    newNode->next=NULL;
    return newNode;
}

NODE* insertLast(NODE* head,int ele){
    if(head==NULL){
        NODE* newNode=createNode(ele);
        head=newNode;
        return head;
    }
    else{
        NODE* newNode=createNode(ele);
        newNode->next=head;
        head=newNode;
        return head;
    }
}
int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    long int n;
    scanf(""%d"",&n);
    long int d;
    NODE* head=NULL;
    for (int i=0;i<n;i++){
        scanf(""%d"",&d);
        head=insertLast(head,d);
    }
    
    // printf(""%d"",head->data);
    
    NODE*p=head;
    while(p!=NULL){
        printf(""%d"",p->data);
        p=p->next;
    }
    return 0;
}
"
22732512,PES1UG22CS252,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node* next;
}NODE;

NODE* createNode(int ele){
    NODE* newNode=(NODE*)malloc(sizeof(struct node));
    newNode->data=ele;
    newNode->next=NULL;
    return newNode;
}

NODE* insertFront(NODE* head,int ele){
    if(head==NULL){
        NODE* newNode=createNode(ele);
        head=newNode;
        return head;
    }
    else{
        NODE* newNode=createNode(ele);
        newNode->next=head;
        head=newNode;
        return head;
    }
}

NODE* insertLast(NODE* head,int ele){
    if (head==NULL){
        NODE* newNode=createNode(ele);
        head=newNode;
        return head;
    }
    else{
        NODE* newNode=createNode(ele);
        NODE*p=head;
        while(p->next!=NULL){
            p=p->next;
        }
        p->next=newNode;
        return head;
    }
}
int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n,m;
    long int ele;
    NODE* head1=NULL;
    NODE* head2=NULL;
    scanf(""%d%d"",&n,&m);
    for (int i=0;i<n;i++){
        scanf(""%ld"",&ele);
        head1=insertFront(head1,ele);
    }
    
    for (int j=0;j<m;j++){
        scanf(""%ld"",&ele);
        head2=insertFront(head2,ele);
    }
    
    NODE* p1=head1;
    NODE* p2=head2;
    long int num1=0;
    long int num2=0;
    for (int i=0;i<n;i++){
        num1+=p1->data;
        p1=p1->next;
        num1=num1*10;
    }

    for (int j=0;j<m;j++){
        num2+=p2->data;
        p2=p2->next;
        num2=num2*10;
    }
    
    num1/=10;
    num2/=10;
    // printf(""%d"",num1+num2);
    
    NODE* head3=NULL;
    long int sum=num1+num2;
    while (sum!=0){
        long int res=sum%10;
        head3=insertLast(head3,res);
        sum/=10;
    }
    
    NODE*p3=head3;
    while(p3!=NULL){
        printf(""%d "",p3->data);
        p3=p3->next;
    }
    return 0;
}

"
22732513,PES1UG22CS293,Reversing a Linked List 1,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *reverselist(struct node *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->next;
    }
}
int main(){
    int noofnodes;
    int data;
    scanf(""%d"",&noofnodes);
    if (noofnodes < 0 || noofnodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<noofnodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    struct node* reversedHead = reverselist(head);
    printlist(reversedHead);
    
    
    return 0;
}"
22732513,PES1UG22CS293,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

// Definition for singly-linked list.
struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}

// Helper function to create a linked list from an array of digits
struct ListNode* create_linked_list(int* digits, int num_digits) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return dummy->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct ListNode* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct ListNode* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct ListNode* result = add_linked_lists(l1, l2);

    // Print the result
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}"
22732516,PES1UG22CS264,Reversing a Linked List 1,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *reverselist(struct node *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->next;
    }
}
int main(){
    int noofnodes;
    int data;
    scanf(""%d"",&noofnodes);
    if (noofnodes < 0 || noofnodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<noofnodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    struct node* reversedHead = reverselist(head);
    printlist(reversedHead);
    
    
    return 0;
}"
22732516,PES1UG22CS264,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Node
{
    int value;
    struct Node* next;
};

typedef struct Node Node;

void insert(Node** head,int value)
{
    Node* new_node=(Node*)malloc(sizeof(Node));
    new_node->value=value;
    new_node->next=NULL;
    if(*head==NULL)
        *head=new_node;
    else
    {
        Node* current=*head;
        while(current->next!=NULL)
        {
            current=current->next;
        }
        current->next=new_node;
    }
}
Node* addlists(Node* list1,Node* list2)
{
    Node* sum_head=NULL;
    int car=0;
    while(list1!=NULL||list2!=NULL||car>0)
    {
        int val1=(list1!=NULL)?list1->value:0;
        int val2=(list2!=NULL)?list2->value:0;
        int current_sum=val1+val2+car;
        car=current_sum/10;
        int digit=current_sum%10;
        insert(&sum_head,digit);
        if(list1!=NULL)list1=list1->next;
        if(list2!=NULL)list2=list2->next;
    }
    return sum_head;
}
void printlist(Node* head)
{
    while(head!=NULL)
    {
        printf(""%d "",head->value);
        head=head->next;
    }
}
int main() {

    int n1,n2;
    scanf(""%d %d"",&n1,&n2);
    Node* l1=NULL;
    Node* l2=NULL;
    for(int i=0;i<n1;i++)
    {
        int value;
        scanf(""%d"",&value);
        insert(&l1,value);
    }
    for(int j=0;j<n2;j++)
    {
        int value;
        scanf(""%d"",&value);
        insert(&l2,value);
    }
    Node* sum=addlists(l1,l2);
    printlist(sum);
    return 0;
}
"
22732524,PES1202203393,Reversing a Linked List 1,15,undefined
22732524,PES1202203393,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode {
    int value;
    struct ListNode* next;
} ListNode;

ListNode* addReversedDigitLists(ListNode* list1, ListNode* list2) {
    ListNode* result = NULL;
    ListNode* currentResult = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry != 0) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->value;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->value;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum %= 10;

        ListNode* newNode = (ListNode*)malloc(sizeof(ListNode));
        newNode->value = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            currentResult = result;
        } else {
            currentResult->next = newNode;
            currentResult = currentResult->next;
        }
    }

    return result;
}

void printLinkedList(ListNode* head) {
    ListNode* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

void freeLinkedList(ListNode* head) {
    while (head != NULL) {
        ListNode* temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    int numDigitsList1, numDigitsList2;
    scanf(""%d %d"", &numDigitsList1, &numDigitsList2);

    ListNode* list1 = NULL;
    ListNode* currentList1 = NULL;
    int value;

    for (int i = 0; i < numDigitsList1; i++) {
        scanf(""%d"", &value);
        ListNode* newNode = (ListNode*)malloc(sizeof(ListNode));
        newNode->value = value;
        newNode->next = NULL;

        if (list1 == NULL) {
            list1 = newNode;
            currentList1 = list1;
        } else {
            currentList1->next = newNode;
            currentList1 = currentList1->next;
        }
    }

    ListNode* list2 = NULL;
    ListNode* currentList2 = NULL;

    for (int i = 0; i < numDigitsList2; i++) {
        scanf(""%d"", &value);
        ListNode* newNode = (ListNode*)malloc(sizeof(ListNode));
        newNode->value = value;
        newNode->next = NULL;

        if (list2 == NULL) {
            list2 = newNode;
            currentList2 = list2;
        } else {
            currentList2->next = newNode;
            currentList2 = currentList2->next;
        }
    }

    ListNode* result = addReversedDigitLists(list1, list2);
    printLinkedList(result);
    freeLinkedList(result);
    printf(""  "");
    return 0;
}
"
22732525,PES1UG22CS263,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* reverse_linked_list(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    struct ListNode* next = NULL;
    
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    
    return prev;
}

struct ListNode* create_linked_list(int* arr, int size) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    
    for (int i = 0; i < size; i++) {
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->value = arr[i];
        newNode->next = NULL;
        
        current->next = newNode;
        current = current->next;
    }
    
    return dummy->next;
}

void print_linked_list(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d"", current->value);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    int values[n];
    
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &values[i]);
    }
    
    struct ListNode* originalList = create_linked_list(values, n);
    struct ListNode* reversedList = reverse_linked_list(originalList);
    
    print_linked_list(reversedList);
    
    return 0;
}"
22732525,PES1UG22CS263,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->value : 0;
        int val2 = l2 ? l2->value : 0;
        
        int total = val1 + val2 + carry;
        carry = total / 10;
        int digit = total % 10;
        
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->value = digit;
        newNode->next = NULL;
        
        current->next = newNode;
        current = current->next;
        
        if (l1) {
            l1 = l1->next;
        }
        if (l2) {
            l2 = l2->next;
        }
    }
    
    return dummy->next;
}

struct ListNode* create_linked_list(int* arr, int size) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    
    for (int i = 0; i < size; i++) {
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->value = arr[i];
        newNode->next = NULL;
        
        current->next = newNode;
        current = current->next;
    }
    
    return dummy->next;
}

void print_linked_list(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
    printf(""\n"");
}

int main() {

      int n, m;
    scanf(""%d %d"", &n, &m);
    
    int digits1[n];
    int digits2[m];
    
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &digits1[i]);
    }
    for (int i = 0; i < m; i++) {
        scanf(""%d"", &digits2[i]);
    }
    
    struct ListNode* l1 = create_linked_list(digits1, n);
    struct ListNode* l2 = create_linked_list(digits2, m);
    
    struct ListNode* result = add_linked_lists(l1, l2);
    
    print_linked_list(result);
    return 0;
}
"
22732526,PES1UG22CS266,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node*next;
}NODE;
NODE *createnode(int ele)
{
    NODE*newnode=malloc(sizeof(struct node));
    newnode->data=ele;
    newnode->next=NULL;
    return newnode;
    
}
NODE *insertlast(NODE*head,int ele)
{
    NODE*newnode=createnode(ele);
    if(head==NULL)
    {
        head=newnode;
    }
    else
    {
       NODE*p=head;
       while(p->next!=NULL)
       {
         p=p->next;
       }
       p->next=newnode;
    }
    return head;
}
NODE *reverselist(NODE*head)
{
    NODE*current=head;
    NODE*link=NULL;
    NODE*prev=NULL;
    while(current!=NULL)
    {
        link=current->next;
        current->next=prev;
        prev=current;
        current=link;
    }
    head=prev;
    return head;
}
void display(NODE*head)
{
      NODE*p=head;
      while(p!=NULL)
      {
          printf(""%d"",p->data);
          p=p->next;
      }
    
}
int main() 
{
     int n,ele;
     NODE*head=NULL;
     scanf(""%d"",&n);
     for(int i=0;i<n;i++)
     {   
         scanf(""%d"",&ele);
         head=insertlast(head,ele);
     }
     head=reverselist(head);
     display(head);
     return 0;
}
"
22732526,PES1UG22CS266,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>
#include<math.h>
#include<string.h>
// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};
// insert a new node at the end of the linked list
void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to add two reversed-digit linked lists
struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }

    return result;
}
// Function to print the elements of a linked list
void printList(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&list1, value);
    }

    for (int i = 0; i < n2; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);

    printList(sumList);

    return 0;
}"
22732527,PES1202203428,Reversing a Linked List 1,15,"
#include <stdio.h>
#include <stdlib.h>

typedef struct Node 
{
    int data;
    struct Node* link;
}node;

node* rev(node* head) 
{
    node* prev = NULL;
    node* temp = head;
    node* nextnode;

    while (temp != NULL) 
    {
        nextnode = temp->link;
        temp->link = prev;
        prev = temp;
        temp = nextnode;
    }

    return prev;
}

void display(node* head) 
{
    node* p = head;
    while (p != NULL)
     {
        printf(""%d"", p->data);
        p = p->link;
    }
}

int main() 
{
    node* head = NULL;
    node* temp;
    long int x;
    scanf(""%ld"", &x);
//creating list
    
    for (int i = 0;i<x;i++)
     {
        int data;
        scanf(""%d"", &data);
        node* newNode = (node*)malloc(sizeof(struct Node));
        newNode->data = data;
        newNode->link = NULL;

        if (head == NULL) 
        {
            head = newNode;
            temp = newNode;
        } 
        else 
        {
            temp->link = newNode;
            temp = newNode;
        }
    }

    node* revhead = rev(head);
    display(revhead);
    
    return 0;
}

"
22732527,PES1202203428,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct Node 
{
    int data;
   struct Node* link;
}node;

node* add(node* l1, node* l2) 
{
    node* p = (node*)malloc(sizeof( node));
    node* current = p;
    int carry = 0;

    while (l1 || l2 || carry)
     {
        int tot = carry;
        if (l1) 
        {
            tot += l1->data;
            l1 = l1->link;
        }
        if (l2) 
        {
            tot += l2->data;
            l2 = l2->link;
        }

        carry = tot / 10;
        current->link = (node*)malloc(sizeof( node));
        current = current->link;
        current->data = tot%10;
        current->link = NULL;
    }

    node* result = p->link;
    free(p);
    return result;
}

void display(node* head) 
{
    node* current = head;
    while (current) 
    {
        printf(""%d "", current->data);
        current = current->link;
    }
}

int main() 
{
    long int n1, n2;
    scanf(""%ld %ld"",&n1,&n2);

    node* l1 = NULL;
    node* current1 = NULL;

    for (int i = 0;i< n1;i++) 
    {
        int input;
        scanf(""%d"", &input);
        node* new_node = (node*)malloc(sizeof( node));
        new_node->data = input;
        new_node->link = NULL;

        if (l1 == NULL) 
        {
            l1 = new_node;
            current1 = new_node;
        } else 
        {
            current1->link = new_node;
            current1 = new_node;
        }
    }

    node* l2 = NULL;
    node* current2 = NULL;

    for (int i = 0; i<n2; i++) 
    {
        int input;
        scanf(""%d"", &input);
        node* new_node = (node*)malloc(sizeof( node));
        new_node->data = input;
        new_node->link = NULL;

        if (l2 == NULL) 
        {
            l2 = new_node;
            current2 = new_node;
        } 
        else 
        {
            current2->link = new_node;
            current2 = new_node;
        }
    }

    node* final = add(l1, l2);
    display(final);

    while (final)
    {
        node* temp = final;
        final = final->link;
        free(temp);
    }

    return 0;
}
"
22732528,PES1UG22CS268,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* reverseLinkedList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    struct ListNode* nextNode = NULL;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printReversedLinkedList(struct ListNode* head) {
    while (head != NULL) {
        printf(""%d"", head->value);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct ListNode* head = NULL;
    struct ListNode* tail = NULL;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);

        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    struct ListNode* newHead = reverseLinkedList(head);
    printReversedLinkedList(newHead);

    
    while (newHead != NULL) {
        struct ListNode* temp = newHead;
        newHead = newHead->next;
        free(temp);
    }

    return 0;
}"
22732528,PES1UG22CS268,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

// Definition for singly-linked list.
struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}

// Helper function to create a linked list from an array of digits
struct ListNode* create_linked_list(int* digits, int num_digits) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return dummy->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct ListNode* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct ListNode* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct ListNode* result = add_linked_lists(l1, l2);

    // Print the result
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}"
22732529,PES1UG22CS258,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node {
    struct node* llink;
    int data;
    struct node* rlink;
} NODE;

NODE* head;

NODE* add_node() {
    int item;
    scanf(""%d"", &item);
    NODE* new_node = (NODE*)malloc(sizeof(NODE));
    new_node->data = item;
    new_node->llink = NULL;
    new_node->rlink = NULL;
    return new_node;
}

int main() {
    int n;
    scanf(""%d"", &n);

    for (int i = 0; i < n; i++) {
        NODE* node = add_node();
        if (head == NULL) {
            head = node;
        } else {
            NODE* temp=head;
            while(temp->rlink!=NULL)
            {
                temp=temp->rlink;
            }
            temp->rlink=node;
            node->llink=temp;
        }
    }

    NODE* traverse = head;

    int i=0;
    while (i<n-1) {
        traverse = traverse->rlink;
        i++;
    }

    for(int i=0;i<n;i++)
    {
        printf(""%d"", traverse->data);
        traverse = traverse->llink;
    }

    return 0;
}
"
22732529,PES1UG22CS258,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

// Definition for singly-linked list.
struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}

// Helper function to create a linked list from an array of digits
struct ListNode* create_linked_list(int* digits, int num_digits) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return dummy->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct ListNode* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct ListNode* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct ListNode* result = add_linked_lists(l1, l2);

    // Print the result
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}"
22732533,PES1UG22CS277,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* link;
};

struct node* reverseLL(struct node* head) {
    struct node* prev = NULL;
    struct node* ptr = head;
    struct node* next = NULL;
    while (ptr != NULL) {
        next = ptr->link;
        ptr->link = prev;
        prev = ptr;
        ptr = next;
    }
    
    return prev;
}

void printLinkedList(struct node* head) {
    struct node* ptr = head;
    while (ptr != NULL) {
        printf(""%d"", ptr->data);
        ptr = ptr->link;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);
    
    struct node* head = NULL;
    struct node* ptr = NULL;
    
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        
        struct node* new_node = (struct node*)malloc(sizeof(struct node));
        new_node->data = data;
        new_node->link = NULL;
        
        if (head == NULL) {
            head = new_node;
            ptr = new_node;
        } else {
            ptr->link = new_node;
            ptr = new_node;
        }
    }
    
    struct node* reversed_head = reverseLL(head);
    printLinkedList(reversed_head);
    
    return 0;
}"
22732533,PES1UG22CS277,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode 
{
    int value;
    struct ListNode* next;
}NODE;

NODE* addReversedDigitLists(NODE* list1, NODE* list2) 
{
    NODE* result = NULL;
    NODE* current = NULL;
    int carry = 0;
    while (list1 != NULL || list2 != NULL || carry != 0) 
    {
        int sum = carry;
        if (list1 != NULL) 
        {
            sum += list1->value;
            list1 = list1->next;
        }
        if (list2 != NULL) 
        {
            sum += list2->value;
            list2 = list2->next;
        }
        carry = sum / 10;
        sum %= 10;
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = sum;
        new_node->next = NULL;
        if (result == NULL) 
        {
            result = new_node;
            current = result;
        } 
        else
        {
            current->next = new_node;
            current = current->next;
        }
    }
    return result;
}

void printLinkedList(NODE* head) 
{
    NODE* current = head;
    while (current != NULL) 
    {
        printf(""%d"", current->value);
        if (current->next != NULL) 
        {
            printf("" "");
        }
        current = current->next;
    }
}

void freeLinkedList(NODE* head)
{
    while (head != NULL) 
    {
        NODE* temp = head;
        head = head->next;
        free(temp);
    }
}

int main() 
{
    int num_digits_list1, num_digits_list2;
    scanf(""%d %d"", &num_digits_list1, &num_digits_list2);
    NODE* list1 = NULL;
    NODE* current1 = NULL;
    int value;
    for (int i = 0; i < num_digits_list1; i++) 
    {
        scanf(""%d"", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;
        if (list1 == NULL) 
        {
            list1 = new_node;
            current1 = list1;
        } 
        else 
        {
            current1->next = new_node;
            current1 = current1->next;
        }
    }
    NODE* list2 = NULL;
    NODE* current2 = NULL;
    for (int i = 0; i < num_digits_list2; i++) 
    {
        scanf(""%d "", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;
        if (list2 == NULL) 
        {
            list2 = new_node;
            current2 = list2;
        }
        else 
        {
            current2->next = new_node;
            current2 = current2->next;
        }
    }
    NODE* result = addReversedDigitLists(list1, list2);
    printLinkedList(result);
    freeLinkedList(result);
    return 0;
}"
22732539,PES1UG22CS251,Reversing a Linked List 1,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *reverselist(struct node *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->next;
    }
}
int main(){
    int noofnodes;
    int data;
    scanf(""%d"",&noofnodes);
    if (noofnodes < 0 || noofnodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<noofnodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    struct node* reversedHead = reverselist(head);
    printlist(reversedHead);
    
    
    return 0;
}"
22732539,PES1UG22CS251,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

// Definition for singly-linked list.
struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}

// Helper function to create a linked list from an array of digits
struct ListNode* create_linked_list(int* digits, int num_digits) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return dummy->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct ListNode* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct ListNode* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct ListNode* result = add_linked_lists(l1, l2);

    // Print the result
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}"
22732540,PES1UG22CS306,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *link;
};

struct node *newNode(int data) {
    struct node *Node = malloc(sizeof(struct node));
    Node->data = data;
    Node->link = NULL;
    return Node;
}

void printlist(struct node *head) {
    while (head) {
        printf(""%d"", head->data);
        head = head->link;
    }
}

void reverse(struct node **head) {
    struct node *temp1 = NULL;
    struct node *temp2 = *head;
    
    while (temp2 != NULL) {
        struct node *temp3 = temp2->link;
        temp2->link = temp1;
        temp1 = temp2;
        temp2 = temp3;
    }
    
    *head = temp1;
}

int main() {
    struct node *head = NULL;
    struct node *p = head;
    int n, ele;
    
    scanf(""%d"", &n);
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &ele);
        if (head == NULL) {
            head = newNode(ele);
            p = head;
        } else {
            p->link = newNode(ele);
            p = p->link;
        }
    }
    
    reverse(&head);
    printlist(head);
    
    return 0;
}"
22732540,PES1UG22CS306,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy_head = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy_head;
    int carry = 0;
    
    while (l1 != NULL || l2 != NULL || carry) {
        int sum_val = carry;
        
        if (l1 != NULL) {
            sum_val += l1->value;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum_val += l2->value;
            l2 = l2->next;
        }
        
        carry = sum_val / 10;
        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = sum_val % 10;
        new_node->next = NULL;
        current->next = new_node;
        current = current->next;
    }
    
    struct ListNode* result = dummy_head->next;
    free(dummy_head);
    return result;
}

void print_linked_list(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d "", current->value);
        current = current->next;
    }
    
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);
    
    struct ListNode* head_l1 = NULL;
    struct ListNode* tail_l1 = NULL;
    for (int i = 0; i < num_digits_l1; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head_l1 == NULL) {
            head_l1 = new_node;
            tail_l1 = new_node;
        } else {
            tail_l1->next = new_node;
            tail_l1 = new_node;
        }
    }
    
    struct ListNode* head_l2 = NULL;
    struct ListNode* tail_l2 = NULL;
    for (int i = 0; i < num_digits_l2; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head_l2 == NULL) {
            head_l2 = new_node;
            tail_l2 = new_node;
        } else {
            tail_l2->next = new_node;
            tail_l2 = new_node;
        }
    }
    
   
    
    struct ListNode* sum_head = add_linked_lists(head_l1, head_l2);
    
    print_linked_list(sum_head);

    // Free allocated memory
    while (head_l1 != NULL) {
        struct ListNode* temp = head_l1;
        head_l1 = head_l1->next;
        free(temp);
    }
    while (head_l2 != NULL) {
        struct ListNode* temp = head_l2;
        head_l2 = head_l2->next;
        free(temp);
    }
    while (sum_head != NULL) {
        struct ListNode* temp = sum_head;
        sum_head = sum_head->next;
        free(temp);
    }

    return 0;
}"
22732545,PES1202202522,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* reverseLinkedList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    struct ListNode* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    long int numNodes;
    scanf(""%ld"", &numNodes);

    struct ListNode* head = NULL;
    struct ListNode* current;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    struct ListNode* reversedHead = reverseLinkedList(head);
    printLinkedList(reversedHead);

    return 0;
}
"
22732545,PES1202202522,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct node {
    int value;
    struct node* next;
};

struct node* add_linked_lists(struct node* l1, struct node* l2) {
    struct node* dummy_head = (struct node*)malloc(sizeof(struct node));
    struct node* current = dummy_head;
    int carry = 0;

    while (l1 || l2 || carry) {
        int total = carry;
        if (l1) {
            total += l1->value;
            l1 = l1->next;
        }
        if (l2) {
            total += l2->value;
            l2 = l2->next;
        }

        carry = total / 10;
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->value = total % 10;
        current->next = NULL;
    }

    struct node* result_head = dummy_head->next;
    free(dummy_head);
    return result_head;
}

void print_linked_list_with_separation(struct node* head) {
    struct node* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    long int num_digits1, num_digits2;
    scanf(""%ld %ld"", &num_digits1, &num_digits2);

    struct node* l1 = NULL;
    struct node* current1 = NULL;

    for (int i = 0; i < num_digits1; i++) {
        long int digit;
        scanf(""%ld"", &digit);
        struct node* new_node = (struct node*)malloc(sizeof(struct node));
        new_node->value = digit;
        new_node->next = NULL;

        if (l1 == NULL) {
            l1 = new_node;
            current1 = new_node;
        } else {
            current1->next = new_node;
            current1 = new_node;
        }
    }

    struct node* l2 = NULL;
    struct node* current2 = NULL;

    for (int i = 0; i < num_digits2; i++) {
        long int digit;
        scanf(""%ld"", &digit);
        struct node* new_node = (struct node*)malloc(sizeof(struct node));
        new_node->value = digit;
        new_node->next = NULL;

        if (l2 == NULL) {
            l2 = new_node;
            current2 = new_node;
        } else {
            current2->next = new_node;
            current2 = new_node;
        }
    }

    struct node* result_head = add_linked_lists(l1, l2);
    print_linked_list_with_separation(result_head);

    
    while (result_head) {
        struct node* temp = result_head;
        result_head = result_head->next;
        free(temp);
    }

    return 0;
}
"
22732554,PES1UG22CS254,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    long int info;
    struct node *next;
} NODE;

NODE *createNode(long int ele)
{
    NODE *newNode = malloc(sizeof(struct node));
    newNode->info = ele;
    newNode->next = NULL;
    return newNode;
}

NODE *insert(NODE *head,long int ele)
{
    NODE *newNode = createNode(ele);
    if (head == NULL)
    {
        head = newNode;
        return head;
    }
    NODE *p = head;
    while (p->next != NULL)
        p = p->next;
    p->next = newNode;
    return head;
}

NODE *Reverse2(NODE *head)
{
    NODE *q = NULL, *r = NULL;
    while (head != NULL)
    {
        r = q;
        q = head;
        head = head->next;
        q->next = r;
    }
    return q;
}

void display(NODE *head)
{
    NODE *p = head;
    while (p != NULL)
    {
        printf(""%ld"", p->info);
        p = p->next;
    }
    printf(""\n"");
}

int main()
{
    long int n, ele;
    NODE *head = NULL;

  
    scanf(""%ld"", &n);

   
    for (int i = 0; i < n; i++)
    {
        scanf(""%ld"", &ele);
        head = insert(head, ele);
    }

   
    head = Reverse2(head);


    display(head);

    return 0;
}"
22732554,PES1UG22CS254,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    long int info;
    struct node* next;
} NODE;

NODE* createNode(long int ele) {
    NODE* newNode = (NODE*)malloc(sizeof(NODE));
    if (newNode == NULL) {
        printf(""Memory allocation failed.\n"");
        exit(1);
    }
    newNode->info = ele;
    newNode->next = NULL;
    return newNode;
}

NODE* insert(NODE* head, long int ele) {
    NODE* newNode = createNode(ele);
    if (head == NULL) {
        head = newNode;
    } else {
        NODE* p = head;
        while (p->next != NULL)
            p = p->next;
        p->next = newNode;
    }
    return head;
}

NODE* reverseLinkedList(NODE* head) {
    NODE* prev = NULL;
    NODE* current = head;
    NODE* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

NODE* addLinkedLists(NODE* num1, NODE* num2) {
    NODE* result = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL) {
        int x = (num1 != NULL) ? num1->info : 0;
        int y = (num2 != NULL) ? num2->info : 0;
        int sum = x + y + carry;

        carry = sum / 10;
        result = insert(result, sum % 10);

        if (num1 != NULL) num1 = num1->next;
        if (num2 != NULL) num2 = num2->next;
    }

    if (carry > 0) {
        result = insert(result, carry);
    }

    return reverseLinkedList(result);
}

void printLinkedList(NODE* head) {
    NODE* p = head;
    while (p != NULL) {
        printf(""%ld "", p->info); 
        p = p->next;
    }
    printf(""\n"");
}

int main() {
    long int n1, n2, ele;
    scanf(""%ld %ld"", &n1, &n2);
    NODE* num1 = NULL;
    for (int i = 0; i < n1; i++) {
        scanf(""%ld"", &ele);
        num1 = insert(num1, ele);
    }

    NODE* num2 = NULL;
    for (int i = 0; i < n2; i++) {
        scanf(""%ld"", &ele);
        num2 = insert(num2, ele);
    }

    NODE* result = addLinkedLists(num1, num2);
    NODE* r1 = reverseLinkedList(result);
    printLinkedList(r1);

    return 0;
}
"
22732555,PES1UG22CS287,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *link;
};

struct node *newNode(int data) {
    struct node *Node = malloc(sizeof(struct node));
    Node->data = data;
    Node->link = NULL;
    return Node;
}

void printlist(struct node *head) {
    while (head) {
        printf(""%d"", head->data);
        head = head->link;
    }
}

void reverse(struct node **head) {
    struct node *temp1 = NULL;
    struct node *temp2 = *head;
    
    while (temp2 != NULL) {
        struct node *temp3 = temp2->link;
        temp2->link = temp1;
        temp1 = temp2;
        temp2 = temp3;
    }
    
    *head = temp1;
}

int main() {
    struct node *head = NULL;
    struct node *p = head;
    int n, ele;
    
    scanf(""%d"", &n);
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &ele);
        if (head == NULL) {
            head = newNode(ele);
            p = head;
        } else {
            p->link = newNode(ele);
            p = p->link;
        }
    }
    
    reverse(&head);
    printlist(head);
    
    return 0;
}
"
22732555,PES1UG22CS287,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy_head = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy_head;
    int carry = 0;
    
    while (l1 != NULL || l2 != NULL || carry) {
        int sum_val = carry;
        
        if (l1 != NULL) {
            sum_val += l1->value;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum_val += l2->value;
            l2 = l2->next;
        }
        
        carry = sum_val / 10;
        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = sum_val % 10;
        new_node->next = NULL;
        current->next = new_node;
        current = current->next;
    }
    
    struct ListNode* result = dummy_head->next;
    free(dummy_head);
    return result;
}

void print_linked_list(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d "", current->value);
        current = current->next;
    }
    
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);
    
    struct ListNode* head_l1 = NULL;
    struct ListNode* tail_l1 = NULL;
    for (int i = 0; i < num_digits_l1; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head_l1 == NULL) {
            head_l1 = new_node;
            tail_l1 = new_node;
        } else {
            tail_l1->next = new_node;
            tail_l1 = new_node;
        }
    }
    
    struct ListNode* head_l2 = NULL;
    struct ListNode* tail_l2 = NULL;
    for (int i = 0; i < num_digits_l2; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head_l2 == NULL) {
            head_l2 = new_node;
            tail_l2 = new_node;
        } else {
            tail_l2->next = new_node;
            tail_l2 = new_node;
        }
    }
    
   
    
    struct ListNode* sum_head = add_linked_lists(head_l1, head_l2);
    
    print_linked_list(sum_head);

    // Free allocated memory
    while (head_l1 != NULL) {
        struct ListNode* temp = head_l1;
        head_l1 = head_l1->next;
        free(temp);
    }
    while (head_l2 != NULL) {
        struct ListNode* temp = head_l2;
        head_l2 = head_l2->next;
        free(temp);
    }
    while (sum_head != NULL) {
        struct ListNode* temp = sum_head;
        sum_head = sum_head->next;
        free(temp);
    }

    return 0;
}
"
22732557,PPES1UG22CS260,Reversing a Linked List 1,15,"
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *reverselist(struct node *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void printlist(struct node *head){
    struct node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->data);
        cur=cur->next;
    }
}
int main(){
    int noofnodes;
    int data;
    scanf(""%d"",&noofnodes);
    if (noofnodes < 0 || noofnodes > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<noofnodes;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    struct node* reversedHead = reverselist(head);
    printlist(reversedHead);
    
    
    return 0;
}"
22732557,PPES1UG22CS260,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>


struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}


struct ListNode* create_linked_list(int* digits, int num_digits) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return dummy->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct ListNode* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct ListNode* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct ListNode* result = add_linked_lists(l1, l2);

    
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}
"
22732560,PES1UG22CS273,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node{
    int data;
    struct node*next;
}NODE;

NODE*insertLast(NODE*head,int ele);
NODE*createnode(int ele);
NODE*reverselist(NODE*head);
void display(NODE*head);
int main() {
int n;int ele;NODE*head=NULL;
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
    scanf(""%d"",&n);
    for(int i=0;i<n;i++){
        scanf(""%d"",&ele);
       head=insertLast(head,ele);
        }
    head=reverselist(head);
    display(head);
    return 0;
}
NODE*createnode(int ele){
    NODE*newnode;
    newnode=(NODE*)malloc(sizeof(NODE));
    newnode->data=ele;
    newnode->next=NULL;
    return newnode;
}

NODE*insertLast(NODE*head,int ele){
    NODE*newnode=createnode(ele);
    NODE*p=head;
    if(head==NULL){
head=newnode;
    }
    else{
        while(p->next!=NULL){
 p=p->next;
        }
        p->next=newnode;
    }
    return head;
}


NODE*reverselist(NODE*head){

    
    NODE*current=head;
    NODE*p=NULL;
    NODE*q=NULL;
    while(current!=NULL){
p=current->next;
    current->next=q;
    q=current;
    current=p;}
head=q;
    return head;
}

void display(NODE*head){
NODE*p=head;
    while(p!=NULL){
        printf(""%d"",p->data);
        p=p->next;
    }

}"
22732560,PES1UG22CS273,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>
#include<math.h>
#include<string.h>
// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};
// insert a new node at the end of the linked list
void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to add two reversed-digit linked lists
struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }

    return result;
}
// Function to print the elements of a linked list
void printList(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&list1, value);
    }

    for (int i = 0; i < n2; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);

    printList(sumList);

    return 0;
}"
22732562,PES1UG22CS290,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
   long int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%ld"", current->value);
        current = current->next;
    }
}

int main() {
    long int numNodes;
    scanf(""%ld"", &numNodes);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (long int i = 0; i < numNodes; ++i) {
        long int value;
        scanf(""%ld"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    struct Node* reversedHead = reverseLinkedList(head);
    printLinkedList(reversedHead);

    while (reversedHead != NULL) {
        struct Node* temp = reversedHead;
        reversedHead = reversedHead->next;
        free(temp);
    }

    return 0;
}


















"
22732562,PES1UG22CS290,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    long int info;
    struct node* next;
} NODE;

NODE* createNode(long int ele) {
    NODE* newNode = (NODE*)malloc(sizeof(NODE));
    if (newNode == NULL) {
        printf(""Memory allocation failed.\n"");
        exit(1);
    }
    newNode->info = ele;
    newNode->next = NULL;
    return newNode;
}

NODE* insert(NODE* head, long int ele) {
    NODE* newNode = createNode(ele);
    if (head == NULL) {
        head = newNode;
    } else {
        NODE* p = head;
        while (p->next != NULL)
            p = p->next;
        p->next = newNode;
    }
    return head;
}

NODE* reverseLinkedList(NODE* head) {
    NODE* prev = NULL;
    NODE* current = head;
    NODE* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

NODE* addLinkedLists(NODE* num1, NODE* num2) {
    NODE* result = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL) {
        int x = (num1 != NULL) ? num1->info : 0;
        int y = (num2 != NULL) ? num2->info : 0;
        int sum = x + y + carry;

        carry = sum / 10;
        result = insert(result, sum % 10);

        if (num1 != NULL) num1 = num1->next;
        if (num2 != NULL) num2 = num2->next;
    }

    if (carry > 0) {
        result = insert(result, carry);
    }

    return reverseLinkedList(result);
}

void printLinkedList(NODE* head) {
    NODE* p = head;
    while (p != NULL) {
        printf(""%ld "", p->info);
        p = p->next;
    }
    printf(""\n"");
}

int main() {
    long int n1, n2, ele;
    scanf(""%ld %ld"", &n1, &n2);
    NODE* num1 = NULL;
    for (int i = 0; i < n1; i++) {
        scanf(""%ld"", &ele);
        num1 = insert(num1, ele);
    }

    NODE* num2 = NULL;
    for (int i = 0; i < n2; i++) {
        scanf(""%ld"", &ele);
        num2 = insert(num2, ele);
    }

    NODE* result = addLinkedLists(num1, num2);
    NODE* r1 = reverseLinkedList(result);
    printLinkedList(r1);

    return 0;
}"
22732563,PES1UG22CS281,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *link;
};

struct node *newNode(int data) {
    struct node *Node = malloc(sizeof(struct node));
    Node->data = data;
    Node->link = NULL;
    return Node;
}

void printlist(struct node *head) {
    while (head) {
        printf(""%d"", head->data);
        head = head->link;
    }
}

void reverse(struct node **head) {
    struct node *temp1 = NULL;
    struct node *temp2 = *head;
    
    while (temp2 != NULL) {
        struct node *temp3 = temp2->link;
        temp2->link = temp1;
        temp1 = temp2;
        temp2 = temp3;
    }
    
    *head = temp1;
}

int main() {
    struct node *head = NULL;
    struct node *p = head;
    int n, ele;
    
    scanf(""%d"", &n);
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &ele);
        if (head == NULL) {
            head = newNode(ele);
            p = head;
        } else {
            p->link = newNode(ele);
            p = p->link;
        }
    }
    
    reverse(&head);
    printlist(head);
    
    return 0;
}"
22732563,PES1UG22CS281,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy_head = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy_head;
    int carry = 0;
    
    while (l1 != NULL || l2 != NULL || carry) {
        int sum_val = carry;
        
        if (l1 != NULL) {
            sum_val += l1->value;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum_val += l2->value;
            l2 = l2->next;
        }
        
        carry = sum_val / 10;
        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = sum_val % 10;
        new_node->next = NULL;
        current->next = new_node;
        current = current->next;
    }
    
    struct ListNode* result = dummy_head->next;
    free(dummy_head);
    return result;
}

void print_linked_list(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d "", current->value);
        current = current->next;
    }
    
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);
    
    struct ListNode* head_l1 = NULL;
    struct ListNode* tail_l1 = NULL;
    for (int i = 0; i < num_digits_l1; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head_l1 == NULL) {
            head_l1 = new_node;
            tail_l1 = new_node;
        } else {
            tail_l1->next = new_node;
            tail_l1 = new_node;
        }
    }
    
    struct ListNode* head_l2 = NULL;
    struct ListNode* tail_l2 = NULL;
    for (int i = 0; i < num_digits_l2; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head_l2 == NULL) {
            head_l2 = new_node;
            tail_l2 = new_node;
        } else {
            tail_l2->next = new_node;
            tail_l2 = new_node;
        }
    }
    
   
    
    struct ListNode* sum_head = add_linked_lists(head_l1, head_l2);
    
    print_linked_list(sum_head);

    // Free allocated memory
    while (head_l1 != NULL) {
        struct ListNode* temp = head_l1;
        head_l1 = head_l1->next;
        free(temp);
    }
    while (head_l2 != NULL) {
        struct ListNode* temp = head_l2;
        head_l2 = head_l2->next;
        free(temp);
    }
    while (sum_head != NULL) {
        struct ListNode* temp = sum_head;
        sum_head = sum_head->next;
        free(temp);
    }

    return 0;
}

"
22732567,PES1UG22CS291,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Node
{
    long int data;
    struct Node* next;
};
struct Node* head;

int main() {
    long int n;
    scanf(""%ld"",&n);
    
    for(int i=0;i<n;i++)
    {
        struct Node* ptr=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%ld"",&ptr->data);
        ptr->next=head;
        head=ptr;
    }
    for(int i=n;i>0;i--)
    {
        printf(""%ld"",head->data);
        head=head->next;
      
        
    }
    
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
"
22732567,PES1UG22CS291,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct Node {
    int value;
    struct Node* next;
};

struct Node* add_linked_lists(struct Node* l1, struct Node* l2) {
    struct Node* dummy = (struct Node*)malloc(sizeof(struct Node));
    struct Node* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->value : 0;
        int val2 = l2 ? l2->value : 0;
        
        int total = val1 + val2 + carry;
        carry = total / 10;
        int digit = total % 10;
        
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = digit;
        newNode->next = NULL;
        
        current->next = newNode;
        current = current->next;
        
        if (l1) {
            l1 = l1->next;
        }
        if (l2) {
            l2 = l2->next;
        }
    }
    
    return dummy->next;
}

struct Node* create_linked_list(int* arr, int size) {
    struct Node* dummy = (struct Node*)malloc(sizeof(struct Node));
    struct Node* current = dummy;
    
    for (int i = 0; i < size; i++) {
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = arr[i];
        newNode->next = NULL;
        
        current->next = newNode;
        current = current->next;
    }
    
    return dummy->next;
}

void print_linked_list(struct Node* head) {
    struct Node* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    int digits1[n];
    int digits2[m];
    
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &digits1[i]);
    }
    for (int i = 0; i < m; i++) {
        scanf(""%d"", &digits2[i]);
    }
    
    struct Node* l1 = create_linked_list(digits1, n);
    struct Node* l2 = create_linked_list(digits2, m);
    
    struct Node* result = add_linked_lists(l1, l2);
    
    print_linked_list(result);
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
"
22732568,PES1UG22CS274,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

struct ListNode* reverseLinkedList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    
    while (current != NULL) {
        struct ListNode* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    
    return prev;
}

void printLinkedListValues(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        current = current->next;
    }
}

int main() {
    
    int num_nodes;
    scanf(""%d"", &num_nodes);

    
    struct ListNode* head = NULL;
    struct ListNode* current = NULL;
    for (int i = 0; i < num_nodes; i++) {
        int val;
        scanf(""%d"", &val);
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->val = val;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = head;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }

    
    struct ListNode* reversedHead = reverseLinkedList(head);

  
    printLinkedListValues(reversedHead);

    
    while (reversedHead != NULL) {
        struct ListNode* temp = reversedHead;
        reversedHead = reversedHead->next;
        free(temp);
    }

    return 0;
}




"
22732568,PES1UG22CS274,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy_head = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy_head;
    int carry = 0;
    
    while (l1 != NULL || l2 != NULL || carry) {
        int sum_val = carry;
        
        if (l1 != NULL) {
            sum_val += l1->value;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum_val += l2->value;
            l2 = l2->next;
        }
        
        carry = sum_val / 10;
        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = sum_val % 10;
        new_node->next = NULL;
        current->next = new_node;
        current = current->next;
    }
    
    struct ListNode* result = dummy_head->next;
    free(dummy_head);
    return result;
}

void print_linked_list(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d "", current->value);
        current = current->next;
    }
    
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);
    
    struct ListNode* head_l1 = NULL;
    struct ListNode* tail_l1 = NULL;
    for (int i = 0; i < num_digits_l1; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head_l1 == NULL) {
            head_l1 = new_node;
            tail_l1 = new_node;
        } else {
            tail_l1->next = new_node;
            tail_l1 = new_node;
        }
    }
    
    struct ListNode* head_l2 = NULL;
    struct ListNode* tail_l2 = NULL;
    for (int i = 0; i < num_digits_l2; i++) {
        int value;
        scanf(""%d"", &value);
        
        struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
        new_node->value = value;
        new_node->next = NULL;
        
        if (head_l2 == NULL) {
            head_l2 = new_node;
            tail_l2 = new_node;
        } else {
            tail_l2->next = new_node;
            tail_l2 = new_node;
        }
    }
    
   
    
    struct ListNode* sum_head = add_linked_lists(head_l1, head_l2);
    
    print_linked_list(sum_head);

    // Free allocated memory
    while (head_l1 != NULL) {
        struct ListNode* temp = head_l1;
        head_l1 = head_l1->next;
        free(temp);
    }
    while (head_l2 != NULL) {
        struct ListNode* temp = head_l2;
        head_l2 = head_l2->next;
        free(temp);
    }
    while (sum_head != NULL) {
        struct ListNode* temp = sum_head;
        sum_head = sum_head->next;
        free(temp);
    }

    return 0;
}
"
22732578,PES1UG22CS262,Reversing a Linked List 1,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *reverselist(struct node *head){
    struct node *prev=NULL;
    struct node *temp=head;
    while(temp!=NULL){
        struct node *ptr=temp->next;
        temp->next=prev;
        prev=temp;
        temp=ptr;
    }
    return prev;
}
void display(struct node *head){
    struct node *temp=head;
    while(temp!=NULL){
        printf(""%d"",temp->data);
        temp=temp->next;
    }
}
int main(){
    int n;
    int data;
    scanf(""%d"",&n);
    if (n< 0 || n> 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<n;i++){
        
        scanf(""%d"",&data);
        if (data < -1000 || data > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *ptr=(struct node *)malloc(sizeof(struct node));
        ptr->data=data;
        ptr->next=NULL;
        if(prev==NULL){
            head=ptr;
        }
        else{
            prev->next=ptr;
        }
        prev=ptr;
    }
    struct node* reverse = reverselist(head);
    display(reverse);
    
    
    return 0;
}"
22732578,PES1UG22CS262,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include<string.h>
#include<math.h>
#include <stdlib.h>


struct node {
    int data;
    struct node *next;
};

struct node* add(struct node* l1, struct node* l2) {
    struct node* ptr = (struct node*)malloc(sizeof(struct node));
    struct node* temp = ptr;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->data : 0;
        int y = l2 ? l2->data: 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        temp->next = (struct node*)malloc(sizeof(struct node));
        temp = temp->next;
        temp->data = sum % 10;
        temp->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct node* result = ptr->next;
    free(ptr);
    return result;
}


struct node* create(int* digits, int num_digits) {
    struct node* ptr = (struct node*)malloc(sizeof(struct node));
    struct node* temp = ptr;
    for (int i = 0; i < num_digits; i++) {
        temp->next = (struct node*)malloc(sizeof(struct node));
        temp = temp->next;
        temp->data = digits[i];
        temp->next = NULL;
    }
    return ptr->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);
    if(num_digits_l1<0 || num_digits_l2>1000){
        printf(""Invalid\n"");
        return 1;
    }

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
        
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct node* l1 = create(digits_l1, num_digits_l1);
    struct node* l2 = create(digits_l2, num_digits_l2);

    struct node* result = add(l1, l2);

    
    while (result) {
        printf(""%d "", result->data);
        result = result->next;
    }

    return 0;
}"
22732588,pes1202203582,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode {
    int val;
    struct ListNode* next;
} NODE;

NODE* reverseLinkedList(NODE *head) {
    NODE* p = NULL;
    NODE* c = head;
    
    while (c != NULL) {
        NODE* nextNode = c->next;
        c->next = p;
        p = c;
        c = nextNode;
    }
    
    return p;
}

void printLinkedListValues(NODE *head) {
    NODE* c = head;
    while (c != NULL) {
        printf(""%d"", c->val);
        c = c->next;
    }
}

int main() {
    
    int n;
    scanf(""%d"", &n);

    
    NODE* head = NULL;
    NODE* c = NULL;
    for (int i = 0; i < n; i++) {
        int val;
        scanf(""%d"", &val);
        NODE* newNode = (NODE*)malloc(sizeof(NODE));
        newNode->val = val;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            c = head;
        } else {
            c->next = newNode;
            c = c->next;
        }
    }

    
    NODE* reversedHead = reverseLinkedList(head);

  
    printLinkedListValues(reversedHead);

    
    while (reversedHead != NULL) {
        NODE* temp = reversedHead;
        reversedHead = reversedHead->next;
        free(temp);
    }

    return 0;
}
"
22732588,pes1202203582,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode {
    int value;
    struct ListNode* next;
} NODE;

NODE* addReversedDigitLists(NODE* list1, NODE* list2) {
    NODE* result = NULL;
    NODE* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry != 0) {
        int sum = carry;
        
        if (list1 != NULL) {
            sum += list1->value;
            list1 = list1->next;
        }
        
        if (list2 != NULL) {
            sum += list2->value;
            list2 = list2->next;
        }
        
        carry = sum / 10;
        sum %= 10;

        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = sum;
        new_node->next = NULL;

        if (result == NULL) {
            result = new_node;
            current = result;
        } else {
            current->next = new_node;
            current = current->next;
        }
    }

    return result;
}

void printLinkedList(NODE* head) {
    NODE* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

void freeLinkedList(NODE* head) {
    while (head != NULL) {
        NODE* temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    int num_digits_list1, num_digits_list2;
    scanf(""%d %d"", &num_digits_list1, &num_digits_list2);

    NODE* list1 = NULL;
    NODE* current1 = NULL;
    int value;

    for (int i = 0; i < num_digits_list1; i++) {
        scanf(""%d"", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;

        if (list1 == NULL) {
            list1 = new_node;
            current1 = list1;
        } else {
            current1->next = new_node;
            current1 = current1->next;
        }
    }

    NODE* list2 = NULL;
    NODE* current2 = NULL;

    for (int i = 0; i < num_digits_list2; i++) {
        scanf(""%d"", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;

        if (list2 == NULL) {
            list2 = new_node;
            current2 = list2;
        } else {
            current2->next = new_node;
            current2 = current2->next;
        }
    }

    NODE* result = addReversedDigitLists(list1, list2);
    printLinkedList(result);
    freeLinkedList(result);

    return 0;
}
"
22732590,PES1UG22CS269,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

struct ListNode* reverseLinkedList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    
    while (current != NULL) {
        struct ListNode* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    
    return prev;
}

void printLinkedListValues(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        current = current->next;
    }
}

int main() {
    
    int num_nodes;
    scanf(""%d"", &num_nodes);

    
    struct ListNode* head = NULL;
    struct ListNode* current = NULL;
    for (int i = 0; i < num_nodes; i++) {
        int val;
        scanf(""%d"", &val);
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->val = val;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = head;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }

    
    struct ListNode* reversedHead = reverseLinkedList(head);

  
    printLinkedListValues(reversedHead);

    
    while (reversedHead != NULL) {
        struct ListNode* temp = reversedHead;
        reversedHead = reversedHead->next;
        free(temp);
    }

    return 0;
}"
22732590,PES1UG22CS269,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry != 0) {
        int sum = carry;
        if (list1 != NULL) {
            sum += list1->value;
            list1 = list1->next;
        }
        if (list2 != NULL) {
            sum += list2->value;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum %= 10;

        if (result == NULL) {
            result = (struct Node*)malloc(sizeof(struct Node));
            result->value = sum;
            result->next = NULL;
            current = result;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->value = sum;
            current->next = NULL;
        }
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;
    struct Node* current1 = NULL;
    struct Node* current2 = NULL;

    for (int i = 0; i < n1; i++) {
        int value;
        scanf(""%d"", &value);

        if (list1 == NULL) {
            list1 = (struct Node*)malloc(sizeof(struct Node));
            list1->value = value;
            list1->next = NULL;
            current1 = list1;
        } else {
            current1->next = (struct Node*)malloc(sizeof(struct Node));
            current1 = current1->next;
            current1->value = value;
            current1->next = NULL;
        }
    }

    for (int i = 0; i < n2; i++) {
        int value;
        scanf(""%d"", &value);

        if (list2 == NULL) {
            list2 = (struct Node*)malloc(sizeof(struct Node));
            list2->value = value;
            list2->next = NULL;
            current2 = list2;
        } else {
            current2->next = (struct Node*)malloc(sizeof(struct Node));
            current2 = current2->next;
            current2->value = value;
            current2->next = NULL;
        }
    }

    struct Node* sumList = addLists(list1, list2);

    printList(sumList);

    // Clean up memory
    while (list1 != NULL) {
        struct Node* temp = list1;
        list1 = list1->next;
        free(temp);
    }
    while (list2 != NULL) {
        struct Node* temp = list2;
        list2 = list2->next;
        free(temp);
    }
    while (sumList != NULL) {
        struct Node* temp = sumList;
        sumList = sumList->next;
        free(temp);
    }

    return 0;
}"
22732598,PES1UG22CS304,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

struct ListNode* reverseLinkedList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    
    while (current != NULL) {
        struct ListNode* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    
    return prev;
}

void printLinkedListValues(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        current = current->next;
    }
}

int main() {
    
    int num_nodes;
    scanf(""%d"", &num_nodes);

    
    struct ListNode* head = NULL;
    struct ListNode* current = NULL;
    for (int i = 0; i < num_nodes; i++) {
        int val;
        scanf(""%d"", &val);
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->val = val;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = head;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }

    
    struct ListNode* reversedHead = reverseLinkedList(head);

  
    printLinkedListValues(reversedHead);

    
    while (reversedHead != NULL) {
        struct ListNode* temp = reversedHead;
        reversedHead = reversedHead->next;
        free(temp);
    }

    return 0;
}"
22732598,PES1UG22CS304,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode {
    int value;
    struct ListNode* next;
} NODE;

NODE* addReversedDigitLists(NODE* list1, NODE* list2) {
    NODE* result = NULL;
    NODE* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry != 0) {
        int sum = carry;
        
        if (list1 != NULL) {
            sum += list1->value;
            list1 = list1->next;
        }
        
        if (list2 != NULL) {
            sum += list2->value;
            list2 = list2->next;
        }
        
        carry = sum / 10;
        sum %= 10;

        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = sum;
        new_node->next = NULL;

        if (result == NULL) {
            result = new_node;
            current = result;
        } else {
            current->next = new_node;
            current = current->next;
        }
    }

    return result;
}

void printLinkedList(NODE* head) {
    NODE* current = head;
    while (current != NULL) {
        printf(""%d "", current->value);
       
        current = current->next;
    }
}



int main() {
    int num_digits_list1, num_digits_list2;
    scanf(""%d %d"", &num_digits_list1, &num_digits_list2);

    NODE* list1 = NULL;
    NODE* current1 = NULL;
    int value;

    for (int i = 0; i < num_digits_list1; i++) {
        scanf(""%d"", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;

        if (list1 == NULL) {
            list1 = new_node;
            current1 = list1;
        } else {
            current1->next = new_node;
            current1 = current1->next;
        }
    }

    NODE* list2 = NULL;
    NODE* current2 = NULL;

    for (int i = 0; i < num_digits_list2; i++) {
        scanf(""%d"", &value);
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        new_node->value = value;
        new_node->next = NULL;

        if (list2 == NULL) {
            list2 = new_node;
            current2 = list2;
        } else {
            current2->next = new_node;
            current2 = current2->next;
        }
    }

    NODE* result = addReversedDigitLists(list1, list2);
    printLinkedList(result);
   

    return 0;
}"
22732603,PES1UG22CS284,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    long int data;
    struct node* link;
} NODE;

void func(NODE* head) {
    if (head == NULL) {
        return;
    }
    func(head->link);
    printf(""%d"", head->data);
}


int main() {
    int n;
    scanf(""%d"", &n);

    NODE* head = NULL;
    NODE* temp = NULL;

    for (int i = 0; i < n; i++) {
        NODE* new_node = (NODE*)malloc(sizeof(NODE));
        scanf(""%d"", &new_node->data);
        new_node->link = NULL;

        if (head == NULL) {
            head =new_node;
            temp = head;
        } else {
            temp->link = new_node;
            temp = new_node;
        }
    }



    func(head);

    return 0;
}
"
22732603,PES1UG22CS284,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    long int info;
    struct node* next;
} NODE;

NODE* createNode(long int ele) {
    NODE* newNode = (NODE*)malloc(sizeof(NODE));
    if (newNode == NULL) {
        exit(1);
    }
    newNode->info = ele;
    newNode->next = NULL;
    return newNode;
}

NODE* insert(NODE* head, long int ele) {
    NODE* newNode = createNode(ele);
    if (head == NULL) {
        head = newNode;
    } else {
        NODE* p = head;
        while (p->next != NULL)
            p = p->next;
        p->next = newNode;
    }
    return head;
}

NODE* reverseLinkedList(NODE* head) {
    NODE* prev = NULL;
    NODE* current = head;
    NODE* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

NODE* addLinkedLists(NODE* num1, NODE* num2) {
    NODE* result = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL) {
        int x = (num1 != NULL) ? num1->info : 0;
        int y = (num2 != NULL) ? num2->info : 0;
        int sum = x + y + carry;

        carry = sum / 10;
        result = insert(result, sum % 10);

        if (num1 != NULL) num1 = num1->next;
        if (num2 != NULL) num2 = num2->next;
    }

    if (carry > 0) {
        result = insert(result, carry);
    }

    return reverseLinkedList(result);
}

void printLinkedList(NODE* head) {
    NODE* p = head;
    while (p != NULL) {
        printf(""%ld "", p->info); 
        p = p->next;
    }
    printf(""\n"");
}

int main() {
    long int n1, n2, ele;
    scanf(""%ld %ld"", &n1, &n2);
    NODE* num1 = NULL;
    for (int i = 0; i < n1; i++) {
        scanf(""%ld"", &ele);
        num1 = insert(num1, ele);
    }

    NODE* num2 = NULL;
    for (int i = 0; i < n2; i++) {
        scanf(""%ld"", &ele);
        num2 = insert(num2, ele);
    }

    NODE* result = addLinkedLists(num1, num2);
    NODE* r1 = reverseLinkedList(result);
    printLinkedList(r1);

    return 0;
}"
22732608,PES1UG22CS303,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int info;
    struct node *next;
}NODE;

NODE *reverselist(NODE *head);
NODE *insertlast(NODE *head,int ele);
NODE *createnode(int ele);
void display(NODE *head);

int main() {
    int n,ele;
    NODE *head=NULL;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++)
    {
        scanf(""%d"",&ele);
        head=insertlast(head,ele);
    }
    head=reverselist(head);
    display(head);
    return 0;
}

NODE *createnode(int ele)
{
    NODE *newnode=(NODE *)malloc(sizeof(struct node));
    newnode->info=ele;
    newnode->next=NULL;
    return newnode;
}
 
NODE *insertlast(NODE *head,int ele)
{
    NODE *newnode=createnode(ele);
    if(head==NULL)
    {
        head=newnode;
    }
    else
    {
        NODE *temp=head;
        while(temp->next!=NULL)
            temp=temp->next;
        temp->next=newnode;
    }
    return head;
}

NODE *reverselist(NODE *head)
{
    NODE *current=head;
    NODE *p=NULL;
    NODE *q=NULL;
    while(current!=NULL)
    {
        p=current->next;
        current->next=q;
        q=current;
        current=p;
    }
    head=q;
    return head;
}

void display(NODE *head)
{
        NODE *p=head;
        while(p!=NULL)
        {
            printf(""%d"",p->info);
            p=p->next;
        }
}"
22732608,PES1UG22CS303,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>
#include<math.h>
#include<string.h>
// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};
// insert a new node at the end of the linked list
void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to add two reversed-digit linked lists
struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry) {
        int sum = carry;

        if (list1 != NULL) {
            sum += list1->data;
            list1 = list1->next;
        }

        if (list2 != NULL) {
            sum += list2->data;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = sum;
        newNode->next = NULL;

        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }

    return result;
}
// Function to print the elements of a linked list
void printList(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    for (int i = 0; i < n1; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&list1, value);
    }

    for (int i = 0; i < n2; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&list2, value);
    }

    struct Node* sumList = addLists(list1, list2);

    printList(sumList);

    return 0;
}"
22732619,PES1UG22CS282_K,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* reverse_linked_list(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    struct ListNode* next = NULL;
    
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    
    return prev;
}

struct ListNode* create_linked_list(int* arr, int size) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    
    for (int i = 0; i < size; i++) {
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->value = arr[i];
        newNode->next = NULL;
        
        current->next = newNode;
        current = current->next;
    }
    
    return dummy->next;
}

void print_linked_list(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d"", current->value);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
int n;
    scanf(""%d"", &n);
    
    int values[n];
    
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &values[i]);
    }
    
    struct ListNode* originalList = create_linked_list(values, n);
    struct ListNode* reversedList = reverse_linked_list(originalList);
    
    print_linked_list(reversedList);
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
"
22732619,PES1UG22CS282_K,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int val1 = l1 ? l1->value : 0;
        int val2 = l2 ? l2->value : 0;
        
        int total = val1 + val2 + carry;
        carry = total / 10;
        int digit = total % 10;
        
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->value = digit;
        newNode->next = NULL;
        
        current->next = newNode;
        current = current->next;
        
        if (l1) {
            l1 = l1->next;
        }
        if (l2) {
            l2 = l2->next;
        }
    }
    
    return dummy->next;
}

struct ListNode* create_linked_list(int* arr, int size) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    
    for (int i = 0; i < size; i++) {
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->value = arr[i];
        newNode->next = NULL;
        
        current->next = newNode;
        current = current->next;
    }
    
    return dummy->next;
}

void print_linked_list(struct ListNode* head) {
    struct ListNode* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
int n, m;
    scanf(""%d %d"", &n, &m);
    
    int digits1[n];
    int digits2[m];
    
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &digits1[i]);
    }
    for (int i = 0; i < m; i++) {
        scanf(""%d"", &digits2[i]);
    }
    
    struct ListNode* l1 = create_linked_list(digits1, n);
    struct ListNode* l2 = create_linked_list(digits2, m);
    
    struct ListNode* result = add_linked_lists(l1, l2);
    
    print_linked_list(result);
    
    return 0;
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    
}
"
22732622,PES1UG22CS267,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);

    if (n < 0 || n > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < n; ++i) {
        int value;
        scanf(""%d"", &value);

        if (value < -1000 || value > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = head;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    return 0;
}"
22732622,PES1UG22CS267,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>


struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* add_linked_lists(struct ListNode* m1, struct ListNode* m2) {
    struct ListNode* abc = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = abc;
    int carry = 0;
    
    while (m1 || m2 || carry) {
        int a = m1 ? m1->val : 0;
        int b = m2 ? m2->val : 0;
        
        int sum = a + b + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (m1) m1 = m1->next;
        if (m2) m2 = m2->next;
    }
    
    struct ListNode* result = abc->next;
    free(abc);
    return result;
}


struct ListNode* create_linked_list(int* digits, int num_digits) {
    struct ListNode* abc = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = abc;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return abc->next;
}

int main() {
    int num_digits_m1, num_digits_m2;
    scanf(""%d %d"", &num_digits_m1, &num_digits_m2);

    int digits_m1[num_digits_m1];
    int digits_m2[num_digits_m2];

    for (int i = 0; i < num_digits_m1; i++) {
        scanf(""%d"", &digits_m1[i]);
    }

    for (int i = 0; i < num_digits_m2; i++) {
        scanf(""%d"", &digits_m2[i]);
    }

    struct ListNode* m1 = create_linked_list(digits_m1, num_digits_m1);
    struct ListNode* m2 = create_linked_list(digits_m2, num_digits_m2);

    struct ListNode* result = add_linked_lists(m1,m2);

    
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}"
22732723,PES1UG22CS265,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


typedef struct node
{
    int data;
    struct node *link;
}node;


node *head=NULL;


void insert_node(int data)
{
 
    node *ptr;
    ptr= (node *)malloc(sizeof(node));
    ptr->data = data;
    ptr->link = NULL;
    if(head==NULL)
    {
        head=ptr;
    }
    else
    {
        node *temp=head;
        while(temp->link!=NULL)
        {
            temp=temp->link;
        }
        temp->link=ptr;
    }

}


void display()
 {
    node *temp;
    temp=head;
    while(temp!=NULL)
    {
        printf(""%d"",temp->data);
        temp=temp->link;
    }
}


void reverse()
{
    node *ptr=NULL;
    node *temp=head;
    node *update;
    while(temp !=NULL)
    {
        update= temp->link;
        temp->link=ptr;
        ptr=temp;
        temp=update;
    }
    head=ptr;
}



int main() {

    int n,data;
    scanf(""%d"",&n);
    for(int i=1;i<=n;i++)
    {
        scanf(""%d"",&data);
        insert_node(data);
    }
    reverse();
    display();
    return 0;
}"
22732723,PES1UG22CS265,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>




typedef struct node
{
    int data;
    struct node *link;
}node;


node *head1=NULL;
node *head2=NULL;
node *sum=NULL;


void insert_node(node **head,int data)
{
 
    node *ptr;
    ptr= (node *)malloc(sizeof(node));
    ptr->data = data;
    ptr->link = NULL;
    if(*head==NULL)
    {
        *head=ptr;
    }
    else
    {
        node *temp=*head;
        while(temp->link!=NULL)
        {
            temp=temp->link;
        }
        temp->link=ptr;
    }

}



void add() {
    int car = 0;
    node *ptr1, *ptr2;
    ptr1 = head1;
    ptr2 = head2;
    while (ptr1 != NULL || ptr2 != NULL || car) {
        int sum_digit = car;
        if (ptr1 != NULL) {
            sum_digit += ptr1->data;
            ptr1 = ptr1->link;
        }
        if (ptr2 != NULL) {
            sum_digit += ptr2->data;
            ptr2 = ptr2->link;
        }

        car = sum_digit / 10;
        sum_digit %= 10;

        insert_node(&sum, sum_digit);
    }
}



void display(node *head)
 {
    node *temp;
    temp=head;
    while(temp!=NULL)
    {
        printf(""%d "",temp->data);
        temp=temp->link;
    }
}




int main() {

    int n,m,data;
    scanf(""%d"",&n);
    scanf(""%d"",&m);
    for(int i=1;i<=n;i++)
    {
        scanf(""%d"",&data);
        insert_node(&head1,data);
    }
    for(int i=1;i<=m;i++)
    {
        scanf(""%d"",&data);
        insert_node(&head2,data);
    }
    add();
    
    display(sum);
    return 0;
}"
22732762,PES1UG22CS288,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* reverseLinkedList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int n;
    scanf(""%d"", &n);

    if (n < 0 || n > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }

    struct Node* head = NULL;
    struct Node* current = NULL;

    for (int i = 0; i < n; ++i) {
        int value;
        scanf(""%d"", &value);

        if (value < -1000 || value > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = head;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }

    head = reverseLinkedList(head);
    printLinkedList(head);

    return 0;
}"
22732762,PES1UG22CS288,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>


struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* add_linked_lists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}


struct ListNode* create_linked_list(int* digits, int num_digits) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    for (int i = 0; i < num_digits; i++) {
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = digits[i];
        current->next = NULL;
    }
    return dummy->next;
}

int main() {
    int num_digits_l1, num_digits_l2;
    scanf(""%d %d"", &num_digits_l1, &num_digits_l2);

    int digits_l1[num_digits_l1];
    int digits_l2[num_digits_l2];

    for (int i = 0; i < num_digits_l1; i++) {
        scanf(""%d"", &digits_l1[i]);
    }

    for (int i = 0; i < num_digits_l2; i++) {
        scanf(""%d"", &digits_l2[i]);
    }

    struct ListNode* l1 = create_linked_list(digits_l1, num_digits_l1);
    struct ListNode* l2 = create_linked_list(digits_l2, num_digits_l2);

    struct ListNode* result = add_linked_lists(l1, l2);

    // Print the result
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}"
22732794,PES1UG22CS298,Reversing a Linked List 1,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

struct ListNode* reverseLinkedList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    
    while (current != NULL) {
        struct ListNode* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    
    return prev;
}

void printLinkedListValues(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        current = current->next;
    }
}

int main() {
    
    int num_nodes;
    scanf(""%d"", &num_nodes);

    
    struct ListNode* head = NULL;
    struct ListNode* current = NULL;
    for (int i = 0; i < num_nodes; i++) {
        int val;
        scanf(""%d"", &val);
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->val = val;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = head;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }

    
    struct ListNode* reversedHead = reverseLinkedList(head);

  
    printLinkedListValues(reversedHead);

    
    while (reversedHead != NULL) {
        struct ListNode* temp = reversedHead;
        reversedHead = reversedHead->next;
        free(temp);
    }

    return 0;
}

"
22732794,PES1UG22CS298,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int value;
    struct Node* next;
};

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry != 0) {
        int sum = carry;
        if (list1 != NULL) {
            sum += list1->value;
            list1 = list1->next;
        }
        if (list2 != NULL) {
            sum += list2->value;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum %= 10;

        if (result == NULL) {
            result = (struct Node*)malloc(sizeof(struct Node));
            result->value = sum;
            result->next = NULL;
            current = result;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->value = sum;
            current->next = NULL;
        }
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;
    struct Node* current1 = NULL;
    struct Node* current2 = NULL;

    for (int i = 0; i < n1; i++) {
        int value;
        scanf(""%d"", &value);

        if (list1 == NULL) {
            list1 = (struct Node*)malloc(sizeof(struct Node));
            list1->value = value;
            list1->next = NULL;
            current1 = list1;
        } else {
            current1->next = (struct Node*)malloc(sizeof(struct Node));
            current1 = current1->next;
            current1->value = value;
            current1->next = NULL;
        }
    }

    for (int i = 0; i < n2; i++) {
        int value;
        scanf(""%d"", &value);

        if (list2 == NULL) {
            list2 = (struct Node*)malloc(sizeof(struct Node));
            list2->value = value;
            list2->next = NULL;
            current2 = list2;
        } else {
            current2->next = (struct Node*)malloc(sizeof(struct Node));
            current2 = current2->next;
            current2->value = value;
            current2->next = NULL;
        }
    }

    struct Node* sumList = addLists(list1, list2);

    printList(sumList);

    while (list1 != NULL) {
        struct Node* temp = list1;
        list1 = list1->next;
        free(temp);
    }
    while (list2 != NULL) {
        struct Node* temp = list2;
        list2 = list2->next;
        free(temp);
    }
    while (sumList != NULL) {
        struct Node* temp = sumList;
        sumList = sumList->next;
        free(temp);
    }

    return 0;
}
"
22732869,PES1UG22CS247,Reversing a Linked List 1,11.25,"#include <stdio.h> 
#include <string.h> 
#include <math.h> 
#include <stdlib.h> 
typedef struct node 
{ 
    struct node *link; 
    int data; 
}NODE; 
NODE *head=NULL;
void rev()
{
    NODE *a=head;
    NODE *b=NULL;
    while(a!=NULL)
    {
        NODE *c=a->link;
        a->link=b;
        b=a;
        a=c;
    }
    head=b;
    NODE *p=head;
    while(p!=NULL)
    {
        printf(""%d"",p->data);
        p=p->link;
    }
}
int main()  
{     
    int n;     
    scanf(""%d"",&n);     
    if(n>1000||n<-1000)     
    {         
        printf(""Error"");         
        return -1;     
    }     
    NODE *tmp=(NODE*)malloc(n*sizeof(NODE));
    head=tmp;
    for(int i=0;i<n;i++)     
    {        
        scanf(""%d"",&(tmp+i)->data);
        if(i==n-1)
        {
            (tmp+i)->link=NULL;
        }
        else
        {
            (tmp+i)->link=(tmp+i+1);
        }
    }     
    rev();
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */         
    return 0; 
}
"
22732869,PES1UG22CS247,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

struct Node* addLinkedLists(struct Node* num1, struct Node* num2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (num1 != NULL || num2 != NULL || carry != 0) {
        int sum = carry;
        if (num1 != NULL) {
            sum += num1->value;
            num1 = num1->next;
        }
        if (num2 != NULL) {
            sum += num2->value;
            num2 = num2->next;
        }

        carry = sum / 10;
        sum %= 10;

        struct Node* newNode = createNode(sum);
        if (result == NULL) {
            result = newNode;
            current = result;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    return result;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct Node* num1 = NULL;
    struct Node* num2 = NULL;

    for (int i = 0; i < num_digits1; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num1 == NULL) {
            num1 = createNode(digit);
        } else {
            struct Node* current = num1;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    for (int i = 0; i < num_digits2; ++i) {
        int digit;
        scanf(""%d"", &digit);
        if (num2 == NULL) {
            num2 = createNode(digit);
        } else {
            struct Node* current = num2;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = createNode(digit);
        }
    }

    struct Node* sum = addLinkedLists(num1, num2);
    printLinkedList(sum);

    // Free allocated memory
    while (num1 != NULL) {
        struct Node* temp = num1;
        num1 = num1->next;
        free(temp);
    }
    while (num2 != NULL) {
        struct Node* temp = num2;
        num2 = num2->next;
        free(temp);
    }
    while (sum != NULL) {
        struct Node* temp = sum;
        sum = sum->next;
        free(temp);
    }

    return 0;
}
    
"
22734383,PES1UG22CS297,Reversing a Linked List 1,15,"#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

struct node{
    int val;
    struct node *next;
};
struct node *rll(struct node *head){
    struct node *prev=NULL;
    struct node *cur=head;
    while(cur!=NULL){
        struct node *newnode=cur->next;
        cur->next=prev;
        prev=cur;
        cur=newnode;
    }
    return prev;
}
void pll(struct node *head){
    struct node *cur=head;
    while(cur!=NULL){
        printf(""%d"",cur->val);
        cur=cur->next;
    }
}
int main(){
    int num;
    int val;
    scanf(""%d"",&num);
    if (num < 0 || num > 1000) {
        printf(""Invalid number of nodes\n"");
        return 1;
    }
    struct  node *head=NULL;
    struct node *prev=NULL;
    for(int i=0;i<num;i++){
        
        scanf(""%d"",&val);
        if (val < -1000 || val > 1000) {
            printf(""Invalid node value\n"");
            return 1;
        }
        struct node *newnode=(struct node *)malloc(sizeof(struct node));
        newnode->val=val;
        newnode->next=NULL;
        if(prev==NULL){
            head=newnode;
        }
        else{
            prev->next=newnode;
        }
        prev=newnode;
    }
    struct node* reversedHead = rll(head);
    pll(reversedHead);
    
    
    return 0;
}"
22734383,PES1UG22CS297,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct ln {
    int val;
    struct ln *next;
};

struct ln* add_linked_lists(struct ln* l1, struct ln* l2) {
    struct ln* a = (struct ln*)malloc(sizeof(struct ln));
    struct ln* cur = a;
    int carry = 0;
    
    while (l1 || l2 || carry) {
        int x = l1 ? l1->val : 0;
        int y = l2 ? l2->val : 0;
        
        int sum = x + y + carry;
        carry = sum / 10;
        
        cur->next = (struct ln*)malloc(sizeof(struct ln));
        cur = cur->next;
        cur->val = sum % 10;
        cur->next = NULL;
        
        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }
    
    struct ln* result = a->next;
    free(a);
    return result;
}

struct ln* crll(int* digits, int num) {
    struct ln* a = (struct ln*)malloc(sizeof(struct ln));
    struct ln* cur = a;
    for (int i = 0; i < num; i++) {
        cur->next = (struct ln*)malloc(sizeof(struct ln));
        cur = cur->next;
        cur->val = digits[i];
        cur->next = NULL;
    }
    return a->next;
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    int d1[n1];
    int d2[n2];

    for (int i = 0; i < n1; i++) {
        scanf(""%d"", &d1[i]);
    }

    for (int i = 0; i < n2; i++) {
        scanf(""%d"", &d2[i]);
    }

    struct ln* l1 = crll(d1, n1);
    struct ln* l2 = crll(d2, n2);

    struct ln* result = add_linked_lists(l1, l2);
    while (result) {
        printf(""%d "", result->val);
        result = result->next;
    }

    return 0;
}"
22735048,PES1UG22CS283,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode* next;
};

struct ListNode* reverseLinkedList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    
    while (current != NULL) {
        struct ListNode* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    
    return prev;
}

void printLinkedListValues(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d"", current->val);
        current = current->next;
    }
}

int main() {
    
    int num_nodes;
    scanf(""%d"", &num_nodes);

    
    struct ListNode* head = NULL;
    struct ListNode* current = NULL;
    for (int i = 0; i < num_nodes; i++) {
        int val;
        scanf(""%d"", &val);
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->val = val;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = head;
        } else {
            current->next = newNode;
            current = current->next;
        }
    }

    
    struct ListNode* reversedHead = reverseLinkedList(head);

  
    printLinkedListValues(reversedHead);

    
    while (reversedHead != NULL) {
        struct ListNode* temp = reversedHead;
        reversedHead = reversedHead->next;
        free(temp);
    }

    return 0;
}"
22735048,PES1UG22CS283,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

struct Node* addLists(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    int carry = 0;

    while (list1 != NULL || list2 != NULL || carry != 0) {
        int sum = carry;
        if (list1 != NULL) {
            sum += list1->value;
            list1 = list1->next;
        }
        if (list2 != NULL) {
            sum += list2->value;
            list2 = list2->next;
        }

        carry = sum / 10;
        sum %= 10;

        if (result == NULL) {
            result = (struct Node*)malloc(sizeof(struct Node));
            result->value = sum;
            result->next = NULL;
            current = result;
        } else {
            current->next = (struct Node*)malloc(sizeof(struct Node));
            current = current->next;
            current->value = sum;
            current->next = NULL;
        }
    }

    return result;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        if (current->next != NULL) {
            printf("" "");
        }
        current = current->next;
    }
}

int main() {
    int n1, n2;
    scanf(""%d %d"", &n1, &n2);

    struct Node* list1 = NULL;
    struct Node* list2 = NULL;
    struct Node* current1 = NULL;
    struct Node* current2 = NULL;

    for (int i = 0; i < n1; i++) {
        int value;
        scanf(""%d"", &value);

        if (list1 == NULL) {
            list1 = (struct Node*)malloc(sizeof(struct Node));
            list1->value = value;
            list1->next = NULL;
            current1 = list1;
        } else {
            current1->next = (struct Node*)malloc(sizeof(struct Node));
            current1 = current1->next;
            current1->value = value;
            current1->next = NULL;
        }
    }

    for (int i = 0; i < n2; i++) {
        int value;
        scanf(""%d"", &value);

        if (list2 == NULL) {
            list2 = (struct Node*)malloc(sizeof(struct Node));
            list2->value = value;
            list2->next = NULL;
            current2 = list2;
        } else {
            current2->next = (struct Node*)malloc(sizeof(struct Node));
            current2 = current2->next;
            current2->value = value;
            current2->next = NULL;
        }
    }

    struct Node* sumList = addLists(list1, list2);

    printList(sumList);

    // Clean up memory
    while (list1 != NULL) {
        struct Node* temp = list1;
        list1 = list1->next;
        free(temp);
    }
    while (list2 != NULL) {
        struct Node* temp = list2;
        list2 = list2->next;
        free(temp);
    }
    while (sumList != NULL) {
        struct Node* temp = sumList;
        sumList = sumList->next;
        free(temp);
    }

    return 0;
}"
22825386,pes1202201338,Reversing a Linked List 1,15,"#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* reverseLinkedList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* current = head;
    struct ListNode* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

void printLinkedList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf(""%d"", current->value);
        current = current->next;
    }
}

int main() {
    int numNodes;
    scanf(""%d"", &numNodes);

    struct ListNode* head = NULL;
    struct ListNode* current;

    for (int i = 0; i < numNodes; i++) {
        int value;
        scanf(""%d"", &value);
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->value = value;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            current = newNode;
        } else {
            current->next = newNode;
            current = newNode;
        }
    }

    struct ListNode* reversedHead = reverseLinkedList(head);
    printLinkedList(reversedHead);

    return 0;
}
"
22825386,pes1202201338,ADD TWO NUMBERS 104,15,"#include <stdio.h>
#include <stdlib.h>

struct node {
    int value;
    struct node* next;
};

struct node* add_linked_lists(struct node* l1, struct node* l2) {
    struct node* dummy_head = (struct node*)malloc(sizeof(struct node));
    struct node* current = dummy_head;
    int carry = 0;

    while (l1 || l2 || carry) {
        int total = carry;
        if (l1) {
            total += l1->value;
            l1 = l1->next;
        }
        if (l2) {
            total += l2->value;
            l2 = l2->next;
        }

        carry = total / 10;
        current->next = (struct node*)malloc(sizeof(struct node));
        current = current->next;
        current->value = total % 10;
        current->next = NULL;
    }

    struct node* result_head = dummy_head->next;
    free(dummy_head);
    return result_head;
}

void print_linked_list_with_separation(struct node* head) {
    struct node* current = head;
    while (current) {
        printf(""%d "", current->value);
        current = current->next;
    }
}

int main() {
    int num_digits1, num_digits2;
    scanf(""%d %d"", &num_digits1, &num_digits2);

    struct node* l1 = NULL;
    struct node* current1 = NULL;

    for (int i = 0; i < num_digits1; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct node* new_node = (struct node*)malloc(sizeof(struct node));
        new_node->value = digit;
        new_node->next = NULL;

        if (l1 == NULL) {
            l1 = new_node;
            current1 = new_node;
        } else {
            current1->next = new_node;
            current1 = new_node;
        }
    }

    struct node* l2 = NULL;
    struct node* current2 = NULL;

    for (int i = 0; i < num_digits2; i++) {
        int digit;
        scanf(""%d"", &digit);
        struct node* new_node = (struct node*)malloc(sizeof(struct node));
        new_node->value = digit;
        new_node->next = NULL;

        if (l2 == NULL) {
            l2 = new_node;
            current2 = new_node;
        } else {
            current2->next = new_node;
            current2 = new_node;
        }
    }

    struct node* result_head = add_linked_lists(l1, l2);
    print_linked_list_with_separation(result_head);

    
    while (result_head) {
        struct node* temp = result_head;
        result_head = result_head->next;
        free(temp);
    }

    return 0;
}"