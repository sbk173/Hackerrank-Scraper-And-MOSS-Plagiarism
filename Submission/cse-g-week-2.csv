studentId,studentUserName,challenge,score,code
22690571,PES1UG22CS394,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

typedef struct Term Polynomial;


void insertTerm(Polynomial** poly, int coefficient, int exponent) {
    Polynomial* newTerm = (Polynomial*)malloc(sizeof(Polynomial));
    newTerm->coefficient = coefficient;
    newTerm->exponent = exponent;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } 
    else {
        Polynomial* current = *poly;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newTerm;
    }
}


Polynomial* addPolynomials(Polynomial* poly1, Polynomial* poly2) {
    Polynomial* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } 
        else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Append any remaining terms from poly1 and poly2
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void displayPolynomial(Polynomial* poly) {
    if (poly == NULL) {
        printf(""0\n"");
        return;
    }

    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
       
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Polynomial* poly1 = NULL;
    Polynomial* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);
        if (i < n) {
            insertTerm(&poly1, coefficient, exponent);
        } else {
            insertTerm(&poly2, coefficient, exponent);
        }
    }

    Polynomial* result = addPolynomials(poly1, poly2);

    displayPolynomial(result);

    return 0;
}"
22690571,PES1UG22CS394,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

void insert(struct Node **head, int data) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node *current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node *findMidpoint(struct Node *head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node *slow = head;
    struct Node *fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

void splitLinkedList(struct Node *head, struct Node **first, struct Node **second) {
    struct Node *midpoint = findMidpoint(head);
    if (midpoint == NULL) {
        *first = NULL;
        *second = NULL;
        return;
    }

    *second = midpoint->next;
    midpoint->next = NULL;
    *first = head;
}

void printList(struct Node *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node *head = NULL;
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insert(&head, data);
    }

    struct Node *firstHalf, *secondHalf;
    splitLinkedList(head, &firstHalf, &secondHalf);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22690573,PES1UG22CS382,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// struct for term
struct T {
    int c;
    int exp;
    struct T* n;
};

// inserting term
void insert(struct T** p, int c, int exp) {
    struct T* newTerm = (struct T*)malloc(sizeof(struct T));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL) {
        *p = newTerm;
    } else {
        struct T* current = *p;
        while (current->n != NULL) {
            current = current->n;
        }
        current->n = newTerm;
    }
}

struct T* add(struct T* p1, struct T* p2) {
    struct T* result = NULL;
    struct T* current1 = p1;
    struct T* current2 = p2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            insert(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp) {
            insert(&result, current2->c, current2->exp);
            current2 = current2->n;
        } else {
            insert(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }
    
    while (current1 != NULL) {
        insert(&result, current1->c, current1->exp);
        current1 = current1->n;
    }
    
    while (current2 != NULL) {
        insert(&result, current2->c, current2->exp);
        current2 = current2->n;
    }
    
    return result;
}

// Function to print polynomial
void print(struct T* poly) {
    struct T* current = poly;
    while (current != NULL) {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct T* poly1 = NULL;
    struct T* poly2 = NULL;
    
    int coeff, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insert(&poly1, coeff, exp);
        } else {
            insert(&poly2, coeff, exp);
        }
    }
    
    struct T* result = add(poly1, poly2);
    print(result);
    
    return 0;
}"
22690573,PES1UG22CS382,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void append(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

// Function to find the midpoint of the linked list using fast pointers
struct Node* findMid(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head;

    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    // Populate the linked list
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        append(&head, data);
    }

    // Find the midpoint
    struct Node* midpoint = findMid(head);

    // Split the linked list into two parts
    struct Node* secondList = midpoint->next;
    midpoint->next = NULL;

    // Print the elements of the first list
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");

    // Print the elements of the second list
    current = secondList;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");

    return 0;
}
"
22690585,PES1UG22CS395,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int c;
    int exp;
    struct Term* n;
};

void insertTerm(struct Term** p, int c, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL) {
        *p = newTerm;
    } else {
        struct Term* current = *p;
        while (current->n != NULL) {
            current = current->n;
        }
        current->n = newTerm;
    }
}

struct Term* addPolynomials(struct Term* p1, struct Term* p2) {
    struct Term* result = NULL;
    struct Term* current1 = p1;
    struct Term* current2 = p2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            insertTerm(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp) {
            insertTerm(&result, current2->c, current2->exp);
            current2 = current2->n;
        } else {
            insertTerm(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }
    
    while (current1 != NULL) {
        insertTerm(&result, current1->c, current1->exp);
        current1 = current1->n;
    }
    
    while (current2 != NULL) {
        insertTerm(&result, current2->c, current2->exp);
        current2 = current2->n;
    }
    
    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22690585,PES1UG22CS395,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head;

    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

void splitLinkedList(struct Node* midNode, struct Node** firstHalf, struct Node** secondHalf) {
    if (midNode == NULL) {
        *firstHalf = NULL;
        *secondHalf = NULL;
        return;
    }

    *firstHalf = midNode->next;
    midNode->next = NULL;
    *secondHalf = *firstHalf;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&head, value);
    }

    struct Node* midNode = findMidpoint(head);
    struct Node* firstHalf = head;
    struct Node* secondHalf = midNode->next;
    midNode->next = NULL;

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22690589,PES1UG22CS417,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coeff;
    int exp;
    struct Term* next;
}s;


void insert(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coeff = coeff;
    newTerm->exp = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insert(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insert(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            int sumCoeff = poly1->coeff + poly2->coeff;
            insert(&result, sumCoeff, poly1->exp);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insert(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insert(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insert(&poly1, coeff, exp);
        } else {
            insert(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
"
22690591,PES1UG22CS410,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node 
{
    int coefficient;
    int power;
    struct Node* next;
};

struct Node* createNode(int coefficient, int power) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coefficient = coefficient;
    newNode->power = power;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node** head, int coefficient, int power) 
{
    struct Node* newNode = createNode(coefficient, power);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

void AddPolynomials(struct Node* poly_1, struct Node* poly_2, struct Node** result) {
    while (poly_1 != NULL && poly_2 != NULL) {
        if (poly_1->power == poly_2->power) {
            insertNode(result, poly_1->coefficient + poly_2->coefficient, poly_1->power);
            poly_1 = poly_1->next;
            poly_2 = poly_2->next;
        } else if (poly_1->power > poly_2->power) {
            insertNode(result, poly_1->coefficient, poly_1->power);
            poly_1 = poly_1->next;
        } else {
            insertNode(result, poly_2->coefficient, poly_2->power);
            poly_2 = poly_2->next;
        }
    }
    while (poly_1 != NULL) {
        insertNode(result, poly_1->coefficient, poly_1->power);
        poly_1 = poly_1->next;
    }
    while (poly_2 != NULL) {
        insertNode(result, poly_2->coefficient, poly_2->power);
        poly_2 = poly_2->next;
    }
}

void PrintPolynomial(struct Node* head) 
{
    while (head != NULL) {
        printf(""%d "", head->coefficient);
        head = head->next;
    }
    printf(""\n"");
}

int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    for (int i = 0; i < n + m; i++) {
        int coefficient, power;
        scanf(""%d %d"", &coefficient, &power);
        if (i < n) {
            insertNode(&poly1, coefficient, power);
        } else {
            insertNode(&poly2, coefficient, power);
        }
    }
    struct Node* result = NULL;
    AddPolynomials(poly1, poly2, &result);
    PrintPolynomial(result);    
    return 0;
}"
22690591,PES1UG22CS410,Divide Linked List 2,15,"#include <stdio.h>
#include<string.h>
#include<math.h>
#include <stdlib.h>
struct Node 
{
    int data;
    struct Node* next;
};
struct Node* createNode(int data) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
struct Node* insertEnd(struct Node* head, int data)
{
    struct Node* newNode = createNode(data);
    if (head == NULL) 
    {
        head = newNode;
    } 
    else 
    {
        struct Node* current = head;
        while (current->next != NULL) 
        {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}
struct Node* findMidpoint(struct Node* head) 
{
    if (head == NULL || head->next == NULL)
    {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;
    while (fast != NULL && fast->next != NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
struct Node* splitLinkedList(struct Node* head, struct Node* midpoint)
{
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;

    return secondPart;
}
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() 
{
    int n;
    scanf(""%d"", &n);
    struct Node* head = NULL;
    for (int i = 0; i < n; i++) 
    {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }
    struct Node* midpoint = findMidpoint(head);
    struct Node* second_Part = splitLinkedList(head, midpoint);
    printLinkedList(head);
    printLinkedList(second_Part);
    while (head != NULL) 
    {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }
    while (second_Part != NULL) 
    {
        struct Node* temp = second_Part;
        second_Part = second_Part->next;
        free(temp);
    }
    return 0;
}
"
22690594,PES1UG22CS413,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int power;
    struct Node* next;
};

struct Node* createNode(int coeff, int power) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->power = power;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node** head, int coeff, int power) {
    struct Node* newNode = createNode(coeff, power);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node** result) {
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->power == poly2->power) {
            insertNode(result, poly1->coeff + poly2->coeff, poly1->power);
            poly1 = poly1->next;
            poly2 = poly2->next;
        } else if (poly1->power > poly2->power) {
            insertNode(result, poly1->coeff, poly1->power);
            poly1 = poly1->next;
        } else {
            insertNode(result, poly2->coeff, poly2->power);
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertNode(result, poly1->coeff, poly1->power);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertNode(result, poly2->coeff, poly2->power);
        poly2 = poly2->next;
    }
}

void printPolynomial(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        if (i < n) {
            insertNode(&poly1, coeff, power);
        } else {
            insertNode(&poly2, coeff, power);
        }
    }

    struct Node* result = NULL;
    addPolynomials(poly1, poly2, &result);

    printPolynomial(result);

    return 0;
}"
22690594,PES1UG22CS413,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
struct Node* splitLinkedList(struct Node* head, struct Node* midpoint) {
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;

    return secondPart;
}
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }

    
    struct Node* midpoint = findMidpoint(head);

    
    struct Node* secondPart = splitLinkedList(head, midpoint);

    
    printLinkedList(head);
    printLinkedList(secondPart);

    
    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    while (secondPart != NULL) {
        struct Node* temp = secondPart;
        secondPart = secondPart->next;
        free(temp);
    }
    return 0;
}"
22690596,PES1UG22CS421,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node 
{
    int coefficient;
    int power;
    struct Node* next;
};

struct Node* createNode(int coefficient, int power) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coefficient = coefficient;
    newNode->power = power;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node** head, int coefficient, int power) 
{
    struct Node* newNode = createNode(coefficient, power);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

void AddPolynomials(struct Node* poly_1, struct Node* poly_2, struct Node** result) {
    while (poly_1 != NULL && poly_2 != NULL) {
        if (poly_1->power == poly_2->power) {
            insertNode(result, poly_1->coefficient + poly_2->coefficient, poly_1->power);
            poly_1 = poly_1->next;
            poly_2 = poly_2->next;
        } else if (poly_1->power > poly_2->power) {
            insertNode(result, poly_1->coefficient, poly_1->power);
            poly_1 = poly_1->next;
        } else {
            insertNode(result, poly_2->coefficient, poly_2->power);
            poly_2 = poly_2->next;
        }
    }
    while (poly_1 != NULL) {
        insertNode(result, poly_1->coefficient, poly_1->power);
        poly_1 = poly_1->next;
    }
    while (poly_2 != NULL) {
        insertNode(result, poly_2->coefficient, poly_2->power);
        poly_2 = poly_2->next;
    }
}

void PrintPolynomial(struct Node* head) 
{
    while (head != NULL) {
        printf(""%d "", head->coefficient);
        head = head->next;
    }
    printf(""\n"");
}

int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    for (int i = 0; i < n + m; i++) {
        int coefficient, power;
        scanf(""%d %d"", &coefficient, &power);
        if (i < n) {
            insertNode(&poly1, coefficient, power);
        } else {
            insertNode(&poly2, coefficient, power);
        }
    }
    struct Node* result = NULL;
    AddPolynomials(poly1, poly2, &result);
    PrintPolynomial(result);    
    return 0;
}
"
22690596,PES1UG22CS421,Divide Linked List 2,15,"#include <stdio.h>
#include<string.h>
#include<math.h>
#include <stdlib.h>
struct Node 
{
    int data;
    struct Node* next;
};
struct Node* Create_Node(int data) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
struct Node* Insert_End(struct Node* head, int data)
{
    struct Node* newNode = Create_Node(data);
    if (head == NULL) 
    {
        head = newNode;
    } 
    else 
    {
        struct Node* current = head;
        while (current->next != NULL) 
        {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}
struct Node* Find_Midpoint(struct Node* head) 
{
    if (head == NULL || head->next == NULL)
    {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;
    while (fast != NULL && fast->next != NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
struct Node* Split_LinkedList(struct Node* head, struct Node* midpoint)
{
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;

    return secondPart;
}
void Print_LinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() 
{
    int n;
    scanf(""%d"", &n);
    struct Node* head = NULL;
    for (int i = 0; i < n; i++) 
    {
        int value;
        scanf(""%d"", &value);
        head = Insert_End(head, value);
    }
    struct Node* midpoint = Find_Midpoint(head);
    struct Node* secondPart = Split_LinkedList(head, midpoint);
    Print_LinkedList(head);
    Print_LinkedList(secondPart);
    while (head != NULL) 
    {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }
    while (secondPart != NULL) 
    {
        struct Node* temp = secondPart;
        secondPart = secondPart->next;
        free(temp);
    }
    return 0;
}
"
22690598,PES1UG22CS416,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int c;
    int exp;
    struct Term* n;
};

void insertTerm(struct Term** p, int c, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL) {
        *p = newTerm;
    } else {
        struct Term* current = *p;
        while (current->n != NULL) {
            current = current->n;
        }
        current->n = newTerm;
    }
}

struct Term* addPolynomials(struct Term* p1, struct Term* p2) {
    struct Term* result = NULL;
    struct Term* current1 = p1;
    struct Term* current2 = p2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            insertTerm(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp) {
            insertTerm(&result, current2->c, current2->exp);
            current2 = current2->n;
        } else {
            insertTerm(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }
    
    while (current1 != NULL) {
        insertTerm(&result, current1->c, current1->exp);
        current1 = current1->n;
    }
    
    while (current2 != NULL) {
        insertTerm(&result, current2->c, current2->exp);
        current2 = current2->n;
    }
    
    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22690598,PES1UG22CS416,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        { 
              head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    return 0;
}"
22690626,PES1UG22CS374,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
typedef struct  node {
    int coefficient;
    int exponent;
    struct node *next;
}NODE;

// Function to insert a term into a polynomial linked list
void insertTerm(NODE **poly, int coeff, int exp) {
    NODE *newTerm = malloc(sizeof(NODE));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        NODE *curr = *poly;
        while (curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = newTerm;
    }
}

// Function to add two polynomials
NODE *addPolynomials(NODE *poly1,NODE *poly2) {
    NODE *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Append remaining terms, if any
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(NODE *poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    NODE *poly1 = NULL;
    NODE *poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } 
        else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    NODE *result = addPolynomials(poly1,poly2);
    printPolynomial(result);

    return 0;
}"
22690626,PES1UG22CS374,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        { 
              head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head, int n) {
    Node *p = head;
    while (p != NULL && n > 0) {
        printf(""%d "", p->data);
        p = p->next;
        n--;
    }
    printf(""\n"");
}

void printll2(Node *head, int n, int mid) {
    Node *p = head;
    int count = 0;
    while (p != NULL) {
        count++;
        if (count > mid) {
            printf(""%d"", p->data);
            if (count != n) {
                printf("" "");
            }
        }
        p = p->next;
    }
}

int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}"
22690671,PES1UG22CS414,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};
struct Term* createTerm(int coefficient, int exponent) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coefficient;
    newTerm->exponent = exponent;
    newTerm->next = NULL;
    return newTerm;
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    struct Term* tail = NULL;

    while (poly1 && poly2) {
        if (poly1->exponent > poly2->exponent) {
            if (!result) {
                result = tail = createTerm(poly1->coefficient, poly1->exponent);
            } else {
                tail->next = createTerm(poly1->coefficient, poly1->exponent);
                tail = tail->next;
            }
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            if (!result) {
                result = tail = createTerm(poly2->coefficient, poly2->exponent);
            } else {
                tail->next = createTerm(poly2->coefficient, poly2->exponent);
                tail = tail->next;
            }
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (!result) {
                result = tail = createTerm(sum, poly1->exponent);
            } else {
                tail->next = createTerm(sum, poly1->exponent);
                tail = tail->next;
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    while (poly1) {
        tail->next = createTerm(poly1->coefficient, poly1->exponent);
        tail = tail->next;
        poly1 = poly1->next;
    }
    while (poly2) {
        tail->next = createTerm(poly2->coefficient, poly2->exponent);
        tail = tail->next;
        poly2 = poly2->next;
    }

    return result;
}
void printPolynomial(struct Term* poly) {
    while (poly) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        if (i < n) {
            if (!poly1) {
                poly1 = createTerm(coeff, power);
            } else {
                struct Term* temp = poly1;
                while (temp->next) {
                    temp = temp->next;
                }
                temp->next = createTerm(coeff, power);
            }
        } else {
            if (!poly2) {
                poly2 = createTerm(coeff, power);
            } else {
                struct Term* temp = poly2;
                while (temp->next) {
                    temp = temp->next;
                }
                temp->next = createTerm(coeff, power);
            }
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    return 0;
}"
22690671,PES1UG22CS414,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
// Structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};
// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
// Function to insert a node at the end of the linked list
struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}
// Function to find the midpoint of a linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
// Function to split a linked list into two parts at the given node
struct Node* splitLinkedList(struct Node* head, struct Node* midpoint) {
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;

    return secondPart;
}
// Function to print the elements of a linked list
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    // Read node values and create the linked list
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }

    // Find the midpoint of the linked list
    struct Node* midpoint = findMidpoint(head);

    // Split the linked list into two parts at the midpoint
    struct Node* secondPart = splitLinkedList(head, midpoint);

    // Print the elements of both lists
    printLinkedList(head);
    printLinkedList(secondPart);

    // Free memory
    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    while (secondPart != NULL) {
        struct Node* temp = secondPart;
        secondPart = secondPart->next;
        free(temp);
    }
    return 0;
}"
22690730,nidhiravi04,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>




struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* curr = *poly;
        while (curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = newTerm;
    }
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
"
22690730,nidhiravi04,Divide Linked List 2,7.5,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Node {
    int data;
    struct Node* next;
};


void insertAtEnd(struct Node** head, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}


struct Node* findMidpoint(struct Node* head) {
    struct Node* slow = head;
    struct Node* fast = head;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}


void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insertAtEnd(&head, value);
    }

    struct Node* midpoint = findMidpoint(head);
    struct Node* secondHalf = midpoint->next;
    midpoint->next = NULL;

    printLinkedList(head);
    printLinkedList(secondHalf);

    return 0;
}
"
22691498,PES1UG22CS422,Polynomial Addition,15,"#include<stdio.h>
#include<stdlib.h>
#include<math.h>

typedef struct node
{
    int coeff;
    int powx;
    struct node *next;
} NODE;

typedef struct polynomial
{
    NODE *head;
    NODE *tail;
} POLY;

void initPoly(POLY *pl)
{
    pl->head = NULL;
    pl->tail = NULL;
}

void insertLast(POLY* pl, int cf, int px)
{
    NODE* newNode = (NODE*)malloc(sizeof(NODE));
    newNode->coeff = cf;
    newNode->powx = px;
    newNode->next = NULL;

    if(pl->head == NULL){
        pl->head = newNode;
        pl->tail = newNode;
    }
    else{
        pl->tail->next = newNode;
        pl->tail = newNode;
    }

}

void display(POLY* pl)
{
    NODE *p = pl->head;

    while(p != NULL){
        printf(""%d "", p->coeff);
        p = p->next;
    }
}

void addPoly(POLY *pl1, POLY *pl2, POLY *pl3)
{
    NODE *p = pl1->head, *q = pl2->head;
    int cf,px;

    while(p!= NULL && q!=NULL){
        if(p->powx == q->powx){
            cf= (p->coeff + q->coeff);
            px = p->powx;
            p = p->next; q = q->next;
        }
        else if(p->powx > q->powx){
            cf = p->coeff;
            px = p->powx;
            p = p->next;
        }
        else{
            cf = q->coeff;
            px = q->powx;
            q = q->next;
        }
        insertLast(pl3, cf, px);
    }

    while(p!=NULL){
        insertLast(pl3, p->coeff, p->powx);
        p = p->next;
    }
    while(q!=NULL){
        insertLast(pl3, q->coeff, q->powx);
        q = q->next;
    }
}

void destroyPoly(POLY *pl)
{
    NODE *p = pl->head;

    while(p != NULL){
        pl->head = p->next;
        free(p);
        p = pl->head;
    }
}

void createPoly(POLY *pl)
{
    int cf, powx;
    scanf(""%d %d"", &cf, &powx);
    insertLast(pl, cf , powx);
    
}

int main()
{
    POLY pobj1, pobj2, pobj3;
    
    initPoly(&pobj1),initPoly(&pobj2),initPoly(&pobj3);

    int t1, t2;
    scanf(""%d %d"",&t1, &t2);
    for(int i=0; i<t1; i++)
        createPoly(&pobj1);
    for(int i=0; i<t2; i++)
        createPoly(&pobj2);
    
    addPoly(&pobj1, &pobj2, &pobj3);
    display(&pobj3);

    destroyPoly(&pobj1);destroyPoly(&pobj2);destroyPoly(&pobj3);
    
    return 0;
}"
22691498,PES1UG22CS422,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int info;
    struct node *next;
}NODE;

typedef struct list
{
    NODE *head;
}LIST;

void initList(LIST* pl)
{
    pl->head = NULL;
}

void insertLast(LIST *pl, int ele)
{
    NODE* newNode = (NODE*)malloc(sizeof(NODE));
    newNode->info = ele;
    newNode->next = NULL;
    
    if(pl->head == NULL)
        pl->head = newNode;
    else{
        NODE *p = pl->head;
        while(p->next != NULL)
            p = p->next;
        p->next = newNode;
    }
}

void display(LIST *pl)
{
    if(pl->head == NULL)
        return;
    else{
        NODE *p = pl->head;
        while(p != NULL){
            printf(""%d "",p->info);
            p = p->next;
        }
        printf(""\n"");
    }
}

void split(LIST *pl1, LIST *pl2, LIST *pl3)
{
    NODE* p = pl1->head, *q = pl1->head;
    while(p->next != NULL && p->next->next != NULL){
        q = q->next;
        p = p->next->next;
    }
    pl2->head = pl1->head;
    pl3->head = q->next;
    q->next = NULL;
}

int main() {
    LIST lobj1, lobj2, lobj3;
    initList(&lobj1); initList(&lobj2); initList(&lobj3);
    
    int n,ele;
    scanf(""%d"",&n);
    
    for(int i=0; i<n; i++){
        scanf(""%d"",&ele);
        insertLast(&lobj1, ele);
    }
    
    split(&lobj1, &lobj2, &lobj3);
    
    display(&lobj2);
    display(&lobj3);
    return 0;
}
"
22695098,PES1UG22CS392,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int coeff;
    int pow;
    struct node *next;
} NODE;

typedef struct polynomial
{
    NODE *head;
} POLYNOMIAL;

NODE* createterm(int cf, int pw)
{
    NODE *newNode = malloc(sizeof(NODE));
    newNode->coeff = cf;
    newNode->pow = pw;
    newNode->next = NULL;
    return newNode;
}

void sorted_sll(POLYNOMIAL *poly, int cf, int pw)
{
    NODE *p = poly->head, *q = NULL;
    NODE *newnode = createterm(cf,pw);
    if (poly->head == NULL)
    {
        poly->head = newnode;
        return;
    }
    for (; p != NULL && p->pow > newnode->pow ; q = p, p = p -> next);

    newnode->next = p;
    if ( q != NULL)
        q->next = newnode;
    else
        poly->head = newnode;
}

void display(POLYNOMIAL *pl)
{
    NODE *p = pl->head;
    for (; p->next != NULL ; p = p->next)
    {
        printf(""%d "",p->coeff);
    } 
    printf(""%d"",p->coeff);
}

void insertLast(POLYNOMIAL *pl, int cf, int pw)
{
    NODE *newNode = malloc(sizeof(NODE)), *x;
    newNode->coeff = cf;
    newNode->pow = pw;
    newNode->next = NULL;

    if (pl->head ==  NULL)
    {
        pl->head = newNode;
    }
    else
    {   
        for (x = pl->head ; x->next != NULL ; x = x->next);
        x->next = newNode;
    }
}

void addPolynomial(POLYNOMIAL *pl1, POLYNOMIAL *pl2, POLYNOMIAL *pl3)
{
    NODE *p = pl1->head;
    NODE *q = pl2->head;
    int cf, pw;

    while (p != NULL && q != NULL)
    {
        if (p->pow == q->pow)
        {
            pw = p->pow;
            cf = p->coeff + q->coeff;
            p = p->next;
            q = q->next;
        }
        else if (p->pow > q->pow)
        {
            cf = p->coeff;
            pw = p->pow;
            p = p->next;
        }
        else
        {
            cf = q->coeff;
            pw = q->pow;
            q = q->next; 
        }
        insertLast(pl3, cf, pw);
    }

    for (;p != NULL; p = p->next) // for terms left in pl1
    {
        insertLast(pl3, p->coeff, p->pow);
    }

    for (;q != NULL; q = q->next) // for terms left in pl2
    {
        insertLast(pl3, q->coeff, q->pow);
    }
    
}

int main() {

    int n,m, cf,pw;
    POLYNOMIAL p1,p2,p3;
    p1.head = NULL;
    p2.head = NULL;
    p3.head = NULL;
    scanf(""%d %d"",&n, &m);
    
    for (int x = 0 ; x < n ; x++)
    {
        scanf(""%d %d"",&cf,&pw);
        sorted_sll(&p1,cf,pw);
    }

    for (int x = 0 ; x < m ; x++)
    {
        scanf(""%d %d"",&cf,&pw);
        sorted_sll(&p2,cf,pw);
    }
    
    addPolynomial(&p1, &p2, &p3);
    display(&p3);
    
    return 0;
}
"
22695098,PES1UG22CS392,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int info;
    struct node *next;
}NODE;

NODE* createNode(int ele)
{
    NODE* newNode = malloc(sizeof(NODE));
    newNode->info = ele;
    newNode->next = NULL;
    return newNode;
}

NODE* insert(NODE* head, int ele)
{
    NODE *newNode = createNode(ele),*x;
    if (head == NULL)
    {
        head = newNode;
        return head;
    }

    for (x = head ; x->next != NULL ; x = x->next);
    x->next = newNode;
    return head;
}


void display(NODE* head)
{
    if (head == NULL)
    {
        return;
    }
    else
    {
    NODE *x;
    for (x = head ; x != NULL ; x = x->next)
    {
        printf(""%d "",x->info);
    }
    printf(""\n"");
    }
}

NODE* divideList(NODE *head)
{
    NODE *p = head, *q = head->next, *x;
    
    for (; q != NULL && q->next != NULL ; p = p->next, q = q->next->next);
    x = p->next;
    p->next = NULL;
    return x;
}

int main() {

    NODE *head1 = NULL;
    NODE *head2 = NULL;

    int ele,n;
    
    scanf(""%d"",&n);
    
    for (int x = 0 ; x < n ; x++)
    {
        scanf(""%d"",&ele);
        head1 = insert(head1,ele);
    }
    
    head2 = divideList(head1);
    
    display(head1);
    display(head2);
    
    return 0;
}
"
22696009,PES1UG22CS423,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* curr = *poly;
        while (curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = newTerm;
    }
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}"
22696009,PES1UG22CS423,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}

struct Node* splitLinkedList(struct Node* head, struct Node* midpoint) {
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;

    return secondPart;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }

    struct Node* midpoint = findMidpoint(head);

    struct Node* secondPart = splitLinkedList(head, midpoint);

    printLinkedList(head);
    printLinkedList(secondPart);

    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    while (secondPart != NULL) {
        struct Node* temp = secondPart;
        secondPart = secondPart->next;
        free(temp);
    }
    return 0;
}"
22696073,PES1UG22CS375,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>





struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* curr = *poly;
        while (curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = newTerm;
    }
}

struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}

void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}
"
22696073,PES1UG22CS375,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}

struct Node* splitLinkedList(struct Node* head, struct Node* midpoint) {
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;

    return secondPart;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

  
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }

  
    struct Node* midpoint = findMidpoint(head);

   
    struct Node* secondPart = splitLinkedList(head, midpoint);


    printLinkedList(head);
    printLinkedList(secondPart);


    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    while (secondPart != NULL) {
        struct Node* temp = secondPart;
        secondPart = secondPart->next;
        free(temp);
    }
    return 0;
}
"
22697110,PES1UG22CS419,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct Term {
    int coeff;
    int exp;
    struct Term* next;
} Term;

// Function to insert a new term into the polynomial linked list
void insertTerm(Term** poly, int coeff, int exp) {
    Term* newTerm = (Term*)malloc(sizeof(Term));
    newTerm->coeff = coeff;
    newTerm->exp = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

// Function to add two polynomials represented as linked lists
Term* addPolynomials(Term* poly1, Term* poly2) {
    Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertTerm(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertTerm(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            int sumCoeff = poly1->coeff + poly2->coeff;
            if (sumCoeff != 0) {
                insertTerm(&result, sumCoeff, poly1->exp);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Add any remaining terms from both polynomials
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }

    return result;
}

// Function to display a polynomial
void displayPolynomial(Term* poly) {
    if (poly == NULL) {
        printf(""0"");
    } else {
        while (poly != NULL) {
            printf(""%d "", poly->coeff);
            poly = poly->next;
        }
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term* poly1 = NULL;
    Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }


    Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);

    return 0;
}"
22697110,PES1UG22CS419,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

// Define the structure for a linked list node
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to insert a new node at the end of the linked list
void insertNode(Node** head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to find the midpoint of the linked list using fast and slow pointers
Node* findMidpoint(Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    Node* slow = head;
    Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

// Function to split the linked list into two parts at the midpoint
void splitLinkedList(Node* head, Node** firstHalf, Node** secondHalf) {
    Node* midpoint = findMidpoint(head);
    *firstHalf = head;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}

// Function to print the elements of a linked list
void printLinkedList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    Node* head = NULL;

    for (int i = 0; i < n; ++i) {
        int value;
        scanf(""%d"", &value);
        insertNode(&head, value);
    }

    Node* firstHalf = NULL;
    Node* secondHalf = NULL;

    splitLinkedList(head, &firstHalf, &secondHalf);

   
    printLinkedList(firstHalf);

    
    printLinkedList(secondHalf);

    return 0;
}"
22697362,PES1UG22CS427,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    if (*poly == NULL) {
        *poly = newNode;
    } else {
        struct Node* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node** resultPoly) {
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent == poly2->exponent) {
            insertTerm(resultPoly, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        } else if (poly1->exponent > poly2->exponent) {
            insertTerm(resultPoly, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else {
            insertTerm(resultPoly, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(resultPoly, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(resultPoly, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    
    for (int i = 0; i < n; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly1, coeff, exp);
    }
    
    for (int i = 0; i < m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly2, coeff, exp);
    }

    struct Node* resultPoly = NULL;
    addPolynomials(poly1, poly2, &resultPoly);

    printPolynomial(resultPoly);

    return 0;
}"
22697362,PES1UG22CS427,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void splitLinkedList(struct Node* head, struct Node** firstHalf, struct Node** secondHalf) {
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *firstHalf = head;
    *secondHalf = slow->next;
    slow->next = NULL;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++) {
        int val;
        scanf(""%d"", &val);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = val;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    struct Node* firstHalf;
    struct Node* secondHalf;

    splitLinkedList(head, &firstHalf, &secondHalf);

    printLinkedList(firstHalf);
    printLinkedList(secondHalf);

    return 0;
}"
22707636,PES1UG22CS389,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int exp;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->exp = exp;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    if (*poly == NULL || exp > (*poly)->exp) {
        newNode->next = *poly;
        *poly = newNode;
    } else {
        struct Node* temp = *poly;
        while (temp->next != NULL && temp->next->exp > exp) {
            temp = temp->next;
        }
        newNode->next = temp->next;
        temp->next = newNode;
    }
}

struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;

    while (poly1 != NULL || poly2 != NULL) {
        int coeff;
        int exp;

        if (poly1 != NULL && poly2 != NULL && poly1->exp == poly2->exp) {
            coeff = poly1->coeff + poly2->coeff;
            exp = poly1->exp;
            poly1 = poly1->next;
            poly2 = poly2->next;
        } else if (poly1 != NULL && (poly2 == NULL || poly1->exp > poly2->exp)) {
            coeff = poly1->coeff;
            exp = poly1->exp;
            poly1 = poly1->next;
        } else {
            coeff = poly2->coeff;
            exp = poly2->exp;
            poly2 = poly2->next;
        }

        insertTerm(&result, coeff, exp);
    }

    return result;
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Node* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22707636,PES1UG22CS389,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head;

    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

void splitLinkedList(struct Node* midNode, struct Node** firstHalf, struct Node** secondHalf) {
    if (midNode == NULL) {
        *firstHalf = NULL;
        *secondHalf = NULL;
        return;
    }

    *firstHalf = midNode->next;
    midNode->next = NULL;
    *secondHalf = *firstHalf;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&head, value);
    }

    struct Node* midNode = findMidpoint(head);
    struct Node* firstHalf = head;
    struct Node* secondHalf = midNode->next;
    midNode->next = NULL;

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22711064,PES1UG22CS393,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int coeff;
    int powx;
    struct node *next;
}NODE;

typedef struct polynomial
{
    NODE *head;
}POLYNOMIAL;

void initPolynomial(POLYNOMIAL *pl)
{
    pl->head = NULL;
}

void insertLast(POLYNOMIAL *pl, int cf, int px)
{
    NODE *newNode = malloc(sizeof(NODE));
    newNode->coeff = cf;
    newNode->powx = px;
    newNode->next = NULL;
    
    if(pl->head == NULL)
    {
        pl->head = newNode;
    }
    else
    {
        NODE *p = pl->head;
        while(p->next != NULL)
            p = p->next;
        
        p->next = newNode;
    }
}

void display(POLYNOMIAL *pl)
{
    NODE *p = pl->head;
    
    while(p->next != NULL)
    {
        printf(""%d "",p->coeff);
        p = p->next;
    }
    printf(""%d"",p->coeff);
}

void addPolynomial(POLYNOMIAL *pl1, POLYNOMIAL *pl2, POLYNOMIAL *pl3)
{
    NODE *p = pl1->head;
    NODE *q = pl2->head;
    
    int cf,px;
    
    while(p!= NULL && q!= NULL)
    {
        
        if(p->powx == q->powx)
        {
            cf = p->coeff + q->coeff;
            px = p->powx;
            p = p->next;
            q = q->next;
        }
        else if(p->powx > q->powx)
        {
            cf = p->coeff;
            px = p->powx;
            p = p->next;
        }
        else
        {
            cf = q->coeff;
            px = q->powx;
            q = q->next;
        }
        insertLast(pl3,cf,px);
    }
    
    while(p!=NULL)    //If terms are left out in polynomial1
    {
        insertLast(pl3,p->coeff,p->powx);
        p=p->next;
    }
    
    while(q!=NULL)        //If terms are left out in polynomial2
    {
        insertLast(pl3,q->coeff,q->powx);
        q=q->next;
    }
}

void createPolynomial(POLYNOMIAL *pl, int n)
{
    int cf,px;
    for(int i = 0; i < n; i++)
    {
        scanf(""%d %d"",&cf,&px);
        insertLast(pl,cf,px);
    }
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    POLYNOMIAL pl1,pl2,pl3;
    
    initPolynomial(&pl1);
    initPolynomial(&pl2);
    initPolynomial(&pl3);
    
    int n,m;
    scanf(""%d %d"",&n,&m);
    
    createPolynomial(&pl1,n);
    createPolynomial(&pl2,m);
    
    addPolynomial(&pl1, &pl2, &pl3);
    display(&pl3);
    return 0;
}
"
22711064,PES1UG22CS393,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
// Structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};
// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
// Function to insert a node at the end of the linked list
struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}
// Function to find the midpoint of a linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
// Function to split a linked list into two parts at the given node
struct Node* splitLinkedList(struct Node* head, struct Node* midpoint) {
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;

    return secondPart;
}
// Function to print the elements of a linked list
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    // Read node values and create the linked list
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }

    // Find the midpoint of the linked list
    struct Node* midpoint = findMidpoint(head);

    // Split the linked list into two parts at the midpoint
    struct Node* secondPart = splitLinkedList(head, midpoint);

    // Print the elements of both lists
    printLinkedList(head);
    printLinkedList(secondPart);

    // Free memory
    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    while (secondPart != NULL) {
        struct Node* temp = secondPart;
        secondPart = secondPart->next;
        free(temp);
    }
    return 0;
}"
22711610,PES1UG22CS420,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
typedef struct node
{
    int coeff;
    int powx;
    struct node *next;
} NODE;

typedef struct polynomial
{
    NODE *head;
} POLYNOMIAL;
void initPolynomial(POLYNOMIAL *pl);
void createPolynomial(POLYNOMIAL *pl1);
void insertLast(POLYNOMIAL *pl, int cf, int px);
void display(POLYNOMIAL *pl);
void addPolynomial(POLYNOMIAL *pl1, POLYNOMIAL *pl2, POLYNOMIAL *pl3);
int evalPolynomial(POLYNOMIAL *pl, int x);
void destroyPolynomial(POLYNOMIAL *pl);
int main()
{
    POLYNOMIAL pobj1;
    POLYNOMIAL pobj2;
    POLYNOMIAL pobj3;

    initPolynomial(&pobj1);
    initPolynomial(&pobj2);
    initPolynomial(&pobj3);
    
    int n,m;
    int cf,px;
    
    scanf(""%d %d"",&n,&m);

    for(int i=0;i<n;i++)
    {
        scanf(""%d %d"",&cf,&px);
        insertLast(&pobj1,cf,px);
    }
    
    for(int j=0;j<m;j++)
    {
        scanf(""%d %d"",&cf,&px);
        insertLast(&pobj2,cf,px);
    }

    addPolynomial(&pobj1, &pobj2, &pobj3);
    display(&pobj3);

    destroyPolynomial(&pobj1);
    destroyPolynomial(&pobj2);
    destroyPolynomial(&pobj3);
}

void initPolynomial(POLYNOMIAL *pl)
{
    pl->head = NULL;
}
void insertLast(POLYNOMIAL *pl, int cf, int px)
{
    NODE *newnode = malloc(sizeof(NODE));
    newnode->coeff = cf;
    newnode->powx = px;
    newnode->next = NULL;
    if (pl->head == NULL)
    {
        pl->head = newnode;
    }
    else
    {
        NODE *p = pl->head;
        while (p->next != NULL)
        {
            p = p->next;
        }
        p->next = newnode;
    }
}
void display(POLYNOMIAL *pl)
{
    NODE *p = pl->head;
    while (p!= NULL) // So that we dont get the + after the last
    {
        printf(""%d "", p->coeff);
        p = p->next;
    }
}
void destroyPolynomial(POLYNOMIAL *pl)
{
    NODE *p = pl->head;
    while (p != NULL)
    {
        pl->head = pl->head->next;
        // printf(""Term %dx^%d freed"", p->coeff, p->powx);
        free(p);
        p = pl->head;
    }
}
void addPolynomial(POLYNOMIAL *pl1, POLYNOMIAL *pl2, POLYNOMIAL *pl3)
{
    NODE *p = pl1->head;
    NODE *q = pl2->head;
    int cf, px;
    while (p != NULL && q != NULL)
    {
        if (p->powx == q->powx)
        {
            cf = p->coeff + q->coeff;
            px = p->powx;
            p = p->next;
            q = q->next;
        }
        else if (p->powx > q->powx)
        {
            cf = p->coeff;
            px = p->powx;
            p = p->next;
        }
        else
        {
            cf = q->coeff;
            px = q->powx;
            q = q->next;
        }
        insertLast(pl3, cf, px);
    }
    while (p != NULL) // If terms are left out in the first polynomial
    {
        insertLast(pl3, p->coeff, p->powx);
        p = p->next;
    }
    while (q != NULL) // If terms are left out in the second polynomial
    {
        insertLast(pl3, q->coeff, q->powx);
        q = q->next;
    }
}
"
22711610,PES1UG22CS420,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node{
    int info;
    struct node* next;
}NODE;

typedef struct list{
    NODE *head;
}LIST;
void initList(LIST *pl)
{
    pl->head=NULL;
}
NODE* createNode(int ele)
{
    NODE* newnode=malloc(sizeof(NODE));
    newnode->info=ele;
    newnode->next=NULL;
    return newnode;
}
void insertLast(LIST *pl,int ele)
{
    NODE *newNode = createNode(ele);
    if (pl->head == NULL)
    {
        pl->head = newNode;
    }
    else
    {
        NODE *p = pl->head;
        while (p->next != NULL)
        {
            p = p->next;
        }
        p->next = newNode;
    }
}
void split(LIST *pl1,LIST *pl2,LIST *pl3)
{
    if(pl1->head!=NULL)
    {
        NODE*q=pl1->head;
        NODE *p=pl1->head->next;
        while(p!=NULL && p->next!=NULL)
        {
            q=q->next;
            p=p->next->next;
        }
        
        pl2->head=pl1->head;
        pl3->head=q->next;
        q->next=NULL;
    }
}
void display(LIST *pl)
{
    NODE*p=pl->head;
    while(p!=NULL)
    {
        printf(""%d "",p->info);
        p=p->next;
    }
    printf(""\n"");
}
int main() {
    LIST lobj1;
    LIST lobj2;
    LIST lobj3;
    initList(&lobj1);
    initList(&lobj2);
    initList(&lobj3);
    int n;
    int ele;
    scanf(""%d"",&n);
    for(int i=0;i<n;i++)
    {
        scanf(""%d"",&ele);
        insertLast(&lobj1,ele);
    }
    split(&lobj1,&lobj2,&lobj3);
    display(&lobj2);
    display(&lobj3);
    return 0;
}
"
22714566,PES1UG22CS396,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int coeff;
    int pow;
    struct node* next;
}NODE;

typedef struct poly
{
    NODE* head;
}POLY;

void initPoly(POLY *);
NODE* createPoly(int, int);
void insertLast(POLY *, int, int);
void addPoly(POLY *, POLY *, POLY *);
void display(POLY *);

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    int n,m,coeff,pow;
    scanf(""%d %d"", &n, &m);
    POLY np, mp, newp;
    initPoly(&np);
    initPoly(&mp);
    initPoly(&newp);
    
    for (int i = 0; i < n; i++)
    {
        scanf(""%d %d"",&coeff,&pow);
        if (i == 0)
            np.head = createPoly(coeff,pow);
        else insertLast(&np,coeff,pow);
    }
    for (int i = 0; i < m; i++)
    {
        scanf(""%d %d"",&coeff,&pow);
        if (i == 0)
            mp.head = createPoly(coeff,pow);
        else insertLast(&mp,coeff,pow);
    }   
    

    addPoly(&np,&mp,&newp);
    display(&newp);
    return 0;
}

void initPoly(POLY *pl)
{
    pl->head = NULL;
}

NODE *createPoly(int coeff, int pow)
{
    NODE *newNode = (NODE *) malloc(sizeof(NODE));
    newNode->coeff = coeff;
    newNode->pow = pow;
    newNode->next = NULL;
    return newNode;
}

void insertLast(POLY *pl, int coeff, int pow)
{
    NODE* newNode = createPoly(coeff, pow);

    if (pl->head == NULL)
    {
        pl->head = newNode;
    }
    else
    {
        NODE *p = pl->head;
        while (p->next != NULL)
        {
            p = p->next;
        }
        
        p->next = newNode;
    }
    
}

void display(POLY *pl)
{
    NODE *p = pl->head;
    while (p != NULL)
    {
        printf(""%d "", p->coeff);
        p = p->next;
    }
    
}

void addPoly(POLY *np, POLY *mp, POLY *newp)
{
    NODE *p = np->head;
    NODE *q = mp->head;

    int cf, pw;

    while (p != NULL && q != NULL)
    {
        if (p->pow == q->pow)
        {
            cf = p->coeff + q->coeff;
            pw = p->pow;
            p = p->next;
            q = q->next;
        }
        else if (p->pow > q->pow)
        {
            cf = p->coeff;
            pw = p->pow;
            p = p->next;
        }
        else
        {
            cf = q->coeff;
            pw = q->pow;
            q = q->next;
        }
        insertLast(newp,cf,pw);
        
    }

    while (p != NULL)
    {
        insertLast(newp,p->coeff,p->pow);
        p = p->next;

    }

    while (q != NULL)
    {
        insertLast(newp,q->coeff,q->pow);
        q = q->next;
    }
    
}"
22714566,PES1UG22CS396,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int info;
    struct node* next;
}NODE;

typedef struct list
{
    NODE* head;
}LIST;

void initList(LIST *);
NODE* createNode(int);
void insertLast(LIST *, int);
void splitList(LIST *, int, LIST *, LIST *);
void display(LIST *);

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    int n, num;
    scanf(""%d"",&n);
    LIST lobj, lobj1, lobj2;
    initList(&lobj);

    for (int i = 0; i < n; i++)
    {
        scanf(""%d"",&num);
        if (i == 0)    
            lobj.head = createNode(num);
        else insertLast(&lobj,num);
    }

    splitList(&lobj,n,&lobj1,&lobj2);
    display(&lobj1);
    printf(""\n"");
    display(&lobj2);
    
    return 0;
}

void initList(LIST *pl)
{
    pl->head = NULL;
}

NODE *createNode(int ele)
{
    NODE *newNode = (NODE *) malloc(sizeof(NODE));
    newNode->info = ele;
    newNode->next = NULL;
    return newNode;
}

void insertLast(LIST *pl, int ele)
{
    NODE* newNode = createNode(ele);

    if (pl->head == NULL)
    {
        pl->head = newNode;
    }
    else
    {
        NODE *p = pl->head;
        while (p->next != NULL)
        {
            p = p->next;
        }
        
        p->next = newNode;
    }
    
}

void display(LIST *pl)
{
    NODE *p = pl->head;
    while (p != NULL)
    {
        printf(""%d "", p->info);
        p = p->next;
    }
}

void splitList(LIST *pl, int n, LIST *lobj1, LIST *lobj2)
{
    int split;
    if (n%2 == 0)
        split = n/2;
    else split = (n/2)+1;

    initList(lobj1);
    initList(lobj2);

    NODE *p = pl->head;
    lobj1->head = p;

    for (int i = 1; i < split; i++)
    {   
        p = p->next;
    }
    lobj2->head = p->next;
    p->next = NULL;
}"
22714573,PES1UG22CS386,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int coeff;
    int powx;
    struct node *next;
}NODE;

typedef struct polynomial
{
    NODE *head;
}POLYNOMIAL;

void initPolynomial(POLYNOMIAL *pl)
{
    pl->head = NULL;
}

void insertLast(POLYNOMIAL *pl, int cf, int px)
{
    NODE *newNode = malloc(sizeof(NODE));
    newNode->coeff = cf;
    newNode->powx = px;
    newNode->next = NULL;
    
    if(pl->head == NULL)
    {
        pl->head = newNode;
    }
    else
    {
        NODE *p = pl->head;
        while(p->next != NULL)
            p = p->next;
        
        p->next = newNode;
    }
}

void display(POLYNOMIAL *pl)
{
    NODE *p = pl->head;
    
    while(p->next != NULL)
    {
        printf(""%d "",p->coeff);
        p = p->next;
    }
    printf(""%d"",p->coeff);
}

void addPolynomial(POLYNOMIAL *pl1, POLYNOMIAL *pl2, POLYNOMIAL *pl3)
{
    NODE *p = pl1->head;
    NODE *q = pl2->head;
    
    int cf,px;
    
    while(p!= NULL && q!= NULL)
    {
        
        if(p->powx == q->powx)
        {
            cf = p->coeff + q->coeff;
            px = p->powx;
            p = p->next;
            q = q->next;
        }
        else if(p->powx > q->powx)
        {
            cf = p->coeff;
            px = p->powx;
            p = p->next;
        }
        else
        {
            cf = q->coeff;
            px = q->powx;
            q = q->next;
        }
        insertLast(pl3,cf,px);
    }
    
    while(p!=NULL)    //If terms are left out in polynomial1
    {
        insertLast(pl3,p->coeff,p->powx);
        p=p->next;
    }
    
    while(q!=NULL)        //If terms are left out in polynomial2
    {
        insertLast(pl3,q->coeff,q->powx);
        q=q->next;
    }
}

void createPolynomial(POLYNOMIAL *pl, int n)
{
    int cf,px;
    for(int i = 0; i < n; i++)
    {
        scanf(""%d %d"",&cf,&px);
        insertLast(pl,cf,px);
    }
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    POLYNOMIAL pl1,pl2,pl3;
    
    initPolynomial(&pl1);
    initPolynomial(&pl2);
    initPolynomial(&pl3);
    
    int n,m;
    scanf(""%d %d"",&n,&m);
    
    createPolynomial(&pl1,n);
    createPolynomial(&pl2,m);
    
    addPolynomial(&pl1, &pl2, &pl3);
    display(&pl3);
    return 0;
}"
22714573,PES1UG22CS386,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
// Structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};
// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
// Function to insert a node at the end of the linked list
struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}
// Function to find the midpoint of a linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
// Function to split a linked list into two parts at the given node
struct Node* splitLinkedList(struct Node* head, struct Node* midpoint) {
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;

    return secondPart;
}
// Function to print the elements of a linked list
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    // Read node values and create the linked list
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }

    // Find the midpoint of the linked list
    struct Node* midpoint = findMidpoint(head);

    // Split the linked list into two parts at the midpoint
    struct Node* secondPart = splitLinkedList(head, midpoint);

    // Print the elements of both lists
    printLinkedList(head);
    printLinkedList(secondPart);

    // Free memory
    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    while (secondPart != NULL) {
        struct Node* temp = secondPart;
        secondPart = secondPart->next;
        free(temp);
    }
    return 0;
}"
22714581,PES1UG22CS415,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    if (*poly == NULL) {
        *poly = newNode;
    } else {
        struct Node* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node** resultPoly) {
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent == poly2->exponent) {
            insertTerm(resultPoly, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        } else if (poly1->exponent > poly2->exponent) {
            insertTerm(resultPoly, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else {
            insertTerm(resultPoly, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(resultPoly, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(resultPoly, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    
    for (int i = 0; i < n; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly1, coeff, exp);
    }
    
    for (int i = 0; i < m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly2, coeff, exp);
    }

    struct Node* resultPoly = NULL;
    addPolynomials(poly1, poly2, &resultPoly);

    printPolynomial(resultPoly);

    return 0;
}
"
22714581,PES1UG22CS415,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void splitLinkedList(struct Node* head, struct Node** firstHalf, struct Node** secondHalf) {
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *firstHalf = head;
    *secondHalf = slow->next;
    slow->next = NULL;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++) {
        int val;
        scanf(""%d"", &val);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = val;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    struct Node* firstHalf;
    struct Node* secondHalf;

    splitLinkedList(head, &firstHalf, &secondHalf);

    printLinkedList(firstHalf);
    printLinkedList(secondHalf);

    return 0;
}"
22714594,PES1UG22CS430,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>


struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
};


void insertTerm(struct Term **poly, int coeff, int exp) {
    struct Term *newTerm = (struct Term *)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term *curr = *poly;
        while (curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = newTerm;
    }
}


struct Term *addPolynomials(struct Term *poly1, struct Term *poly2) {
    struct Term *result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void printPolynomial(struct Term *poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term *poly1 = NULL;
    struct Term *poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term *result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22714594,PES1UG22CS430,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

void insert(struct Node **head, int data) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node *current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node *findMidpoint(struct Node *head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node *slow = head;
    struct Node *fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

void splitLinkedList(struct Node *head, struct Node **first, struct Node **second) {
    struct Node *midpoint = findMidpoint(head);
    if (midpoint == NULL) {
        *first = NULL;
        *second = NULL;
        return;
    }

    *second = midpoint->next;
    midpoint->next = NULL;
    *first = head;
}

void printList(struct Node *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node *head = NULL;
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insert(&head, data);
    }

    struct Node *firstHalf, *secondHalf;
    splitLinkedList(head, &firstHalf, &secondHalf);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22714607,PES1UG22CS383,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Node {
    int coeff;
    int exp;
    struct Node* next;
};
void insert_term(struct Node** head, int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->exp = exp;
    newNode->next = NULL;
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}
struct Node* add_p(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;
    struct Node* current = NULL;
    while (poly1 != NULL && poly2 != NULL) {
        struct Node* newTerm = (struct Node*)malloc(sizeof(struct Node));
        if (poly1->exp > poly2->exp) {
            newTerm->coeff = poly1->coeff;
            newTerm->exp = poly1->exp;
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            newTerm->coeff = poly2->coeff;
            newTerm->exp = poly2->exp;
            poly2 = poly2->next;
        } else {
            newTerm->coeff = poly1->coeff + poly2->coeff;
            newTerm->exp = poly1->exp;
            poly1 = poly1->next;
            poly2 = poly2->next;
        }

        newTerm->next = NULL;
        if (result == NULL) {
            result = newTerm;
            current = result;
        } else {
            current->next = newTerm;
            current = current->next;
        }
    }
    while (poly1 != NULL) {
        struct Node* newTerm = (struct Node*)malloc(sizeof(struct Node));
        newTerm->coeff = poly1->coeff;
        newTerm->exp = poly1->exp;
        newTerm->next = NULL;
        current->next = newTerm;
        current = current->next;
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        struct Node* newTerm = (struct Node*)malloc(sizeof(struct Node));
        newTerm->coeff = poly2->coeff;
        newTerm->exp = poly2->exp;
        newTerm->next = NULL;
        current->next = newTerm;
        current = current->next;
        poly2 = poly2->next;
    }
    return result;
}
void print_p(struct Node* p) {
    while (p != NULL) {
        printf(""%d "", p->coeff);
        p = p->next;
    }
}
int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* p_1 = NULL;
    struct Node* p_2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int c, e;
        scanf(""%d %d"", &c, &e);
        if (i < n) {
            insert_term(&p_1, c, e);
        } else {
            insert_term(&p_2, c, e);
        }
    }
    struct Node* result = add_p(p_1, p_2);
    print_p(result);
    return 0;
}
"
22714607,PES1UG22CS383,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *read(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        { 
              head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}
void print_1(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    { count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n""); 
}
void print_2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    { count++;
        if(count>mid)
        { printf(""%d "",p->data);
        }
     p=p->next;
    }
}
int main() {
    
    Node *q;
    int n;
    scanf(""%d"",&n);
    q=read(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    print_1(q,mid);
    print_2(q,n,mid);
    
    return 0;
}"
22714608,PES1UG22CS380,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to insert a term into a polynomial linked list
void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* curr = *poly;
        while (curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = newTerm;
    }
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Append remaining terms, if any
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
"
22714608,PES1UG22CS380,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        {
              head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
       
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
   
}
int main() {
   
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)    
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
   
    return 0;
}"
22714633,PES1UG22CS373,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to insert a term into a polynomial linked list
void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* curr = *poly;
        while (curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = newTerm;
    }
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Append remaining terms, if any
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22714633,PES1UG22CS373,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readlist(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        { 
              head=temp;
        }
        else
        {
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    
    return head;

}

void printlist1(Node *head,int n)
{
    int count=0;
    
    Node *p=head;
    
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    
    printf(""\n"");
        
}

void printlist2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    
    while(p!=NULL)
    {   
        count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     
        p=p->next;
    }
    
}

int main() 
{
    
    Node *h;
    int n, mid;
    scanf(""%d"",&n);
    
    h=readlist(n);
    
    if(n%2!=0)     
    {
        mid=(n/2)+1;
    }
    
    else
    {
        mid=(n/2);
    }
    printlist1(h,mid);
    printlist2(h,n,mid);
    
    return 0;
}"
22724743,PES1UG22CS424,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



typedef struct node
{
    int coeff;
    int powx;
    struct node *next;
}NODE;

typedef struct polynomial
{
    NODE *head;
}POLYNOMIAL;

void initPolynomial(POLYNOMIAL *pl)
{
    pl->head = NULL;
}

void insertLast(POLYNOMIAL *pl, int cf, int px)
{
    NODE *newNode = malloc(sizeof(NODE));
    newNode->coeff = cf;
    newNode->powx = px;
    newNode->next = NULL;
    
    if(pl->head == NULL)
    {
        pl->head = newNode;
    }
    else
    {
        NODE *p = pl->head;
        while(p->next != NULL)
            p = p->next;
        
        p->next = newNode;
    }
}

void display(POLYNOMIAL *pl)
{
    NODE *p = pl->head;
    
    while(p->next != NULL)
    {
        printf(""%d "",p->coeff);
        p = p->next;
    }
    printf(""%d"",p->coeff);
}

void addPolynomial(POLYNOMIAL *pl1, POLYNOMIAL *pl2, POLYNOMIAL *pl3)
{
    NODE *p = pl1->head;
    NODE *q = pl2->head;
    
    int cf,px;
    
    while(p!= NULL && q!= NULL)
    {
        
        if(p->powx == q->powx)
        {
            cf = p->coeff + q->coeff;
            px = p->powx;
            p = p->next;
            q = q->next;
        }
        else if(p->powx > q->powx)
        {
            cf = p->coeff;
            px = p->powx;
            p = p->next;
        }
        else
        {
            cf = q->coeff;
            px = q->powx;
            q = q->next;
        }
        insertLast(pl3,cf,px);
    }
    
    while(p!=NULL)    //If terms are left out in polynomial1
    {
        insertLast(pl3,p->coeff,p->powx);
        p=p->next;
    }
    
    while(q!=NULL)        //If terms are left out in polynomial2
    {
        insertLast(pl3,q->coeff,q->powx);
        q=q->next;
    }
}

void createPolynomial(POLYNOMIAL *pl, int n)
{
    int cf,px;
    for(int i = 0; i < n; i++)
    {
        scanf(""%d %d"",&cf,&px);
        insertLast(pl,cf,px);
    }
}

int main() 
{

    
    POLYNOMIAL pl1,pl2,pl3;
    
    initPolynomial(&pl1);
    initPolynomial(&pl2);
    initPolynomial(&pl3);
    
    int n,m;
    scanf(""%d %d"",&n,&m);
    
    createPolynomial(&pl1,n);
    createPolynomial(&pl2,m);
    
    addPolynomial(&pl1, &pl2, &pl3);
    display(&pl3);
    return 0;
}
"
22724743,PES1UG22CS424,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};
// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
// Function to insert a node at the end of the linked list
struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}
// Function to find the midpoint of a linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
// Function to split a linked list into two parts at the given node
struct Node* splitLinkedList(struct Node* head, struct Node* midpoint) {
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;

    return secondPart;
}
// Function to print the elements of a linked list
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    // Read node values and create the linked list
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }

    // Find the midpoint of the linked list
    struct Node* midpoint = findMidpoint(head);

    // Split the linked list into two parts at the midpoint
    struct Node* secondPart = splitLinkedList(head, midpoint);

    // Print the elements of both lists
    printLinkedList(head);
    printLinkedList(secondPart);

    // Free memory
    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    while (secondPart != NULL) {
        struct Node* temp = secondPart;
        secondPart = secondPart->next;
        free(temp);
    }
    return 0;
}



"
22725563,PES1UG22CS428,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {
    int coeff;
    int power;
    struct Node* next;
};
struct Node* createNode(int coeff, int power) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->power = power;
    newNode->next = NULL;
    return newNode;
}
void insertNode(struct Node** head, int coeff, int power) {
    struct Node* newNode = createNode(coeff, power);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}
void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node** result) {
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->power == poly2->power) {
            insertNode(result, poly1->coeff + poly2->coeff, poly1->power);
            poly1 = poly1->next;
            poly2 = poly2->next;
        } else if (poly1->power > poly2->power) {
            insertNode(result, poly1->coeff, poly1->power);
            poly1 = poly1->next;
        } else {
            insertNode(result, poly2->coeff, poly2->power);
            poly2 = poly2->next;
        }
    }
    while (poly1 != NULL) {
        insertNode(result, poly1->coeff, poly1->power);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertNode(result, poly2->coeff, poly2->power);
        poly2 = poly2->next;
    }
}
void printPolynomial(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
    printf(""\n"");
}
int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        if (i < n) {
            insertNode(&poly1, coeff, power);
        } else {
            insertNode(&poly2, coeff, power);
        }
    }
    struct Node* result = NULL;
    addPolynomials(poly1, poly2, &result);
    printPolynomial(result);
    return 0;
}
    
"
22725563,PES1UG22CS428,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
// Structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};
// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
// Function to insert a node at the end of the linked list
struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}
// Function to find the midpoint of a linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
// Function to split a linked list into two parts at the given node
struct Node* splitLinkedList(struct Node* head, struct Node* midpoint) {
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;

    return secondPart;
}
// Function to print the elements of a linked list
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    // Read node values and create the linked list
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }

    // Find the midpoint of the linked list
    struct Node* midpoint = findMidpoint(head);

    // Split the linked list into two parts at the midpoint
    struct Node* secondPart = splitLinkedList(head, midpoint);

    // Print the elements of both lists
    printLinkedList(head);
    printLinkedList(secondPart);

    // Free memory
    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    while (secondPart != NULL) {
        struct Node* temp = secondPart;
        secondPart = secondPart->next;
        free(temp);
    }
    return 0;
}
  

"
22734030,PES1UG22CS391,Polynomial Addition,15,"#include <stdio.h>

#include <stdlib.h>

struct Node {

    int coeff;

    int power;

    struct Node* next;

};

struct Node* createNode(int coeff, int power) {

    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

    newNode->coeff = coeff;

    newNode->power = power;

    newNode->next = NULL;

    return newNode;

}

void insertNode(struct Node** poly, int coeff, int power) {

    struct Node* newNode = createNode(coeff, power);

    if (*poly == NULL) {

        *poly = newNode;

        return;

    }

    struct Node* temp = *poly;

    while (temp->next != NULL) {

        temp = temp->next;

    }

    temp->next = newNode;

}

void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node** result) {

    while (poly1 != NULL && poly2 != NULL) {

        if (poly1->power > poly2->power) {

            insertNode(result, poly1->coeff, poly1->power);

            poly1 = poly1->next;

        } else if (poly1->power < poly2->power) {

            insertNode(result, poly2->coeff, poly2->power);

            poly2 = poly2->next;

        } else {

            insertNode(result, poly1->coeff + poly2->coeff, poly1->power);

            poly1 = poly1->next;

            poly2 = poly2->next;

        }

    }

    while (poly1 != NULL) {

        insertNode(result, poly1->coeff, poly1->power);

        poly1 = poly1->next;

    }

    while (poly2 != NULL) {

        insertNode(result, poly2->coeff, poly2->power);

        poly2 = poly2->next;

    }

}

void printPolynomial(struct Node* poly) {

    while (poly != NULL) {

        printf(""%d "", poly->coeff);

        poly = poly->next;

    }

}

int main() {

    int n, m;

    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;

    struct Node* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {

        int coeff, power;

        scanf(""%d %d"", &coeff, &power);

        if (i < n) {

            insertNode(&poly1, coeff, power);

        } else {

            insertNode(&poly2, coeff, power);

        }

    }

    struct Node* result = NULL;

    addPolynomials(poly1, poly2, &result);

    printPolynomial(result);

    return 0;

}

"
22734030,PES1UG22CS391,Divide Linked List 2,15,"#include <stdio.h>

#include <stdlib.h>

// Definition of a singly linked list node

struct Node {

    int data;

    struct Node* next;

};

// Function to find midpoint and split linked list

void splitLinkedList(struct Node* head, struct Node** firstHalf, struct Node** secondHalf) {

    struct Node* slow = head;

    struct Node* fast = head->next;

    while (fast != NULL) {

        fast = fast->next;

        if (fast != NULL) {

            slow = slow->next;

            fast = fast->next;

        }

    }

    *firstHalf = head;

    *secondHalf = slow->next;

    slow->next = NULL;

}

// Function to print linked list

void printLinkedList(struct Node* head) {

    struct Node* current = head;

    while (current != NULL) {

        printf(""%d "", current->data);

        current = current->next;

    }

    printf(""\n"");

}

int main() {

    int n;

    scanf(""%d"", &n);

    struct Node* head = NULL;

    struct Node* tail = NULL;

    for (int i = 0; i < n; ++i) {

        int value;

        scanf(""%d"", &value);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

        newNode->data = value;

        newNode->next = NULL;

        if (head == NULL) {

            head = newNode;

            tail = newNode;

        } else {

            tail->next = newNode;

            tail = newNode;

        }

    }

    struct Node* firstHalf = NULL;

    struct Node* secondHalf = NULL;

    splitLinkedList(head, &firstHalf, &secondHalf);

    printLinkedList(firstHalf);

    printLinkedList(secondHalf);

    // Free memory

    struct Node* current = head;

    while (current != NULL) {

        struct Node* temp = current;

        current = current->next;

        free(temp);

    }

    return 0;

}

"
22734411,PES1UG22CS399,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};
struct Term* createTerm(int coefficient, int exponent) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coefficient;
    newTerm->exponent = exponent;
    newTerm->next = NULL;
    return newTerm;
}
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    struct Term* tail = NULL;
    while (poly1 && poly2) {
    if (poly1->exponent > poly2->exponent) {
    if (!result) {
    result = tail = createTerm(poly1->coefficient, poly1->exponent);
    } else {
    tail->next = createTerm(poly1->coefficient, poly1->exponent);
    tail = tail->next;
    }
  poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            if (!result) {
                result = tail = createTerm(poly2->coefficient, poly2->exponent);
            } else {
                tail->next = createTerm(poly2->coefficient, poly2->exponent);
                tail = tail->next;
            }
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (!result) {
                result = tail = createTerm(sum, poly1->exponent);
            } else {
                tail->next = createTerm(sum, poly1->exponent);
                tail = tail->next;
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    while (poly1) {
        tail->next = createTerm(poly1->coefficient, poly1->exponent);
        tail = tail->next;
        poly1 = poly1->next;
    }
    while (poly2) {
        tail->next = createTerm(poly2->coefficient, poly2->exponent);
        tail = tail->next;
        poly2 = poly2->next;
    }
    return result;
}
void printPolynomial(struct Term* poly) {
    while (poly) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}
int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    for (int i = 0; i < n + m; i++) {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        if (i < n) {
            if (!poly1) {
                poly1 = createTerm(coeff, power);
            } else {
                struct Term* temp = poly1;
                while (temp->next) {
                    temp = temp->next;
                }
                temp->next = createTerm(coeff, power);
            }
        } else {
            if (!poly2) {
                poly2 = createTerm(coeff, power);
            } else {
                struct Term* temp = poly2;
                while (temp->next) {
                    temp = temp->next;
                }
                temp->next = createTerm(coeff, power);
            }
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    return 0;
}"
22734411,PES1UG22CS399,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
struct Node* splitLinkedList(struct Node* head, struct Node* midpoint) {
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;
    return secondPart;
}
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);
    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }
    struct Node* midpoint = findMidpoint(head);
    struct Node* secondPart = splitLinkedList(head, midpoint);
    printLinkedList(head);
    printLinkedList(secondPart);
    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    while (secondPart != NULL) {
        struct Node* temp = secondPart;
        secondPart = secondPart->next;
        free(temp);
    }
  return 0;
}
"
22734651,PES1UG21CS389,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int coeff;
    int powx;
    struct node *next;
}NODE;

typedef struct polynomial
{
    NODE *head;
}POLYNOMIAL;

void initPolynomial(POLYNOMIAL *pl)
{
    pl->head = NULL;
}

void insertLast(POLYNOMIAL *pl, int cf, int px)
{
    NODE *newNode = malloc(sizeof(NODE));
    newNode->coeff = cf;
    newNode->powx = px;
    newNode->next = NULL;
    
    if(pl->head == NULL)
    {
        pl->head = newNode;
    }
    else
    {
        NODE *p = pl->head;
        while(p->next != NULL)
            p = p->next;
        
        p->next = newNode;
    }
}

void display(POLYNOMIAL *pl)
{
    NODE *p = pl->head;
    
    while(p->next != NULL)
    {
        printf(""%d "",p->coeff);
        p = p->next;
    }
    printf(""%d"",p->coeff);
}

void addPolynomial(POLYNOMIAL *pl1, POLYNOMIAL *pl2, POLYNOMIAL *pl3)
{
    NODE *p = pl1->head;
    NODE *q = pl2->head;
    
    int cf,px;
    
    while(p!= NULL && q!= NULL)
    {
        
        if(p->powx == q->powx)
        {
            cf = p->coeff + q->coeff;
            px = p->powx;
            p = p->next;
            q = q->next;
        }
        else if(p->powx > q->powx)
        {
            cf = p->coeff;
            px = p->powx;
            p = p->next;
        }
        else
        {
            cf = q->coeff;
            px = q->powx;
            q = q->next;
        }
        insertLast(pl3,cf,px);
    }
    
    while(p!=NULL)    //If terms are left out in polynomial1
    {
        insertLast(pl3,p->coeff,p->powx);
        p=p->next;
    }
    
    while(q!=NULL)        //If terms are left out in polynomial2
    {
        insertLast(pl3,q->coeff,q->powx);
        q=q->next;
    }
}

void createPolynomial(POLYNOMIAL *pl, int n)
{
    int cf,px;
    for(int i = 0; i < n; i++)
    {
        scanf(""%d %d"",&cf,&px);
        insertLast(pl,cf,px);
    }
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    POLYNOMIAL pl1,pl2,pl3;
    
    initPolynomial(&pl1);
    initPolynomial(&pl2);
    initPolynomial(&pl3);
    
    int n,m;
    scanf(""%d %d"",&n,&m);
    
    createPolynomial(&pl1,n);
    createPolynomial(&pl2,m);
    
    addPolynomial(&pl1, &pl2, &pl3);
    display(&pl3);
    return 0;
}"
22734651,PES1UG21CS389,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
// Structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};
// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
// Function to insert a node at the end of the linked list
struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}
// Function to find the midpoint of a linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
// Function to split a linked list into two parts at the given node
struct Node* splitLinkedList(struct Node* head, struct Node* midpoint) {
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;

    return secondPart;
}
// Function to print the elements of a linked list
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    // Read node values and create the linked list
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }

    // Find the midpoint of the linked list
    struct Node* midpoint = findMidpoint(head);

    // Split the linked list into two parts at the midpoint
    struct Node* secondPart = splitLinkedList(head, midpoint);

    // Print the elements of both lists
    printLinkedList(head);
    printLinkedList(secondPart);

    // Free memory
    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    while (secondPart != NULL) {
        struct Node* temp = secondPart;
        secondPart = secondPart->next;
        free(temp);
    }
    return 0;
}"
22736088,PES1UG22CS397,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int power;
    struct Node* next;
};

struct Node* createNode(int coeff, int power) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->power = power;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node** poly, int coeff, int power) {
    struct Node* newNode = createNode(coeff, power);
    if (*poly == NULL) {
        *poly = newNode;
    } else {
        struct Node* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->power > poly2->power) {
            insertNode(&result, poly1->coeff, poly1->power);
            poly1 = poly1->next;
        } else if (poly1->power < poly2->power) {
            insertNode(&result, poly2->coeff, poly2->power);
            poly2 = poly2->next;
        } else {
            insertNode(&result, poly1->coeff + poly2->coeff, poly1->power);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) {
        insertNode(&result, poly1->coeff, poly1->power);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertNode(&result, poly2->coeff, poly2->power);
        poly2 = poly2->next;
    }
    
    return result;
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        if (i < n) {
            insertNode(&poly1, coeff, power);
        } else {
            insertNode(&poly2, coeff, power);
        }
    }
    
    struct Node* result = addPolynomials(poly1, poly2);
    
    printPolynomial(result);
    
    return 0;
}
"
22736088,PES1UG22CS397,Divide Linked List 2,15,"#include<stdio.h>
#include<stdlib.h>

typedef struct node
{
    int info;
    struct node *next;
}NODE;

typedef struct list
{
    NODE *head;
}LIST;

void initlist(LIST *pl)
{
    pl->head = NULL;
}
void display(LIST *pl)
{
    NODE *p = pl->head;
    while(p!=NULL)
    {
        printf(""%d "" ,p->info);
    }
}
NODE *createnode(int ele)
{
    NODE *newnode = malloc(sizeof(struct node));
    newnode->info = ele;
    newnode->next = NULL;
    return newnode;
}
void insertlast(LIST *pl , int ele)
{
    NODE *newnode = createnode(ele);
    if(pl->head==NULL)    //List empty case
    {
        pl->head=newnode;
    }
    else
    {
        NODE *p=pl->head;
        
        while(p->next!=NULL)
            p=p->next;
        
        p->next=newnode;
    }
    
}

int countnodes(LIST *pl)
{
    int n=0;
    NODE *p = pl->head;
    while(p!=NULL)
    {
        n++;
        //printf(""%d "",p->info);
        p=p->next;
    }
    return n;
}
void divide(LIST *pl)
{   NODE *p = pl->head;
    int nodes = countnodes(pl);
 //printf(""%d "" , nodes);
    if(nodes==1)
    {
        printf(""%d "",p->info);
    }
    else if(nodes%2==0)
    {
        NODE *p = pl->head;
        for(int i = 1;i<=(nodes/2); i++)
        {
            printf(""%d "" , p->info);
            p = p->next;
        }
        printf(""\n"");
        while(p!=NULL)
        {
            printf(""%d "" , p->info);
            p=p->next;
        }
        
    }
    else
    {
        NODE *p = pl->head;
        int mid = (nodes+1)/2;
        for(int i = 1 ; i<=mid ; i++)
        {
            printf(""%d "" , p->info);
            p=p->next;
        }
        printf(""\n"");
        while(p!=NULL)
        {
            printf(""%d "" , p->info);
            p=p->next;
        }
    }
}


int main()
{
    LIST lobj;
    // LIST lobj1 , lobj2;
    initlist(&lobj);
    // initlist(&lobj1);
    // initlist(&lobj2);
    int n,ele;
    scanf(""%d"" , &n);
    for(int i = 0;i<n ; i++)
    {
        scanf(""%d "" , &ele);
        insertlast(&lobj , ele);
    }
    divide(&lobj);
}
"
22736102,PES1UG22CS426,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a polynomial term
typedef struct Term {
    int coeff;
    int exp;
    struct Term* next;
} Term;

// Function to insert a new term into the polynomial linked list
void insertTerm(Term** poly, int coeff, int exp) {
    Term* newTerm = (Term*)malloc(sizeof(Term));
    newTerm->coeff = coeff;
    newTerm->exp = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

// Function to add two polynomials represented as linked lists
Term* addPolynomials(Term* poly1, Term* poly2) {
    Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertTerm(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertTerm(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            int sumCoeff = poly1->coeff + poly2->coeff;
            if (sumCoeff != 0) {
                insertTerm(&result, sumCoeff, poly1->exp);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Add any remaining terms from both polynomials
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }

    return result;
}

// Function to display a polynomial
void displayPolynomial(Term* poly) {
    if (poly == NULL) {
        printf(""0"");
    } else {
        while (poly != NULL) {
            printf(""%d "", poly->coeff);
            poly = poly->next;
        }
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term* poly1 = NULL;
    Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }


    Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);

    return 0;
}
"
22736102,PES1UG22CS426,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

// Define the structure for a linked list node
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to insert a new node at the end of the linked list
void insertNode(Node** head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to find the midpoint of the linked list using fast and slow pointers
Node* findMidpoint(Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    Node* slow = head;
    Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

// Function to split the linked list into two parts at the midpoint
void splitLinkedList(Node* head, Node** firstHalf, Node** secondHalf) {
    Node* midpoint = findMidpoint(head);
    *firstHalf = head;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}

// Function to print the elements of a linked list
void printLinkedList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    Node* head = NULL;

    for (int i = 0; i < n; ++i) {
        int value;
        scanf(""%d"", &value);
        insertNode(&head, value);
    }

    Node* firstHalf = NULL;
    Node* secondHalf = NULL;

    splitLinkedList(head, &firstHalf, &secondHalf);

   
    printLinkedList(firstHalf);

    
    printLinkedList(secondHalf);

    return 0;
}
"
22736231,PES1UG22CS379,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int coeff;
    int powx;
    struct node* next;
    
}NODE;
typedef struct polynomial
{
    NODE * head;
    
}POLY;

void initpoly(POLY *pl)
{
    pl->head=NULL;
}
void insertlast(POLY *pl,int cf,int px)
{
    NODE *newnode=malloc(sizeof(NODE));
    newnode->coeff=cf;
    newnode->powx=px;
    newnode->next=NULL;

    if (pl->head==NULL)
    {
        pl->head=newnode;
    }
    else
    {
        NODE *p;
        for(p=pl->head;p->next!=NULL;p=p->next)
        {}
        p->next=newnode;
    }
}
void createpoly(POLY *pl1,POLY *pl2)
{
    int cf,px,t1,t2;
    scanf(""%d %d"",&t1,&t2);
    for(int i=0;i<t1;i++)
    {
        scanf(""%d %d"",&cf,&px);
        insertlast(pl1,cf,px);
    }
    for(int i=0;i<t2;i++)
    {
        scanf(""%d %d"",&cf,&px);
        insertlast(pl2,cf,px);
    }
}
void display(POLY *pl)
{
    NODE *p=pl->head;
    while (p->next!=NULL)
    {
        printf(""%d "",p->coeff);
        p=p->next;
    }
    printf(""%d\n"",p->coeff);
}
void addpoly(POLY *pl1,POLY *pl2,POLY *pl3)
{
    NODE *p=pl1->head;NODE *q=pl2->head;
    int cf,px;
    while(p!=NULL&&q!=NULL)
    {
        if(p->powx==q->powx)
        {
            cf=(p->coeff)+(q->coeff);
            px=(p->powx);
            p=p->next;q=q->next;
        }
        else if (p->powx>q->powx)
        {
            cf=(p->coeff);
            px=(p->powx);
            p=p->next;
        }
        else
        {
            cf=(q->coeff);
            px=(q->powx);
            q=q->next;
        }
        insertlast(pl3,cf,px);
    }
    while(p!=NULL)
    {
        insertlast(pl3,p->coeff,p->powx);
        p=p->next;
    }
    while(q!=NULL)
    {
        insertlast(pl3,q->coeff,q->powx);
        q=q->next;
    }
}

int main() 
{
    POLY obj1,obj2,obj3;
    initpoly(&obj1);initpoly(&obj2);initpoly(&obj3);
    createpoly(&obj1,&obj2);
    addpoly(&obj1,&obj2,&obj3);
    display(&obj3);
    return 0;
}
"
22736231,PES1UG22CS379,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int info;
    struct node *next;
}NODE;

typedef struct list
{
    NODE *head;
}LIST;

void initlist(LIST *pl)
{
    pl->head=NULL; 
}
NODE* createnode(int ele)
{
    NODE* newnode=malloc(sizeof(NODE));
    newnode->info=ele;
    newnode->next=NULL;
    return newnode;
}
void insertlast(LIST *pl,int ele)
{
    NODE* newnode=createnode(ele);
    if (pl->head==NULL)
    {
        pl->head=newnode;
    }
    else
    {
        NODE* p;
        for(p=pl->head;p->next!=NULL;p=p->next)
        {}
        p->next=newnode;
    }
}
void display(LIST *pl)
{
    if (pl->head==NULL)
    {
        return;
    }
    else
    {
        NODE* p;
        for(p=pl->head;p!=NULL;p=p->next)
        {
            printf(""%d "",p->info);
        }
        printf(""\n"");
    }
}
void split(LIST *pl1,LIST *pl2,LIST *pl3)
{
    NODE *p=pl1->head;NODE *q=pl1->head;
    for(;p!=NULL&&(p->next!=NULL)&&(p->next->next!=NULL);)
    {
        q=q->next;
        p=p->next->next;
    }
    pl3->head=q->next;
    pl2->head=pl1->head;
    q->next=NULL;
}
int main() 
{
    int n;LIST obj1,obj2,obj3;
    scanf(""%d "",&n);
    initlist(&obj1);
    initlist(&obj2);
    initlist(&obj3);
    int ele[n];
    //scanf(""%d %d %d %d %d"",&ele[0],&ele[1],&ele[2],&ele[3],&ele[4]);
    for(int i=0;i<n;i++)
    {
        scanf(""%d "",&ele[i]);
        insertlast(&obj1,ele[i]);
    }
    split(&obj1,&obj2,&obj3);
    display(&obj2);
    display(&obj3);
    
    return 0;
}
"
22736232,PES1UG22CS403,Polynomial Addition,15,"// #include <stdio.h>
// #include <string.h>
// #include <math.h>
// #include <stdlib.h>

// typedef struct NODE{
//     int coeff;
//     int power;
//     struct NODE* next;
// }NODE;

// NODE* createNode(int coeff, int power){
//     NODE* newNode = (NODE*) malloc(sizeof(NODE));
//     newNode->coeff=coeff;
//     newNode->power=power;
//     newNode->next=NULL;
//     return newNode;    
// }

// NODE* insertFront(struct NODE* head, struct NODE* newNode){
//     NODE* headptr = (NODE*) malloc(sizeof(NODE));
//     headptr = head;
//     newNode->next=head;
//     head=newNode;
//     return head;
    
// }

// void sum(struct NODE* head1, struct NODE* head2,int n, int m){
//     int count=0;
//     NODE* ptr1 = (NODE*) malloc(sizeof(NODE));
//     NODE* ptr2 = (NODE*) malloc(sizeof(NODE));
//     ptr1 = head1;
//     ptr2 = head2;
    
//     while(ptr1->next!=NULL && ptr2->next!=NULL){
//         if((ptr1->coeff > ptr2->coeff)){
//             printf(""%d"", ptr1->coeff);
//             ptr1 = ptr1->next;
//         }
//         if(ptr1->coeff < ptr2->coeff){
//             printf(""%d"", ptr2->coeff);
//             ptr2 = ptr2->next;
//         }
//     }
//     while(ptr1==NULL && ptr2->next!=NULL){
//         printf(""%d"", ptr2->coeff);
//         ptr2 = ptr2->next;
//     }
//      while(ptr2==NULL && ptr1->next!=NULL){
//         printf(""%d"", ptr1->coeff);
//         ptr1 = ptr1->next;
//     }  
// }
// // 3 4  ---> 3x^4 + 
// // 2 3   --> 0 + 0x + 0x^2 + 2x^3


// int main() {

//     /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
//     struct NODE* head1 = (NODE*) malloc(sizeof(NODE));
//     struct NODE* head2 = (NODE*) malloc(sizeof(NODE));
//     int n;
//     scanf(""%d"", &n);
    
//     int m;
//     scanf(""%d"", &m);
    
//     for(int i=0;i<n;i++){
//         int coeff;
//         int power;
//         scanf(""%d"", &coeff);
//         scanf(""%d"", &power);        
//         for(int j=0;j<power;j++){
//             insertFront(head1, createNode(0,j));
//             if(j==power){
//                 createNode(coeff,j);
//             }
//         }        
//     }
    
//     for(int i=0;i<m;i++){
//         int coeff;
//         int power;
//         scanf(""%d"", &coeff);
//         scanf(""%d"", &power);        
//         for(int j=0;j<power;j++){
//             insertFront(head2, createNode(0,j));
//             if(j==power){
//                 createNode(coeff,j);
//             }
//         }        
//     }

    
//     sum(head1,head2,n,m);
    
    
    
    
//     return 0;
// }


#include <stdio.h>
#include <stdlib.h>

struct Term {
    int c;
    int exp;
    struct Term* n;
};

void insertTerm(struct Term** p, int c, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL) {
        *p = newTerm;
    } else {
        struct Term* current = *p;
        while (current->n != NULL) {
            current = current->n;
        }
        current->n = newTerm;
    }
}

struct Term* addPolynomials(struct Term* p1, struct Term* p2) {
    struct Term* result = NULL;
    struct Term* current1 = p1;
    struct Term* current2 = p2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            insertTerm(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp) {
            insertTerm(&result, current2->c, current2->exp);
            current2 = current2->n;
        } else {
            insertTerm(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }
    
    while (current1 != NULL) {
        insertTerm(&result, current1->c, current1->exp);
        current1 = current1->n;
    }
    
    while (current2 != NULL) {
        insertTerm(&result, current2->c, current2->exp);
        current2 = current2->n;
    }
    
    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}
"
22736232,PES1UG22CS403,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head;

    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

void splitLinkedList(struct Node* midNode, struct Node** firstHalf, struct Node** secondHalf) {
    if (midNode == NULL) {
        *firstHalf = NULL;
        *secondHalf = NULL;
        return;
    }

    *firstHalf = midNode->next;
    midNode->next = NULL;
    *secondHalf = *firstHalf;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&head, value);
    }

    struct Node* midNode = findMidpoint(head);
    struct Node* firstHalf = head;
    struct Node* secondHalf = midNode->next;
    midNode->next = NULL;

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22736331,PES1UG22CS401,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int coeff;
    int powx;
    struct node *next;
}NODE;

typedef struct polynomial
{
    NODE *head;
}POLY;

void inintPoly(POLY *pl);
void createPoly(POLY *pl);
void insertLast(POLY *pl,int cf,int px);
void display(POLY *pl);
void addPoly(POLY *pl1,POLY *pl2,POLY *pl3);



int main() {
    POLY pobj1,pobj2,pobj3;
    inintPoly(&pobj1);
    inintPoly(&pobj2);
    inintPoly(&pobj3);
    int n,m;
    scanf(""%d %d"",&n,&m);
    for(int i=0;i<n;i++)
    {
        createPoly(&pobj1);
    }
    
    for(int i=0;i<m;i++)
    {
        createPoly(&pobj2);
    }
    
    addPoly(&pobj1,&pobj2,&pobj3);
    
    display(&pobj3);
   
    return 0;
}


void inintPoly(POLY *pl)
{
    pl->head=NULL;
}

void insertLast(POLY *pl,int cf,int px)
{
    NODE *newNode=malloc(sizeof(NODE));
    newNode->coeff=cf;
    newNode->powx=px;
    newNode->next=NULL;

    if(pl->head==NULL)
    {
        pl->head=newNode;
    }
    else
    {
        NODE *p=pl->head;

        while(p->next!=NULL)
            p=p->next;
        
        p->next=newNode;
    }
}

void createPoly(POLY *pl)
{
    int cf,px;
    
        scanf(""%d %d"",&cf,&px);
        insertLast(pl,cf,px);
        
    
}

void display(POLY *pl)
{
    NODE *p=pl->head;

    while(p->next!=NULL)
    {
        printf(""%d "",p->coeff);
        p=p->next;
    }
    printf(""%d"",p->coeff);
}

void destroyPoly(POLY *pl)
{
    NODE *p=pl->head;

    while(p!=NULL)
    {
        pl->head=pl->head->next;
        free(p);
        p=pl->head;
    }
}

void addPoly(POLY *pl1,POLY *pl2,POLY *pl3)
{
    NODE *p=pl1->head;
    NODE *q=pl2->head;

    int cf,px;

    while(p!=NULL && q!=NULL)
    {
        if(p->powx == q->powx)
        {
            cf=p->coeff+q->coeff;
            px=p->powx;
            p=p->next;
            q=q->next;
        }
        else if (p->powx > q->powx)
        {
            cf=p->coeff;
            px=p->powx;
            p=p->next;
        }
        else
        {
            cf=q->coeff;
            px=q->powx;
            q=q->next;
        }
        insertLast(pl3,cf,px);      
    }

    while(p!=NULL)
    {
        insertLast(pl3,p->coeff,p->powx);
        p=p->next;
    }

    while(q!=NULL)
    {
        insertLast(pl3,q->coeff,q->powx);
        q=q->next;
    }
}

"
22736331,PES1UG22CS401,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct node
{
    int  info;
    struct node *next;

}NODE;

typedef struct list
{
    NODE *head;
}LIST;
void inintList(LIST *pl);
NODE* createNode(int ele);
void insertLast(LIST *pl,int ele);
void display(LIST *pl);
void split(LIST *pl,LIST *l1,LIST *l2);

int main() {
    
    LIST lobj1,lobj2,lobj3;
    inintList(&lobj1);
    inintList(&lobj2);
    inintList(&lobj3);
    
    int n;
    
    scanf(""%d"",&n);
    int ele[n];
    for(int i=0;i<n;i++)
    {   
        scanf(""%d "",&ele[i]);
        insertLast(&lobj1,ele[i]);
    } 
    split(&lobj1,&lobj2,&lobj3);
    display(&lobj2);
    display(&lobj3);

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}

void inintList(LIST *pl)
{
    pl->head=NULL;
}

NODE* createNode(int ele)
{
    NODE *newNode=malloc(sizeof(NODE));
    newNode-> info=ele;
    newNode->next=NULL;

    return newNode;
}
void insertLast(LIST *pl,int ele)
{
    NODE *newNode=createNode(ele);

    if(pl->head==NULL)
    {
        pl->head=newNode;
    }
    else
    {
        NODE* p=pl->head;
        while(p->next !=NULL)
        {
            p=p->next;
        }
        p->next=newNode;
    }
}
void display(LIST *pl)
{
    if ((pl->head)==NULL)
        return ;
    else
    {
        NODE *p=pl->head;

        while(p!=NULL)
        {
            printf(""%d "",p->info);
            p=p->next;
        }
        printf(""\n"");
    }
}

void split(LIST *pl,LIST *l1,LIST *l2)
{
    NODE *p=pl->head;
    NODE *q=pl->head;
    while(p!=NULL&&(p->next!=NULL)&&(p->next->next!=NULL))
    {
        q=q->next;
        p=p->next->next;
    }
    l2->head=q->next;
    l1->head=pl->head;
    q->next=NULL;
    

}"
22738678,PES1UG22CS387,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
typedef struct Term {
    int coeff;
    int exp;
    struct Term* next;
} Term;



void insertTerm(Term** poly, int coeff, int exp) {
    Term* newTerm = (Term*)malloc(sizeof(Term));
    newTerm->coeff = coeff;
    newTerm->exp = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}


Term* addPolynomials(Term* poly1, Term* poly2) {
    Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertTerm(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertTerm(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            int sumCoeff = poly1->coeff + poly2->coeff;
            if (sumCoeff != 0) {
                insertTerm(&result, sumCoeff, poly1->exp);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

   
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }

    return result;
}


void displayPolynomial(Term* poly) {
    if (poly == NULL) {
        printf(""0"");
    } else {
        while (poly != NULL) {
            printf(""%d "", poly->coeff);
            poly = poly->next;
        }
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term* poly1 = NULL;
    Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }


    Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);

    return 0;
}"
22738678,PES1UG22CS387,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct Node {
    int info;
    struct Node* next;
} Node;


void insertLast(Node** head, int ele) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->info = ele;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}


Node* findMidpoint(Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    Node* slow = head;
    Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}


void splitLinkedList(Node* head, Node** firstHalf, Node** secondHalf) {
    Node* midpoint = findMidpoint(head);
    *firstHalf = head;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}


void printLinkedList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->info);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    Node* head = NULL;

    for (int i = 0; i < n; ++i) {
        int value;
        scanf(""%d"", &value);
        insertLast(&head, value);
    }

    Node* firstHalf = NULL;
    Node* secondHalf = NULL;

    splitLinkedList(head, &firstHalf, &secondHalf);

   
    printLinkedList(firstHalf);

    
    printLinkedList(secondHalf);

    return 0;
}"
22739274,PES1UG22CS432,Polynomial Addition,15,"#include<stdio.h>
typedef struct Term {
    int coeff;
    int exp;
    struct Term* next;
} Term;

// Function to insert a new term into the polynomial linked list
void insertTerm(Term** poly, int coeff, int exp) {
    Term* newTerm = (Term*)malloc(sizeof(Term));
    newTerm->coeff = coeff;
    newTerm->exp = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

// Function to add two polynomials represented as linked lists
Term* addPolynomials(Term* poly1, Term* poly2) {
    Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertTerm(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertTerm(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            int sumCoeff = poly1->coeff + poly2->coeff;
            if (sumCoeff != 0) {
                insertTerm(&result, sumCoeff, poly1->exp);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Add any remaining terms from both polynomials
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }

    return result;
}

// Function to display a polynomial
void displayPolynomial(Term* poly) {
    if (poly == NULL) {
        printf(""0"");
    } else {
        while (poly != NULL) {
            printf(""%d "", poly->coeff);
            poly = poly->next;
        }
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term* poly1 = NULL;
    Term* poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }


    Term* result = addPolynomials(poly1, poly2);
    displayPolynomial(result);

    return 0;
}"
22739274,PES1UG22CS432,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

// Define the structure for a linked list node
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to insert a new node at the end of the linked list
void insertNode(Node** head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to find the midpoint of the linked list using fast and slow pointers
Node* findMidpoint(Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    Node* slow = head;
    Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

// Function to split the linked list into two parts at the midpoint
void splitLinkedList(Node* head, Node** firstHalf, Node** secondHalf) {
    Node* midpoint = findMidpoint(head);
    *firstHalf = head;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}

// Function to print the elements of a linked list
void printLinkedList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    Node* head = NULL;

    for (int i = 0; i < n; ++i) {
        int value;
        scanf(""%d"", &value);
        insertNode(&head, value);
    }

    Node* firstHalf = NULL;
    Node* secondHalf = NULL;

    splitLinkedList(head, &firstHalf, &secondHalf);

   
    printLinkedList(firstHalf);

    
    printLinkedList(secondHalf);

    return 0;
}"
22739351,PES1UG22CS411_,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int power;
    struct Node* next;
};
struct Node* createNode(int coeff, int power) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->power = power;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node** head, int coeff, int power) {
    struct Node* newNode = createNode(coeff, power);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node** result) {
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->power == poly2->power) {
            insertNode(result, poly1->coeff + poly2->coeff, poly1->power);
            poly1 = poly1->next;
            poly2 = poly2->next;
        } else if (poly1->power > poly2->power) {
            insertNode(result, poly1->coeff, poly1->power);
            poly1 = poly1->next;
        } else {
            insertNode(result, poly2->coeff, poly2->power);
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertNode(result, poly1->coeff, poly1->power);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertNode(result, poly2->coeff, poly2->power);
        poly2 = poly2->next;
    }
}
void printPolynomial(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;

    for (int i = 0; i < n + m; i++)
    {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        if (i < n) {
            insertNode(&poly1, coeff, power);
        } else {
            insertNode(&poly2, coeff, power);
        }
    }
    struct Node* result = NULL;
    addPolynomials(poly1, poly2, &result);
    printPolynomial(result);
    return 0;
}


"
22739351,PES1UG22CS411_,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
    };
struct Node* createNode(int data)
{
    struct Node* newNode=(struct Node*)malloc(sizeof(struct Node));
    newNode->data=data;
    newNode->next=NULL;
    return newNode;
}
struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
struct Node* splitLinkedList(struct Node* head, struct Node* midpoint) {
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;

    return secondPart;
}
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }
    struct Node* midpoint = findMidpoint(head);
    struct Node* secondPart = splitLinkedList(head, midpoint);
    printLinkedList(head);
    printLinkedList(secondPart);
    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }
    while (secondPart != NULL)
    {
        struct Node* temp = secondPart;
        secondPart = secondPart->next;
        free(temp);
    }
    return 0;
}"
22739599,PES1UG22CS400,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    if (*poly == NULL) {
        *poly = newNode;
    } else {
        struct Node* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node** resultPoly) {
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent == poly2->exponent) {
            insertTerm(resultPoly, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        } else if (poly1->exponent > poly2->exponent) {
            insertTerm(resultPoly, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else {
            insertTerm(resultPoly, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(resultPoly, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(resultPoly, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    
    for (int i = 0; i < n; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly1, coeff, exp);
    }
    
    for (int i = 0; i < m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        insertTerm(&poly2, coeff, exp);
    }

    struct Node* resultPoly = NULL;
    addPolynomials(poly1, poly2, &resultPoly);

    printPolynomial(resultPoly);

    return 0;
}

"
22739599,PES1UG22CS400,Divide Linked List 2,15,"
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void splitLinkedList(struct Node* head, struct Node** firstHalf, struct Node** secondHalf) {
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *firstHalf = head;
    *secondHalf = slow->next;
    slow->next = NULL;
}

void printLinkedList(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    struct Node* tail = NULL;

    for (int i = 0; i < n; i++) {
        int val;
        scanf(""%d"", &val);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = val;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    struct Node* firstHalf;
    struct Node* secondHalf;

    splitLinkedList(head, &firstHalf, &secondHalf);

    printLinkedList(firstHalf);
    printLinkedList(secondHalf);

    return 0;
}"
22739608,PES1UG22CS404,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node
{
    int coeff;
    int powx;
    struct node *next;
}NODE;

typedef struct polynomial
{
    NODE *head;
}POLYNOMIAL;

void initPolynomial(POLYNOMIAL *pl)
{
    pl->head = NULL;
}

void insertLast(POLYNOMIAL *pl, int cf, int px)
{
    NODE *newNode = malloc(sizeof(NODE));
    newNode->coeff = cf;
    newNode->powx = px;
    newNode->next = NULL;
    
    if(pl->head == NULL)
    {
        pl->head = newNode;
    }
    else
    {
        NODE *p = pl->head;
        while(p->next != NULL)
            p = p->next;
        
        p->next = newNode;
    }
}

void display(POLYNOMIAL *pl)
{
    NODE *p = pl->head;
    
    while(p->next != NULL)
    {
        printf(""%d "",p->coeff);
        p = p->next;
    }
    printf(""%d"",p->coeff);
}

void addPolynomial(POLYNOMIAL *pl1, POLYNOMIAL *pl2, POLYNOMIAL *pl3)
{
    NODE *p = pl1->head;
    NODE *q = pl2->head;
    
    int cf,px;
    
    while(p!= NULL && q!= NULL)
    {
        
        if(p->powx == q->powx)
        {
            cf = p->coeff + q->coeff;
            px = p->powx;
            p = p->next;
            q = q->next;
        }
        else if(p->powx > q->powx)
        {
            cf = p->coeff;
            px = p->powx;
            p = p->next;
        }
        else
        {
            cf = q->coeff;
            px = q->powx;
            q = q->next;
        }
        insertLast(pl3,cf,px);
    }
    
    while(p!=NULL)    //If terms are left out in polynomial1
    {
        insertLast(pl3,p->coeff,p->powx);
        p=p->next;
    }
    
    while(q!=NULL)        //If terms are left out in polynomial2
    {
        insertLast(pl3,q->coeff,q->powx);
        q=q->next;
    }
}

void createPolynomial(POLYNOMIAL *pl, int n)
{
    int cf,px;
    for(int i = 0; i < n; i++)
    {
        scanf(""%d %d"",&cf,&px);
        insertLast(pl,cf,px);
    }
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    POLYNOMIAL pl1,pl2,pl3;
    
    initPolynomial(&pl1);
    initPolynomial(&pl2);
    initPolynomial(&pl3);
    
    int n,m;
    scanf(""%d %d"",&n,&m);
    
    createPolynomial(&pl1,n);
    createPolynomial(&pl2,m);
    
    addPolynomial(&pl1, &pl2, &pl3);
    display(&pl3);
    return 0;
}"
22739608,PES1UG22CS404,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
// Structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};
// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
// Function to insert a node at the end of the linked list
struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}
// Function to find the midpoint of a linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
// Function to split a linked list into two parts at the given node
struct Node* splitLinkedList(struct Node* head, struct Node* midpoint) {
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;

    return secondPart;
}
// Function to print the elements of a linked list
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    // Read node values and create the linked list
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }

    // Find the midpoint of the linked list
    struct Node* midpoint = findMidpoint(head);

    // Split the linked list into two parts at the midpoint
    struct Node* secondPart = splitLinkedList(head, midpoint);

    // Print the elements of both lists
    printLinkedList(head);
    printLinkedList(secondPart);

    // Free memory
    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    while (secondPart != NULL) {
        struct Node* temp = secondPart;
        secondPart = secondPart->next;
        free(temp);
    }
    return 0;
}"
22739981,PES1UG22CS384,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


typedef struct Term 
{
    int coeff;
    int exp;
    struct Term* next;
} Term;
void insertTerm(Term** poly, int coeff, int exp) 
{
    Term* newTerm = (Term*)malloc(sizeof(Term));
    newTerm->coeff = coeff;
    newTerm->exp = exp;
    newTerm->next = NULL;

    if (*poly == NULL) 
    {
        *poly = newTerm;
    } 
    else 
    {
        Term* temp = *poly;
        while (temp->next != NULL)
        {
            temp = temp->next;
        }
        temp->next = newTerm;
    }
}

// Function to add two polynomials represented as linked lists
Term* addPolynomials(Term* poly1, Term* poly2) 
{
    Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertTerm(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertTerm(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            int sumCoeff = poly1->coeff + poly2->coeff;
            if (sumCoeff != 0) {
                insertTerm(&result, sumCoeff, poly1->exp);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Add any remaining terms from both polynomials
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }

    return result;
}

// Function to display a polynomial
void displayPolynomial(Term * poly) {
    if (poly == NULL) {
        printf(""0"");
    } else {
        while (poly != NULL) {
            printf(""%d "", poly->coeff);
            poly = poly->next;
        }
    }
    printf(""\n"");
}

int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);

    Term *poly1 = NULL;
    Term *poly2 = NULL;

    for (int i = 0; i < n + m; ++i) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }


    Term *result = addPolynomials(poly1, poly2);
    displayPolynomial(result);


}

"
22739981,PES1UG22CS384,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

// Define the structure for a linked list node
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to insert a new node at the end of the linked list
void insertNode(Node** head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to find the midpoint of the linked list using fast and slow pointers
Node* findMidpoint(Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    Node* slow = head;
    Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

// Function to split the linked list into two parts at the midpoint
void splitLinkedList(Node* head, Node** firstHalf, Node** secondHalf) {
    Node* midpoint = findMidpoint(head);
    *firstHalf = head;
    *secondHalf = midpoint->next;
    midpoint->next = NULL;
}

// Function to print the elements of a linked list
void printLinkedList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    Node* head = NULL;

    for (int i = 0; i < n; ++i) {
        int value;
        scanf(""%d"", &value);
        insertNode(&head, value);
    }

    Node* firstHalf = NULL;
    Node* secondHalf = NULL;

    splitLinkedList(head, &firstHalf, &secondHalf);

   
    printLinkedList(firstHalf);

    
    printLinkedList(secondHalf);

}
"
22740520,PES1UG22CS409,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {
    int coeff;
    int power;
    struct Node* next;
};
struct Node* createNode(int coeff, int power) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->power = power;
    newNode->next = NULL;
    return newNode;
}
void insertNode(struct Node** head, int coeff, int power) {
    struct Node* newNode = createNode(coeff, power);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}
void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node** result) {
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->power == poly2->power) {
            insertNode(result, poly1->coeff + poly2->coeff, poly1->power);
            poly1 = poly1->next;
            poly2 = poly2->next;
        } else if (poly1->power > poly2->power) {
            insertNode(result, poly1->coeff, poly1->power);
            poly1 = poly1->next;
        } else {
            insertNode(result, poly2->coeff, poly2->power);
            poly2 = poly2->next;
        }
    }
    while (poly1 != NULL) {
        insertNode(result, poly1->coeff, poly1->power);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertNode(result, poly2->coeff, poly2->power);
        poly2 = poly2->next;
    }
}
void printPolynomial(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
    printf(""\n"");
}
int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        if (i < n) {
            insertNode(&poly1, coeff, power);
        } else {
            insertNode(&poly2, coeff, power);
        }
    }
    struct Node* result = NULL;
    addPolynomials(poly1, poly2, &result);
    printPolynomial(result);
    return 0;
}

"
22740520,PES1UG22CS409,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
// Structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};
// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
// Function to insert a node at the end of the linked list
struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}
// Function to find the midpoint of a linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
// Function to split a linked list into two parts at the given node
struct Node* splitLinkedList(struct Node* head, struct Node* midpoint) {
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;
    return secondPart;
}
// Function to print the elements of a linked list
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);
    struct Node* head = NULL;
    // Read node values and create the linked list
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }
    // Find the midpoint of the linked list
    struct Node* midpoint = findMidpoint(head);
    
    // Split the linked list into two parts at the midpoint
    struct Node* secondPart = splitLinkedList(head, midpoint);
    
    // Print the elements of both lists
    printLinkedList(head);
    printLinkedList(secondPart);
    
    // Free memory
    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }
    while (secondPart != NULL) {
        struct Node* temp = secondPart;
        secondPart = secondPart->next;
        free(temp);
    }
    return 0;
}"
22741739,PES1UG22CS398,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node 
{
    int coeff;
    int power;
    struct Node* next;
};

struct Node* createNode(int coeff, int power) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->power = power;
    newNode->next = NULL;
    return newNode;
}

void insertNode(struct Node** poly, int coeff, int power) 
{
    struct Node* newNode = createNode(coeff, power);
    if (*poly == NULL) 
    {
        *poly = newNode;
    } 
    else 
    {
        struct Node* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) 
{
    struct Node* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) 
    {
        if (poly1->power > poly2->power) 
        {
            insertNode(&result, poly1->coeff, poly1->power);
            poly1 = poly1->next;
        } else if (poly1->power < poly2->power) 
        {
            insertNode(&result, poly2->coeff, poly2->power);
            poly2 = poly2->next;
        } else 
        {
            insertNode(&result, poly1->coeff + poly2->coeff, poly1->power);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    while (poly1 != NULL) 
    {
        insertNode(&result, poly1->coeff, poly1->power);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) 
    {
        insertNode(&result, poly2->coeff, poly2->power);
        poly2 = poly2->next;
    }
    
    return result;
}

void printPolynomial(struct Node* poly) 
{
    while (poly != NULL) 
    {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() 
{
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    
    for (int i = 0; i < n + m; i++) 
    {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        if (i < n) 
        {
            insertNode(&poly1, coeff, power);
        } else {
            insertNode(&poly2, coeff, power);
        }
    }
    
    struct Node* result = addPolynomials(poly1, poly2);
    
    printPolynomial(result);
    
    return 0;
}
"
22741739,PES1UG22CS398,Divide Linked List 2,15,"#include<stdio.h>
#include<stdlib.h>

typedef struct node
{
    int info;
    struct node *next;
}NODE;

typedef struct list
{
    NODE *head;
}LIST;

void initlist(LIST *pl)
{
    pl->head = NULL;
}
void display(LIST *pl)
{
    NODE *p = pl->head;
    while(p!=NULL)
    {
        printf(""%d "" ,p->info);
    }
}
NODE *createnode(int ele)
{
    NODE *newnode = malloc(sizeof(struct node));
    newnode->info = ele;
    newnode->next = NULL;
    return newnode;
}
void insertlast(LIST *pl , int ele)
{
    NODE *newnode = createnode(ele);
    if(pl->head==NULL)    //List empty case
    {
        pl->head=newnode;
    }
    else
    {
        NODE *p=pl->head;
        
        while(p->next!=NULL)
            p=p->next;
        
        p->next=newnode;
    }
    
}

int countnodes(LIST *pl)
{
    int n=0;
    NODE *p = pl->head;
    while(p!=NULL)
    {
        n++;
        //printf(""%d "",p->info);
        p=p->next;
    }
    return n;
}
void divide(LIST *pl)
{   NODE *p = pl->head;
    int nodes = countnodes(pl);
 //printf(""%d "" , nodes);
    if(nodes==1)
    {
        printf(""%d "",p->info);
    }
    else if(nodes%2==0)
    {
        NODE *p = pl->head;
        for(int i = 1;i<=(nodes/2); i++)
        {
            printf(""%d "" , p->info);
            p = p->next;
        }
        printf(""\n"");
        while(p!=NULL)
        {
            printf(""%d "" , p->info);
            p=p->next;
        }
        
    }
    else
    {
        NODE *p = pl->head;
        int mid = (nodes+1)/2;
        for(int i = 1 ; i<=mid ; i++)
        {
            printf(""%d "" , p->info);
            p=p->next;
        }
        printf(""\n"");
        while(p!=NULL)
        {
            printf(""%d "" , p->info);
            p=p->next;
        }
    }
}


int main()
{
    LIST lobj;
    // LIST lobj1 , lobj2;
    initlist(&lobj);
    // initlist(&lobj1);
    // initlist(&lobj2);
    int n,ele;
    scanf(""%d"" , &n);
    for(int i = 0;i<n ; i++)
    {
        scanf(""%d "" , &ele);
        insertlast(&lobj , ele);
    }
    divide(&lobj);
}"
22742191,PES1UG22CS372,Polynomial Addition,0,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
"
22742191,PES1UG22CS372,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

void insert(struct Node **head, int data) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node *current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node *findMidpoint(struct Node *head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node *slow = head;
    struct Node *fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

void splitLinkedList(struct Node *head, struct Node **first, struct Node **second) {
    struct Node *midpoint = findMidpoint(head);
    if (midpoint == NULL) {
        *first = NULL;
        *second = NULL;
        return;
    }

    *second = midpoint->next;
    midpoint->next = NULL;
    *first = head;
}

void printList(struct Node *head) {
    while (head != NULL) {
        printf(""%d "", head->data);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node *head = NULL;
    for (int i = 0; i < n; i++) {
        int data;
        scanf(""%d"", &data);
        insert(&head, data);
    }

    struct Node *firstHalf, *secondHalf;
    splitLinkedList(head, &firstHalf, &secondHalf);

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}
"
22742920,PES1UG22CS408,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in a polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to insert a new term into a polynomial
void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* curr = *poly;
        while (curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = newTerm;
    }
}

// Function to add two polynomials and return the result
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }
    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);

    printPolynomial(result);

    return 0;
}
"
22742920,PES1UG22CS408,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
// Structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};
// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
// Function to insert a node at the end of the linked list
struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}
// Function to find the midpoint of a linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
// Function to split a linked list into two parts at the given node
struct Node* splitLinkedList(struct Node* head, struct Node* midpoint) {
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;

    return secondPart;
}
// Function to print the elements of a linked list
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    // Read node values and create the linked list
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }

    // Find the midpoint of the linked list
    struct Node* midpoint = findMidpoint(head);

    // Split the linked list into two parts at the midpoint
    struct Node* secondPart = splitLinkedList(head, midpoint);

    // Print the elements of both lists
    printLinkedList(head);
    printLinkedList(secondPart);

    // Free memory
    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    while (secondPart != NULL) {
        struct Node* temp = secondPart;
        secondPart = secondPart->next;
        free(temp);
    }
    return 0;
}
"
22742965,PES1UG22CS390,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to insert a term into a polynomial linked list
void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* curr = *poly;
        while (curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = newTerm;
    }
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Append remaining terms, if any
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
"
22742965,PES1UG22CS390,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        { 
              head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
  
    return 0;
}"
22743479,PES1UG22CS406,Polynomial Addition,15,"// #include <stdio.h>
// #include <string.h>
// #include <math.h>
// #include <stdlib.h>

// typedef struct NODE{
//     int coeff;
//     int deg;
//     struct NODE* next;
// }NODE;

// NODE* create_node(int c, int d){
//     NODE* new_node = (NODE*)malloc(sizeof(NODE));
//     new_node->coeff = c;
//     new_node->deg = d;
//     new_node->next = NULL;
//     return new_node;
// }

// void insertLast(NODE* head, int c, int d){
//     NODE* new_node = create_node(c,d);
//     NODE* temp = create_node(c,d);
//     temp = head;
//     if(temp->next == NULL){
//         temp->next = new_node;
//         new_node-> next = NULL;
//     }
//     else{
//         while(temp-> next != NULL){
//         temp = temp->next;
//      }
//         temp->next = new_node;
//         new_node-> next = NULL;
//     }
    
// }

// void construct(NODE* head1,NODE* head2,int x, int y){
//     int c,d;
//     for(int i=0; i<x; i++){
//         scanf(""%d %d/n"",&c,&d);
//         insertLast(head1,c,d);
//     }
//     for(int j=0; j<y; j++){
//         scanf(""%d %d/n"",&c,&d);
//         insertLast(head2,c,d);
//     }
// }
// int check(NODE* head, int pow){
//     NODE* tempo = (NODE*)malloc(sizeof(NODE));
//     tempo = head;
//     while(tempo->next != NULL){
//         if(tempo->deg == pow){
//             return 1;
//         }
//     }
//     return 0;
// }

// void add(NODE* head1,NODE* head2, int x, int y){
//     NODE* temp1 = (NODE*)malloc(sizeof(NODE));
//     NODE* temp2 = (NODE*)malloc(sizeof(NODE));
//     temp1 = head1->next;
//     temp2 = head2->next;
//     int ch;
//     if(x<y){
//         while(temp2 != NULL){
//             while(temp1 != NULL){
//                 ch = check(head1,temp2->deg);
//                 if(ch){
//                     printf(""%d "",temp2->coeff + temp1->coeff);
//                 }
//                 else{
//                     printf(""%d "",temp2->coeff);
//                 }
//                 temp1 = temp1->next;
//                 temp2 = temp2->next;
//             }
//             printf(""%d "",temp2->coeff);
//             temp2 = temp2->next;
//         }
//     }
//     else{
//         while(temp1 != NULL){
//             while(temp2 != NULL){
//                 ch = check(head2,temp1->deg);
//                 if(ch){
//                     printf(""%d "",temp1->coeff + temp2->coeff);
//                 }
//                 else{
//                     printf(""%d "",temp1->coeff);
//                 }
//                 temp1 = temp1->next;
//                 temp2 = temp2->next;
//             }
//             printf(""%d "",temp1->coeff);
//             temp1 = temp1->next;
//         }
//     }
// }

// int main() {
//     int m,n;
//     scanf(""%d %d/n"",&n,&m);
//     NODE* head1 = (NODE*)malloc(sizeof(NODE));
//     NODE* head2 = (NODE*)malloc(sizeof(NODE));
//     construct(head1,head2,n,m);
//     add(head1,head2,n,m);
// }

#include <stdio.h>
#include <stdlib.h>

struct Term {
    int c;
    int exp;
    struct Term* n;
};

void insertTerm(struct Term** p, int c, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL) {
        *p = newTerm;
    } else {
        struct Term* current = *p;
        while (current->n != NULL) {
            current = current->n;
        }
        current->n = newTerm;
    }
}

struct Term* addPolynomials(struct Term* p1, struct Term* p2) {
    struct Term* result = NULL;
    struct Term* current1 = p1;
    struct Term* current2 = p2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            insertTerm(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp) {
            insertTerm(&result, current2->c, current2->exp);
            current2 = current2->n;
        } else {
            insertTerm(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }
    
    while (current1 != NULL) {
        insertTerm(&result, current1->c, current1->exp);
        current1 = current1->n;
    }
    
    while (current2 != NULL) {
        insertTerm(&result, current2->c, current2->exp);
        current2 = current2->n;
    }
    
    return result;
}


void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}
"
22743479,PES1UG22CS406,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head;

    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

void splitLinkedList(struct Node* midNode, struct Node** firstHalf, struct Node** secondHalf) {
    if (midNode == NULL) {
        *firstHalf = NULL;
        *secondHalf = NULL;
        return;
    }

    *firstHalf = midNode->next;
    midNode->next = NULL;
    *secondHalf = *firstHalf;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&head, value);
    }

    struct Node* midNode = findMidpoint(head);
    struct Node* firstHalf = head;
    struct Node* secondHalf = midNode->next;
    midNode->next = NULL;

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22744026,pes1UG22CS402,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int c;
    int exp;
    struct Term* n;
};

void insertTerm(struct Term** p, int c, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL) {
        *p = newTerm;
    } else {
        struct Term* current = *p;
        while (current->n != NULL) {
            current = current->n;
        }
        current->n = newTerm;
    }
}

struct Term* addPolynomials(struct Term* p1, struct Term* p2) {
    struct Term* result = NULL;
    struct Term* current1 = p1;
    struct Term* current2 = p2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            insertTerm(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp) {
            insertTerm(&result, current2->c, current2->exp);
            current2 = current2->n;
        } else {
            insertTerm(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }
    
    while (current1 != NULL) {
        insertTerm(&result, current1->c, current1->exp);
        current1 = current1->n;
    }
    
    while (current2 != NULL) {
        insertTerm(&result, current2->c, current2->exp);
        current2 = current2->n;
    }
    
    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22744026,pes1UG22CS402,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head;

    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

void splitLinkedList(struct Node* midNode, struct Node** firstHalf, struct Node** secondHalf) {
    if (midNode == NULL) {
        *firstHalf = NULL;
        *secondHalf = NULL;
        return;
    }

    *firstHalf = midNode->next;
    midNode->next = NULL;
    *secondHalf = *firstHalf;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&head, value);
    }

    struct Node* midNode = findMidpoint(head);
    struct Node* firstHalf = head;
    struct Node* secondHalf = midNode->next;
    midNode->next = NULL;

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22744040,PES1UG22CS388,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int exp;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->exp = exp;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    if (*poly == NULL) {
        *poly = newNode;
        return;
    }

    struct Node* temp = *poly;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertTerm(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertTerm(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            int sumCoeff = poly1->coeff + poly2->coeff;
            insertTerm(&result, sumCoeff, poly1->exp);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Node* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22744040,PES1UG22CS388,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head;

    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

void splitLinkedList(struct Node* midNode, struct Node** firstHalf, struct Node** secondHalf) {
    if (midNode == NULL) {
        *firstHalf = NULL;
        *secondHalf = NULL;
        return;
    }

    *firstHalf = midNode->next;
    midNode->next = NULL;
    *secondHalf = *firstHalf;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&head, value);
    }

    struct Node* midNode = findMidpoint(head);
    struct Node* firstHalf = head;
    struct Node* secondHalf = midNode->next;
    midNode->next = NULL;

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22744185,PES1UG22CS431,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int exp;
    struct Node* next;
};

struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->exp = exp;
    newNode->next = NULL;
    return newNode;
}

void insertTerm(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    if (*poly == NULL) {
        *poly = newNode;
        return;
    }

    struct Node* temp = *poly;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertTerm(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertTerm(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            int sumCoeff = poly1->coeff + poly2->coeff;
            insertTerm(&result, sumCoeff, poly1->exp);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }

    return result;
}

void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Node* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}"
22744185,PES1UG22CS431,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* slow = head;
    struct Node* fast = head;

    while (fast->next != NULL && fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

void splitLinkedList(struct Node* midNode, struct Node** firstHalf, struct Node** secondHalf) {
    if (midNode == NULL) {
        *firstHalf = NULL;
        *secondHalf = NULL;
        return;
    }

    *firstHalf = midNode->next;
    midNode->next = NULL;
    *secondHalf = *firstHalf;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        insert(&head, value);
    }

    struct Node* midNode = findMidpoint(head);
    struct Node* firstHalf = head;
    struct Node* secondHalf = midNode->next;
    midNode->next = NULL;

    printList(firstHalf);
    printList(secondHalf);

    return 0;
}"
22744572,PES1UG22CS381,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>


struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* curr = *poly;
        while (curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = newTerm;
    }
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }

    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}

"
22744572,PES1UG22CS381,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        { 
              head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    return 0;
}"
22744586,PES1UG22CS378,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>

struct Term {
    int c;
    int exp;
    struct Term* n;
};

void insertTerm(struct Term** p, int c, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->c = c;
    newTerm->exp = exp;
    newTerm->n = NULL;
    
    if (*p == NULL) {
        *p = newTerm;
    } else {
        struct Term* current = *p;
        while (current->n != NULL) {
            current = current->n;
        }
        current->n = newTerm;
    }
}

struct Term* addPolynomials(struct Term* p1, struct Term* p2) {
    struct Term* result = NULL;
    struct Term* current1 = p1;
    struct Term* current2 = p2;
    
    while (current1 != NULL && current2 != NULL) {
        if (current1->exp > current2->exp) {
            insertTerm(&result, current1->c, current1->exp);
            current1 = current1->n;
        } else if (current1->exp < current2->exp) {
            insertTerm(&result, current2->c, current2->exp);
            current2 = current2->n;
        } else {
            insertTerm(&result, current1->c + current2->c, current1->exp);
            current1 = current1->n;
            current2 = current2->n;
        }
    }
    
    while (current1 != NULL) {
        insertTerm(&result, current1->c, current1->exp);
        current1 = current1->n;
    }
    
    while (current2 != NULL) {
        insertTerm(&result, current2->c, current2->exp);
        current2 = current2->n;
    }
    
    return result;
}

// Function to print the polynomial
void printPolynomial(struct Term* poly) {
    struct Term* current = poly;
    while (current != NULL) {
        printf(""%d "", current->c);
        current = current->n;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);
    
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    
    int coef, exp;
    for (int i = 0; i < n + m; i++) {
        scanf(""%d %d"", &coef, &exp);
        if (i < n) {
            insertTerm(&poly1, coef, exp);
        } else {
            insertTerm(&poly2, coef, exp);
        }
    }
    
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);
    
    return 0;
}"
22744586,PES1UG22CS378,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        { 
              head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    return 0;
}
"
22744598,PES1UG22CS412,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {

    int coefficient;

    int exponent;

    struct Node* next;

};
struct Node* createNode(int coeff, int exp) {

    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

    newNode->coefficient = coeff;

    newNode->exponent = exp;

    newNode->next = NULL;

    return newNode;

}
void insertTerm(struct Node** poly, int coeff, int exp) {

    struct Node* newNode = createNode(coeff, exp);

    if (*poly == NULL) {

        *poly = newNode;

    } else {

        struct Node* temp = *poly;

        while (temp->next != NULL) {

            temp = temp->next;

        }

        temp->next = newNode;

    }

}
void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node** resultPoly) {

    while (poly1 != NULL && poly2 != NULL) {

        if (poly1->exponent == poly2->exponent) {

            insertTerm(resultPoly, poly1->coefficient + poly2->coefficient, poly1->exponent);

            poly1 = poly1->next;

            poly2 = poly2->next;

        } else if (poly1->exponent > poly2->exponent) {

            insertTerm(resultPoly, poly1->coefficient, poly1->exponent);

            poly1 = poly1->next;

        } else {

            insertTerm(resultPoly, poly2->coefficient, poly2->exponent);

            poly2 = poly2->next;

        }

    }

    while (poly1 != NULL) {

        insertTerm(resultPoly, poly1->coefficient, poly1->exponent);

        poly1 = poly1->next;

    }

    while (poly2 != NULL) {

        insertTerm(resultPoly, poly2->coefficient, poly2->exponent);

        poly2 = poly2->next;

    }

}
void printPolynomial(struct Node* poly) {

    while (poly != NULL) {

        printf(""%d "", poly->coefficient);

        poly = poly->next;

    }

    printf(""\n"");

}
int main() {

    int n, m;

    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;

    struct Node* poly2 = NULL;

    

    for (int i = 0; i < n; i++) {

        int coeff, exp;

        scanf(""%d %d"", &coeff, &exp);

        insertTerm(&poly1, coeff, exp);

    }

    

    for (int i = 0; i < m; i++) {

        int coeff, exp;

        scanf(""%d %d"", &coeff, &exp);

        insertTerm(&poly2, coeff, exp);

    }

    struct Node* resultPoly = NULL;

    addPolynomials(poly1, poly2, &resultPoly);

    printPolynomial(resultPoly);

    return 0;

}




   













"
22744598,PES1UG22CS412,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {

    int data;

    struct Node* next;

};

void splitLinkedList(struct Node* head, struct Node** firstHalf, struct Node** secondHalf) {

    struct Node* slow = head;

    struct Node* fast = head->next;

    while (fast != NULL) {

        fast = fast->next;

        if (fast != NULL) {

            slow = slow->next;

            fast = fast->next;

        }

    }

    *firstHalf = head;

    *secondHalf = slow->next;

    slow->next = NULL;

}

void printLinkedList(struct Node* head) {

    while (head != NULL) {

        printf(""%d "", head->data);

        head = head->next;

    }

    printf(""\n"");

}

int main() {

    int n;

    scanf(""%d"", &n);

    struct Node* head = NULL;

    struct Node* tail = NULL;

    for (int i = 0; i < n; i++) {

        int val;

        scanf(""%d"", &val);

        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

        newNode->data = val;

        newNode->next = NULL;

        if (head == NULL) {

            head = newNode;

            tail = newNode;

        } else {

            tail->next = newNode;

            tail = newNode;

        }

    }

    struct Node* firstHalf;

    struct Node* secondHalf;

    splitLinkedList(head, &firstHalf, &secondHalf);

    printLinkedList(firstHalf);

    printLinkedList(secondHalf);

    return 0;

}


"
22744618,PES1UG22CS418,Polynomial Addition,15,"#include <stdio.h>

#include <stdlib.h>

struct Node {

    int coeff;

    int power;

    struct Node* next;

};

struct Node* createNode(int coeff, int power) {

    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

    newNode->coeff = coeff;

    newNode->power = power;

    newNode->next = NULL;

    return newNode;

}

void insertNode(struct Node** head, int coeff, int power) {

    struct Node* newNode = createNode(coeff, power);

    if (*head == NULL) {

        *head = newNode;

        return;

    }

    struct Node* temp = *head;

    while (temp->next != NULL) {

        temp = temp->next;

    }

    temp->next = newNode;

}

void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node** result) {

    while (poly1 != NULL && poly2 != NULL) {

        if (poly1->power == poly2->power) {

            insertNode(result, poly1->coeff + poly2->coeff, poly1->power);

            poly1 = poly1->next;

            poly2 = poly2->next;

        } else if (poly1->power > poly2->power) {

            insertNode(result, poly1->coeff, poly1->power);

            poly1 = poly1->next;

        } else {

            insertNode(result, poly2->coeff, poly2->power);

            poly2 = poly2->next;

        }

    }

    while (poly1 != NULL) {

        insertNode(result, poly1->coeff, poly1->power);

        poly1 = poly1->next;

    }

    while (poly2 != NULL) {

        insertNode(result, poly2->coeff, poly2->power);

        poly2 = poly2->next;

    }

}

void printPolynomial(struct Node* head) {

    while (head != NULL) {

        printf(""%d "", head->coeff);

        head = head->next;

    }

    printf(""\n"");

}

int main() {

    int n, m;

    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;

    struct Node* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {

        int coeff, power;

        scanf(""%d %d"", &coeff, &power);

        if (i < n) {

            insertNode(&poly1, coeff, power);

        } else {

            insertNode(&poly2, coeff, power);

        }

    }

    struct Node* result = NULL;

    addPolynomials(poly1, poly2, &result);

    printPolynomial(result);

    return 0;

}



"
22744618,PES1UG22CS418,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}

struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}

struct Node* splitLinkedList(struct Node* head, struct Node* midpoint) {
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;

    return secondPart;
}

void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }

    
    struct Node* midpoint = findMidpoint(head);

    
    struct Node* secondPart = splitLinkedList(head, midpoint);

    
    printLinkedList(head);
    printLinkedList(secondPart);

    
    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    while (secondPart != NULL) {
        struct Node* temp = secondPart;
        secondPart = secondPart->next;
        free(temp);
    }
    return 0;
}









"
22744713,PES1UG22CS377,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

typedef struct Term Polynomial;


void insertTerm(Polynomial** poly, int coefficient, int exponent) {
    Polynomial* newTerm = (Polynomial*)malloc(sizeof(Polynomial));
    newTerm->coefficient = coefficient;
    newTerm->exponent = exponent;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } 
    else {
        Polynomial* current = *poly;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newTerm;
    }
}


Polynomial* addPolynomials(Polynomial* poly1, Polynomial* poly2) {
    Polynomial* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } 
        else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } 
        else {
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            if (sumCoeff != 0) {
                insertTerm(&result, sumCoeff, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Append any remaining terms from poly1 and poly2
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void displayPolynomial(Polynomial* poly) {
    if (poly == NULL) {
        printf(""0\n"");
        return;
    }

    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
       
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    Polynomial* poly1 = NULL;
    Polynomial* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coefficient, exponent;
        scanf(""%d %d"", &coefficient, &exponent);
        if (i < n) {
            insertTerm(&poly1, coefficient, exponent);
        } else {
            insertTerm(&poly2, coefficient, exponent);
        }
    }

    Polynomial* result = addPolynomials(poly1, poly2);

    displayPolynomial(result);

    return 0;
}"
22744713,PES1UG22CS377,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>

struct NODE {
    int info;
    struct NODE *next;
};

void insert(struct NODE **head, int info) {
    struct NODE *newNODE = (struct NODE *)malloc(sizeof(struct NODE));
    newNODE->info = info;
    newNODE->next = NULL;

    if (*head == NULL) {
        *head = newNODE;
    } else {
        struct NODE *current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNODE;
    }
}

struct NODE *mid_node(struct NODE *head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct NODE *p = head;
    struct NODE *q = head->next;

    while (q != NULL && q->next != NULL) {
        p = p->next;
        q = q->next->next;
    }

    return p;
}

void split_list(struct NODE *head, struct NODE **first, struct NODE **second) {
    struct NODE *midpoint = mid_node(head);
    if (midpoint == NULL) {
        *first = NULL;
        *second = NULL;
        return;
    }

    *second = midpoint->next;
    midpoint->next = NULL;
    *first = head;
}

void display(struct NODE *head) {
    while (head != NULL) {
        printf(""%d "", head->info);
        head = head->next;
    }
    printf(""\n"");
}

int main() {
    int n;
    scanf(""%d"", &n);

    struct NODE *head = NULL;
    for (int i = 0; i < n; i++) {
        int info;
        scanf(""%d"", &info);
        insert(&head, info);
    }

    struct NODE *firstHalf, *secondHalf;
    split_list(head, &firstHalf, &secondHalf);

    display(firstHalf);
    display(secondHalf);

    return 0;
}"
22744757,PES1UG22CS371,Polynomial Addition,15,"#include <stdio.h>
#include <stdlib.h>
struct Node {
    int coeff;
    int power;
    struct Node* next;
};
struct Node* createNode(int coeff, int power) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->power = power;
    newNode->next = NULL;
    return newNode;
}
void insertNode(struct Node** head, int coeff, int power) {
    struct Node* newNode = createNode(coeff, power);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}
void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node** result) {
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->power == poly2->power) {
            insertNode(result, poly1->coeff + poly2->coeff, poly1->power);
            poly1 = poly1->next;
            poly2 = poly2->next;
        } else if (poly1->power > poly2->power) {
            insertNode(result, poly1->coeff, poly1->power);
            poly1 = poly1->next;
        } else {
            insertNode(result, poly2->coeff, poly2->power);
            poly2 = poly2->next;
        }
    }
    while (poly1 != NULL) {
        insertNode(result, poly1->coeff, poly1->power);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertNode(result, poly2->coeff, poly2->power);
        poly2 = poly2->next;
    }
}
void printPolynomial(struct Node* head) {
    while (head != NULL) {
        printf(""%d "", head->coeff);
        head = head->next;
    }
    printf(""\n"");
}
int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        if (i < n) {
            insertNode(&poly1, coeff, power);
        } else {
            insertNode(&poly2, coeff, power);
        }
    }
    struct Node* result = NULL;
    addPolynomials(poly1, poly2, &result);
    printPolynomial(result);
    return 0;
}"
22744757,PES1UG22CS371,Divide Linked List 2,15,"#include <stdio.h>
#include <stdlib.h>
// Structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};
// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
// Function to insert a node at the end of the linked list
struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    return head;
}
// Function to find the midpoint of a linked list using fast and slow pointers
struct Node* findMidpoint(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
// Function to split a linked list into two parts at the given node
struct Node* splitLinkedList(struct Node* head, struct Node* midpoint) {
    if (midpoint == NULL) {
        return NULL;
    }
    struct Node* secondPart = midpoint->next;
    midpoint->next = NULL;

    return secondPart;
}
// Function to print the elements of a linked list
void printLinkedList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf(""%d "", current->data);
        current = current->next;
    }
    printf(""\n"");
}
int main() {
    int n;
    scanf(""%d"", &n);

    struct Node* head = NULL;

    // Read node values and create the linked list
    for (int i = 0; i < n; i++) {
        int value;
        scanf(""%d"", &value);
        head = insertEnd(head, value);
    }

    // Find the midpoint of the linked list
    struct Node* midpoint = findMidpoint(head);

    // Split the linked list into two parts at the midpoint
    struct Node* secondPart = splitLinkedList(head, midpoint);

    // Print the elements of both lists
    printLinkedList(head);
    printLinkedList(secondPart);

    // Free memory
    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }

    while (secondPart != NULL) {
        struct Node* temp = secondPart;
        secondPart = secondPart->next;
        free(temp);
    }
    return 0;
}"
22744966,PES1UG22CS407,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Node {
    int coeff;
    int power;
    struct Node* next;
};

// Function to insert a term into the polynomial linked list
void insertTerm(struct Node** poly, int coeff, int power) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->power = power;
    newNode->next = NULL;

    if (*poly == NULL) {
        *poly = newNode;
    } else {
        struct Node* current = *poly;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to add two polynomials
struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->power > poly2->power) {
            insertTerm(&result, poly1->coeff, poly1->power);
            poly1 = poly1->next;
        } else if (poly1->power < poly2->power) {
            insertTerm(&result, poly2->coeff, poly2->power);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coeff + poly2->coeff, poly1->power);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coeff, poly1->power);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coeff, poly2->power);
        poly2 = poly2->next;
    }

    return result;
}

// Function to print the polynomial coefficients
void printPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coeff);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, power;
        scanf(""%d %d"", &coeff, &power);
        if (i < n) {
            insertTerm(&poly1, coeff, power);
        } else {
            insertTerm(&poly2, coeff, power);
        }
    }

    struct Node* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
    
    

    
    


    

   
"
22744966,PES1UG22CS407,Divide Linked List 2,15,"

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        { 
              head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    
    return 0;
}
"
22836457,PES1UG22CS376,Polynomial Addition,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};


void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coeff;
    newTerm->exponent = exp;
    newTerm->next = NULL;

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* curr = *poly;
        while (curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = newTerm;
    }
}


struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}
void printPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf(""%d "", poly->coefficient);
        poly = poly->next;
    }
    printf(""\n"");
}

int main() {
    int n, m;
    scanf(""%d %d"", &n, &m);

    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    for (int i = 0; i < n + m; i++) {
        int coeff, exp;
        scanf(""%d %d"", &coeff, &exp);
        if (i < n) {
            insertTerm(&poly1, coeff, exp);
        } else {
            insertTerm(&poly2, coeff, exp);
        }
    }
    struct Term* result = addPolynomials(poly1, poly2);
    printPolynomial(result);

    return 0;
}
"
22836457,PES1UG22CS376,Divide Linked List 2,15,"#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *readll(int n)
{
    Node *temp=NULL;
    Node *head=NULL;
    Node *p=NULL;
    for(int i=0;i<n;++i)
    {
        temp=(struct Node *)malloc(sizeof(struct Node));
        scanf(""%d"",&temp->data);
        temp->next=NULL;

        if(head==NULL)
        { 
              head=temp;
        }
        else{
        p=head;
        while(p->next!=NULL)
            p=p->next;
        p->next=temp;
        }
    }
    return head;

}

void printll(Node *head,int n)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        printf(""%d "",p->data);
        p=p->next;
        if(count==n)
            break;
    }
    printf(""\n"");
        
}

void printll2(Node *head,int n, int mid)
{
    int count=0;
    Node *p=head;
    while(p!=NULL)
    {   count++;
        if(count>mid)
        {    printf(""%d "",p->data);
        }
     p=p->next;
    }
    
}
int main() {
    
    Node *h;
    int n;
    scanf(""%d"",&n);
    h=readll(n);
    int mid;
    if(n%2!=0)     
        mid=(n/2)+1;
    else
        mid=(n/2);
    printll(h,mid);
    printll2(h,n,mid);
    return 0;
}"